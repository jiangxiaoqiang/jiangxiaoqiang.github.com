<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
<<<<<<< HEAD
      <title><![CDATA[Lombok精简Java代码]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/08/lombok/</url>
      <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://projectlombok.org/" target="_blank" rel="external">lombok</a>提供了简单的注解的形式来帮助我们简化消除一些必须有但显得很臃肿的java代码,特别是相对于POJO(Plain Ordinary Java Object)。安装Lombok Plugin和引入Jar包之后方可使用。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装完毕lombok插件之后，添加如下包：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>常用的 lombok 注解：</p>
<ul>
<li><strong>@Data</strong>：注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法</li>
<li><strong>@Setter</strong>：注解在属性上；为属性提供 setting 方法</li>
<li><strong>@Getter</strong>：注解在属性上；为属性提供 getting 方法</li>
<li><strong>@Log4j</strong>：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象</li>
<li><strong>@NoArgsConstructor</strong>：注解在类上；为类提供一个无参的构造方法</li>
<li><strong>@AllArgsConstructor</strong>：注解在类上；为类提供一个全参的构造方法</li>
</ul>
<p>如果不使用lombok注解，代码是这样：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(Person.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用lombok注解，代码是这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="meta">@Log</span>4j</div><div class="line"><span class="meta">@NoArgsConstructor</span></div><div class="line"><span class="meta">@AllArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一旦POJO字段较多时精简的代码就很明显了，而且使用Lombok的代码更加干净、易读，添加<strong>@Data</strong>注解之后，按Ctrl + O(Outline)可以看到生成了get和set方法。</p>
<h4 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h4><p>@EqualsAndHashCode注解实现equals()方法和hashCode()方法。hashcode是用于散列数据的快速存取，如利用HashSet/HashMap/Hashtable类来存储数据时，都是根据存储对象的hashcode值来进行判断是否相同的。</p>
]]></content>
=======
      <title><![CDATA[Spring事务管理]]></title>
      <url>%2F2016%2F12%2F03%2Fspring-transaction%2F</url>
      <content type="text"><![CDATA[事务最重要的两个特性，是事务的传播级别和数据隔离级别。传播级别定义的是事务的控制范围，事务隔离级别定义的是事务在数据库读写方面的控制范围。 配置12345678&lt;!-- 配置事务管理器 --&gt;&lt;bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource"&gt;&lt;/bean&gt;&lt;!-- enables scanning for @Transactional annotations --&gt;&lt;tx:annotation-driven transaction-manager="txManager" /&gt; 传播级别1） PROPAGATION_REQUIRED ，默认的spring事务传播级别，使用该级别的特点是，如果上下文中已经存在事务，那么就加入到事务中执行，如果当前上下文中不存在事务，则新建事务执行。所以这个级别通常能满足处理大多数的业务场景。 2）PROPAGATION_SUPPORTS ，从字面意思就知道，supports，支持，该传播级别的特点是，如果上下文存在事务，则支持事务加入事务，如果没有事务，则使用非事务的方式执行。所以说，并非所有的包在transactionTemplate.execute中的代码都会有事务支持。这个通常是用来处理那些并非原子性的非核心业务逻辑操作。应用场景较少。 3）PROPAGATION_MANDATORY ， 该级别的事务要求上下文中必须要存在事务，否则就会抛出异常！配置该方式的传播级别是有效的控制上下文调用代码遗漏添加事务控制的保证手段。比如一段代码不能单独被调用执行，但是一旦被调用，就必须有事务包含的情况，就可以使用这个传播级别。 4）PROPAGATION_REQUIRES_NEW ，从字面即可知道，new，每次都要一个新事务，该传播级别的特点是，每次都会新建一个事务，并且同时将上下文中的事务挂起，执行当前新建事务完成以后，上下文事务恢复再执行。 这是一个很有用的传播级别，举一个应用场景：现在有一个发送100个红包的操作，在发送之前，要做一些系统的初始化、验证、数据记录操作，然后发送100封红包，然后再记录发送日志，发送日志要求100%的准确，如果日志不准确，那么整个父事务逻辑需要回滚。怎么处理整个业务需求呢？就是通过这个PROPAGATION_REQUIRES_NEW 级别的事务传播控制就可以完成。发送红包的子事务不会直接影响到父事务的提交和回滚。 5）PROPAGATION_NOT_SUPPORTED ，这个也可以从字面得知，not supported ，不支持，当前级别的特点就是上下文中存在事务，则挂起事务，执行当前逻辑，结束后恢复上下文的事务。 这个级别有什么好处？可以帮助你将事务极可能的缩小。我们知道一个事务越大，它存在的风险也就越多。所以在处理事务的过程中，要保证尽可能的缩小范围。比如一段代码，是每次逻辑操作都必须调用的，比如循环1000次的某个非核心业务逻辑操作。这样的代码如果包在事务中，势必造成事务太大，导致出现一些难以考虑周全的异常情况。所以这个事务这个级别的传播级别就派上用场了。用当前级别的事务模板抱起来就可以了。 6）PROPAGATION_NEVER ，该事务更严格，上面一个事务传播级别只是不支持而已，有事务就挂起，而PROPAGATION_NEVER传播级别要求上下文中不能存在事务，一旦有事务，就抛出runtime异常，强制停止执行！这个级别上辈子跟事务有仇。 7）PROPAGATION_NESTED ，字面也可知道，nested，嵌套级别事务。该传播级别特征是，如果上下文中存在事务，则嵌套事务执行，如果不存在事务，则新建事务。 隔离级别1、Serializable ：最严格的级别，事务串行执行，资源消耗最大； 2、REPEATABLE READ ：保证了一个事务不会修改已经由另一个事务读取但未提交（回滚）的数据。避免了“脏读取”和“不可重复读取”的情况，但是带来了更多的性能损失。 3、READ COMMITTED :大多数主流数据库的默认事务等级，保证了一个事务不会读到另一个并行事务已修改但未提交的数据，避免了“脏读取”。该级别适用于大多数系统。 4、Read Uncommitted ：保证了读取过程中不会读取到非法数据。 上面的解释其实每个定义都有一些拗口，其中涉及到几个术语：脏读、不可重复读、幻读。这里解释一下： 脏读 :所谓的脏读，其实就是读到了别的事务回滚前的脏数据。比如事务B执行过程中修改了数据X，在未提交前，事务A读取了X，而事务B却回滚了，这样事务A就形成了脏读。 不可重复读 ：不可重复读字面含义已经很明了了，比如事务A首先读取了一条数据，然后执行逻辑的时候，事务B将这条数据改变了，然后事务A再次读取的时候，发现数据不匹配了，就是所谓的不可重复读了。 幻读 ：小的时候数手指，第一次数十10个，第二次数是11个，怎么回事？产生幻觉了？幻读也是这样子，事务A首先根据条件索引得到10条数据，然后事务B改变了数据库一条数据，导致也符合事务A当时的搜索条件，这样事务A再次搜索发现有11条数据了，就产生了幻读。 一个对照关系表： Dirty reads non-repeatable reads phantom readsSerializable 不会 不会 不会REPEATABLE READ 不会 不会 会READ COMMITTED 不会 会 会Read Uncommitted 会 会 会 所以最安全的，是Serializable，但是伴随而来也是高昂的性能开销。另外，事务常用的两个属性：readonly和timeout一个是设置事务为只读以提升性能。另一个是设置事务的超时时间，一般用于防止大事务的发生。还是那句话，事务要尽可能的小！ 注意事项在需要事务管理的地方加@Transactional 注解。@Transactional 注解可以被应用于接口定义和接口方法、类定义和类的 public 方法上。@Transactional 注解只能应用到 public 可见度的方法上。 如果你在 protected、private 或者 package-visible 的方法上使用 @Transactional 注解，它也不会报错， 但是这个被注解的方法将不会展示已配置的事务设置。注意仅仅 @Transactional 注解的出现不足于开启事务行为，它仅仅 是一种元数据。必须在配置文件中使用配置元素，才真正开启了事务行为。通过 元素的 “proxy-target-class” 属性值来控制是基于接口的还是基于类的代理被创建。如果 “proxy-target-class” 属值被设置为 “true”，那么基于类的代理将起作用（这时需要CGLIB库cglib.jar在CLASSPATH中）。如果 “proxy-target-class” 属值被设置为 “false” 或者这个属性被省略，那么标准的JDK基于接口的代理将起作用。Spring团队建议在具体的类（或类的方法）上使用 @Transactional 注解，而不要使用在类所要实现的任何接口上。在接口上使用 @Transactional 注解，只能当你设置了基于接口的代理时它才生效。因为注解是 不能继承 的，这就意味着如果正在使用基于类的代理时，那么事务的设置将不能被基于类的代理所识别，而且对象也将不会被事务代理所包装。@Transactional 的事务开启 ，或者是基于接口的 或者是基于类的代理被创建。所以在同一个类中一个方法调用另一个方法有事务的方法，事务是不会起作用的。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MyBatis使用]]></title>
      <url>%2F2016%2F12%2F02%2Fmybatis-cache%2F</url>
      <content type="text"><![CDATA[MyBatis缓存正如大多数持久层框架一样，MyBatis 同样提供了一级缓存和二级缓存的支持； 一级缓存基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当 Session flush 或 close 之后，该Session中的所有 Cache 就将清空。二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache、Hazelcast等。对于缓存数据更新机制，当某一个作用域(一级缓存Session/二级缓存Namespaces)的进行了 C/U/D 操作后，默认该作用域下所有 select 中的缓存将被clear。MyBatis 的缓存采用了delegate机制 及 装饰器模式设计，当put、get、remove时，其中会经过多层 delegate cache 处理，其Cache类别有：BaseCache(基础缓存)、EvictionCache(排除算法缓存) 、DecoratorCache(装饰器缓存)： BaseCache ：为缓存数据最终存储的处理类，默认为 PerpetualCache，基于Map存储；可自定义存储处理，如基于EhCache、Memcached等； EvictionCache ：当缓存数量达到一定大小后，将通过算法对缓存数据进行清除。默认采用 Lru 算法(LruCache)，提供有 fifo 算法(FifoCache)等； DecoratorCache：缓存put/get处理前后的装饰器，如使用 LoggingCache 输出缓存命中日志信息、使用 SerializedCache 对 Cache的数据 put或get 进行序列化及反序列化处理、当设置flushInterval(默认1/h)后，则使用 ScheduledCache 对缓存数据进行定时刷新等。 一般缓存框架的数据结构基本上都是 Key-Value 方式存储，MyBatis 对于其 Key 的生成采取规则为：[hashcode : checksum : mappedStementId : offset : limit : executeSql : queryParams]。对于并发 Read/Write 时缓存数据的同步问题，MyBatis 默认基于 JDK/concurrent中的ReadWriteLock，使用 ReentrantReadWriteLock 的实现，从而通过 Lock 机制防止在并发 Write Cache 过程中线程安全问题。 MyBatis延迟加载MyBatis打印出SQL 在方法上添加MethodLog注解即可，如下图所示。 properties文件配置 将ibatis log4j运行级别调到DEBUG可以在控制台打印出ibatis运行的sql语句,方便调试: 12345678910111213141516171819202122232425### 设置Logger输出级别和输出目的地 ###log4j.rootLogger=debug,stdout,logfile### 把日志信息输出到控制台 ###log4j.appender.stdout=org.apache.log4j.ConsoleAppender#log4j.appender.stdout.Target=System.errlog4j.appender.stdout.layout=org.apache.log4j.SimpleLayout### 把日志信息输出到文件：jbit.log ###log4j.appender.logfile=org.apache.log4j.FileAppenderlog4j.appender.logfile.File=jbit.loglog4j.appender.logfile.layout=org.apache.log4j.PatternLayoutlog4j.appender.logfile.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %F %p %m%n###显示SQL语句部分log4j.logger.com.ibatis=DEBUG log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG log4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUG log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG log4j.logger.java.sql.Connection=DEBUG log4j.logger.java.sql.Statement=DEBUG log4j.logger.java.sql.PreparedStatement=DEBUG xml文件配置 1234567891011121314151617181920212223&lt;!-- 调试sql日志 --&gt;&lt;Logger name="com.ibatis" level="info"&gt; &lt;AppenderRef ref="Console" /&gt;&lt;/Logger&gt;&lt;Logger name="com.ibatis.common.jdbc.SimpleDataSource" level="info"&gt; &lt;AppenderRef ref="Console" /&gt;&lt;/Logger&gt;&lt;Logger name="org.apache.ibatis.jdbc.ScriptRunner" level="info"&gt; &lt;AppenderRef ref="Console" /&gt;&lt;/Logger&gt;&lt;Logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="info"&gt; &lt;AppenderRef ref="Console" /&gt;&lt;/Logger&gt;&lt;Logger name="java.sql.Connection" level="DEBUG"&gt; &lt;AppenderRef ref="Console" /&gt;&lt;/Logger&gt;&lt;Logger name="java.sql.Statement" level="DEBUG"&gt; &lt;AppenderRef ref="Console" /&gt;&lt;/Logger&gt;&lt;Logger name="java.sql.PreparedStatement" level="DEBUG"&gt; &lt;AppenderRef ref="Console" /&gt;&lt;/Logger&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Spring视图解析器]]></title>
      <url>%2F2016%2F12%2F02%2Fspring-viewresolver%2F</url>
      <content type="text"><![CDATA[InternalResourceViewResolver在Sprinng MVC中，Handler执行完成后，向DispatcherServlet返回一个ModelAndView对象。此时就需要调用视图解析器(View Resolver)来渲染视图了。 1234&lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; &lt;property name="prefix" value="/WEB-INF/views/"/&gt; &lt;property name="suffix" value=".jsp"/&gt;&lt;/bean&gt; 它是URLBasedViewResolver的子类，所以URLBasedViewResolver支持的特性它都支持。单从字面意思来看，可以把InternalResourceViewResolver解释为内部资源视图解析器，这就是InternalResourceViewResolver的一个特性。InternalResourceViewResolver会把返回的视图名称都解析为InternalResourceView对象，InternalResourceView会把Controller处理器方法返回的模型属性都存放到对应的request属性中，然后通过RequestDispatcher在服务器端把请求forword重定向到目标URL。比如在InternalResourceViewResolver中定义了prefix=/WEB-INF/，suffix=.jsp，然后请求的Controller处理器方法返回的视图名称为test，那么这个时候InternalResourceViewResolver就会把test解析为一个InternalResourceView对象，先把返回的模型属性都存放到对应的HttpServletRequest属性中，然后利用RequestDispatcher在服务器端把请求forword到/WEB-INF/test.jsp。注意InternalResourceViewResolver只能渲染jsp页面，如果需要渲染html看这里。 ThymeleafViewResolver在Java世界的MVC框架里，使用的视图技术不少，最基本的是JSP，还有知名的FreeMarker和Velocity等模板引擎。Thymeleaf也是一款优秀的模板引擎，它在HTML5/XHTML的视图层表现的很好，也能在离线情况下处理任何XML文件。它是完全可以替代JSP+JSTL(JSP Standard Tag Library，JSP标准标签库)的。 Thymeleaf官方的Q&amp;A： Q: 和FreeMarker,Velocity相比，Thymeleaf表现得怎样呢？ A：FreeMarker和Velocity都是软件领域杰出的作品，但它们在解决模板问题上的处理哲学和Thymeleaf不一样。Thymeleaf强调的是自然模板，也就是允许模板作为产品原型使用(笔者注:因为其后缀名就是.html，可以直接在浏览器打开)，而FreeMarker和Velocity不行。并且Thymeleaf的语法更简洁、更和目前Web开发的趋势相一致。其次，从架构的角度看，FreeMarker和Velocity更像个文本处理器，所以它们能够处理很多类型的内容，而Thymeleaf是基于XML的，只能处理XML格式的数据。因此这样看，FreeMarker和Velocity更通用些，但恰恰如此，Thymeleaf更能利用XML的特性，尤其是在Web应用中。 12345&lt;!-- thymeleaf thymeleafViewResolver--&gt;&lt;bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver"&gt; &lt;property name="templateEngine" ref="templateEngine" /&gt; &lt;property name="characterEncoding" value="UTF-8" /&gt;&lt;/bean&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Fedora上MySQL安装]]></title>
      <url>%2F2016%2F12%2F02%2Ffedora-mysql-install%2F</url>
      <content type="text"><![CDATA[12## Fedora 24 ##dnf install https://dev.mysql.com/get/mysql57-community-release-fc24-8.noarch.rpm 安装MySQL。 1dnf install -y mysql-community-server 启动MySQL。 123systemctl start mysqld.service ## use restart after updatesystemctl enable mysqld.service 登陆时会提示如下错误：ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: YES)获取随机密码。 1grep 'A temporary password is generated for root@localhost' /var/log/mysqld.log |tail -1 重新设置MySQL密码,密码要求包含大小写和数字以及特殊字符，不符合安全策略的(Your password does not satisfy the current policy requirements)密码无法设置成功。 1SET PASSWORD FOR 'root'@'localhost' = PASSWORD('$jxqMySQL123456'); 數據庫操作創建數據庫。 1234#列出數據庫show databases;#創建數據庫create database dolphin;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[面试总结]]></title>
      <url>%2F2016%2F12%2F02%2Finterview-summerize%2F</url>
      <content type="text"><![CDATA[面试的过程也是气质是否和公司搭调的过程，每个公司都有自己的管理特色。找到价值观相对契合的企业非常重要。这里是面试时面试官问过的问题。 Java中线程安全的类 ArrayList线程不安全，Vector线程安全； HashMap线程不安全，HashTable线程安全,ConcurrentHashMap线程安全； StringBuilder线程不安全，StringBuffer线程安全。 String、StringBuilder、StringBuffer区别简要的说， String 类型和 StringBuffer类型的主要性能区别其实在于 String 是不可变的对象, 因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用 String ，因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后， JVM 的 GC 就会进行垃圾回收，执行垃圾回收时是会block住程序的，影响性能。而如果是使用 StringBuffer 类则结果就不一样了，每次结果都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，再改变对象引用。所以在一般情况下我们推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。而在某些特别情况下， String 对象的字符串拼接其实是被 JVM 解释成了 StringBuffer 对象的拼接，所以这些时候 String 对象的速度并不会比 StringBuffer 对象慢，而特别是以下的字符串对象生成中， String 效率是远要比 StringBuffer 快的： 12String S1 = “This is only a” + “ simple” + “ test”;StringBuffer Sb = new StringBuilder(“This is only a”).append(“ simple”).append(“ test”); 你会很惊讶的发现，生成 String S1 对象的速度简直太快了，而这个时候 StringBuffer 居然速度上根本一点都不占优势。其实这是 JVM 的一个把戏，在 JVM 里: 1String S1 = “This is only a” + “ simple” + “test”; 其实就是： 1String S1 = “This is only a simple test”; 所以当然不需要太多的时间了。但大家这里要注意的是，如果你的字串是来自另外的 String 对象的话，速度就没那么快了，譬如： 1234String S2 = “This is only a”;String S3 = “ simple”;String S4 = “ test”;String S1 = S2 +S3 + S4; 这时候 JVM 会规规矩矩的按照原来的方式去做 在大部分情况下 StringBuffer 优于 StringStringBufferJava.lang.StringBuffer线程安全的可变字符序列。一个类似于 String 的字符串缓冲区，但不能修改。虽然在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。可将字符串缓冲区安全地用于多个线程。可以在必要时对这些方法进行同步，因此任意特定实例上的所有操作就好像是以串行顺序发生的，该顺序与所涉及的每个线程进行的方法调用顺序一致。StringBuffer 上的主要操作是 append 和 insert 方法，可重载这些方法，以接受任意类型的数据。每个方法都能有效地将给定的数据转换成字符串，然后将该字符串的字符追加或插入到字符串缓冲区中。append 方法始终将这些字符添加到缓冲区的末端；而 insert 方法则在指定的点添加字符。例如，如果 z 引用一个当前内容是“start”的字符串缓冲区对象，则此方法调用 z.append(“le”) 会使字符串缓冲区包含“startle”，而 z.insert(4, “le”) 将更改字符串缓冲区，使之包含“starlet”。在大部分情况下 StringBuilder 优于 StringBufferjava.lang.StringBuildejava.lang.StringBuilder一个可变的字符序列是5.0新增的。此类提供一个与 StringBuffer 兼容的 API，但不保证同步。该类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快。两者的方法基本相同。 使用Spring框架的原因 非侵入式：支持基于POJO的编程模式，不强制性的要求实现Spring框架中的接口或继承Spring框架中的类。 IoC容器：IoC容器帮助应用程序管理对象以及对象之间的依赖关系，对象之间的依赖关系如果发生了改变只需要修改配置文件而不是修改代码，因为代码的修改可能意味着项目的重新构建和完整的回归测试。有了IoC容器，程序员再也不需要自己编写工厂、单例，这一点特别符合Spring的精神”不要重复的发明轮子”。 AOP（面向切面编程）：将所有的横切关注功能封装到切面（aspect）中，通过配置的方式将横切关注功能动态添加到目标代码上，进一步实现了业务逻辑和系统服务之间的分离。另一方面，有了AOP程序员可以省去很多自己写代理类的工作。 MVC：Spring的MVC框架是非常优秀的，Spring MVC的配置相对于Struts 2来说较少，性能方面，Spring比Struts较快，开发效率Spring MVC确实比struts2高，Spring3 MVC更容易实现Restful URL。Struts更加很多新的技术点，比如拦截器、值栈及OGNL表达式，学习成本较高，springmvc 比较简单，很较少的时间都能上手。 事务管理：Spring以宽广的胸怀接纳多种持久层技术，并且为其提供了声明式的事务管理，在不需要任何一行代码的情况下就能够完成事务管理。 其他：选择Spring框架的原因还远不止于此，Spring为Java企业级开发提供了一站式选择，你可以在需要的时候使用它的部分和全部，更重要的是，你甚至可以在感觉不到Spring存在的情况下，在你的项目中使用Spring提供的各种优秀的功能。 大型网站在架构上应当考虑哪些问题 分层(Layer)：分层是处理任何复杂系统最常见的手段之一，将系统横向切分成若干个层面，每个层面只承担单一的职责，然后通过下层为上层提供的基础设施和服务以及上层对下层的调用来形成一个完整的复杂的系统。计算机网络的开放系统互联参考模型（OSI[Open Systems Interconnection]/RM）和Internet的TCP/IP模型都是分层结构，大型网站的软件系统也可以使用分层的理念将其分为持久层（提供数据存储和访问服务）、业务层（处理业务逻辑，系统中最核心的部分）和表示层（系统交互、视图展示）。需要指出的是：（1）分层是逻辑上的划分，在物理上可以位于同一设备上也可以在不同的设备上部署不同的功能模块，这样可以使用更多的计算资源来应对用户的并发访问；（2）层与层之间应当有清晰的边界，这样分层才有意义，才更利于软件的开发和维护。 分割(Split)：分割是对软件的纵向切分。我们可以将大型网站的不同功能和服务分割开，形成高内聚低耦合的功能模块（单元）。在设计初期可以做一个粗粒度的分割，将网站分割为若干个功能模块，后期还可以进一步对每个模块进行细粒度的分割，这样一方面有助于软件的开发和维护，另一方面有助于分布式的部署，提供网站的并发处理能力和功能的扩展。 分布式(Distribution)：除了上面提到的内容，网站的静态资源（JavaScript、CSS、图片等）也可以采用独立分布式部署并采用独立的域名，这样可以减轻应用服务器的负载压力，也使得浏览器对资源的加载更快。数据的存取也应该是分布式的，传统的商业级关系型数据库产品基本上都支持分布式部署，而新生的NoSQL产品几乎都是分布式的。当然，网站后台的业务处理也要使用分布式技术，例如查询索引的构建、数据分析等，这些业务计算规模庞大，可以使用Hadoop以及MapReduce分布式计算框架来处理。 集群(Cluster)：集群使得有更多的服务器提供相同的服务，可以更好的提供对并发的支持。 缓存(Cache)：所谓缓存就是用空间换取时间的技术，将数据尽可能放在距离计算最近的位置。使用缓存是网站优化的第一定律。我们通常说的CDN、反向代理、热点数据都是对缓存技术的使用。 异步(Async)：异步是实现软件实体之间解耦合的又一重要手段。异步架构是典型的生产者消费者模式，二者之间没有直接的调用关系，只要保持数据结构不变，彼此功能实现可以随意变化而不互相影响，这对网站的扩展非常有利。使用异步处理还可以提高系统可用性，加快网站的响应速度（用Ajax加载数据就是一种异步技术），同时还可以起到削峰作用（应对瞬时高并发）。能推迟处理的都要推迟处理”是网站优化的第二定律，而异步是践行网站优化第二定律的重要手段。 冗余(Redundancy)：各种服务器都要提供相应的冗余服务器以便在某台或某些服务器宕机时还能保证网站可以正常工作，同时也提供了灾难恢复的可能性。冗余是网站高可用性的重要保证。 你使用过的应用服务器优化技术有哪些 分布式缓存：缓存的本质就是内存中的哈希表，如果设计一个优质的哈希函数，那么理论上哈希表读写的渐近时间复杂度为O(1)。缓存主要用来存放那些读写比很高、变化很少的数据，这样应用程序读取数据时先到缓存中读取，如果没有或者数据已经失效再去访问数据库或文件系统，并根据拟定的规则将数据写入缓存。对网站数据的访问也符合二八定律（Pareto分布，幂律分布），即80%的访问都集中在20%的数据上，如果能够将这20%的数据缓存起来，那么系统的性能将得到显著的改善。当然，使用缓存需要解决以下几个问题： 1.频繁修改的数据；2.数据不一致与脏读；3.缓存雪崩（可以采用分布式缓存服务器集群加以解决，memcached是广泛采用的解决方案）；4.缓存预热；5.缓存穿透（恶意持续请求不存在的数据）。 异步操作：可以使用消息队列将调用异步化，通过异步处理将短时间高并发产生的事件消息存储在消息队列中，从而起到削峰作用。电商网站在进行促销活动时，可以将用户的订单请求存入消息队列，这样可以抵御大量的并发订单请求对系统和数据库的冲击。目前，绝大多数的电商网站即便不进行促销活动，订单系统都采用了消息队列来处理。 使用集群。 代码优化： 1.多线程：基于Java的Web开发基本上都通过多线程的方式响应用户的并发请求，使用多线程技术在编程上要解决线程安全问题，主要可以考虑以下几个方面：A. 将对象设计为无状态对象（这和面向对象的编程观点是矛盾的，在面向对象的世界中被视为不良设计），这样就不会存在并发访问时对象状态不一致的问题。B. 在方法内部创建对象，这样对象由进入方法的线程创建，不会出现多个线程访问同一对象的问题。使用ThreadLocal将对象与线程绑定也是很好的做法，这一点在前面已经探讨过了。C. 对资源进行并发访问时应当使用合理的锁机制。2.非阻塞I/O： 使用单线程和非阻塞I/O是目前公认的比多线程的方式更能充分发挥服务器性能的应用模式，基于Node.js构建的服务器就采用了这样的方式。Java在JDK 1.4中就引入了NIO（Non-blocking I/O）,在Servlet 3规范中又引入了异步Servlet的概念，这些都为在服务器端采用非阻塞I/O提供了必要的基础。3.资源复用：资源复用主要有两种方式，一是单例，二是对象池，我们使用的数据库连接池、线程池都是对象池化技术，这是典型的用空间换取时间的策略，另一方面也实现对资源的复用，从而避免了不必要的创建和释放资源所带来的开销。 你用过的网站前端优化的技术有哪些 浏览器访问优化： 减少HTTP请求数量：合并CSS、合并JavaScript、合并图片（CSS Sprite） 使用浏览器缓存：通过设置HTTP响应头中的Cache-Control和Expires属性，将CSS、JavaScript、图片等在浏览器中缓存，当这些静态资源需要更新时，可以更新HTML文件中的引用来让浏览器重新请求新的资源 启用压缩 CSS前置，JavaScript后置 减少Cookie传输 CDN加速：CDN（Content Distribute Network）的本质仍然是缓存，将数据缓存在离用户最近的地方，CDN通常部署在网络运营商的机房，不仅可以提升响应速度，还可以减少应用服务器的压力。当然，CDN缓存的通常都是静态资源。 反向代理：反向代理相当于应用服务器的一个门面，可以保护网站的安全性，也可以实现负载均衡的功能，当然最重要的是它缓存了用户访问的热点资源，可以直接从反向代理将某些内容返回给用户浏览器。 什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？ XSS（Cross Site Script，跨站脚本攻击）是向网页中注入恶意脚本在用户浏览网页时在用户浏览器中执行恶意脚本的攻击方式。跨站脚本攻击分有两种形式：反射型攻击（诱使用户点击一个嵌入恶意脚本的链接以达到攻击的目标，目前有很多攻击者利用论坛、微博发布含有恶意脚本的URL就属于这种方式）和持久型攻击（将恶意脚本提交到被攻击网站的数据库中，用户浏览网页时，恶意脚本从数据库中被加载到页面执行，QQ邮箱的早期版本就曾经被利用作为持久型跨站脚本攻击的平台）。XSS虽然不是什么新鲜玩意，但是攻击的手法却不断翻新，防范XSS主要有两方面：消毒（对危险字符进行转义）和HttpOnly（防范XSS攻击者窃取Cookie数据）。 SQL注入攻击是注入攻击最常见的形式（此外还有OS注入攻击（Struts 2的高危漏洞就是通过OGNL实施OS注入攻击导致的）），当服务器使用请求参数构造SQL语句时，恶意的SQL被嵌入到SQL中交给数据库执行。SQL注入攻击需要攻击者对数据库结构有所了解才能进行，攻击者想要获得表结构有多种方式：（1）如果使用开源系统搭建网站，数据库结构也是公开的（目前有很多现成的系统可以直接搭建论坛，电商网站，虽然方便快捷但是风险是必须要认真评估的）；（2）错误回显（如果将服务器的错误信息直接显示在页面上，攻击者可以通过非法参数引发页面错误从而通过错误信息了解数据库结构，Web应用应当设置友好的错误页，一方面符合最小惊讶原则，一方面屏蔽掉可能给系统带来危险的错误回显信息）；（3）盲注。防范SQL注入攻击也可以采用消毒的方式，通过正则表达式对请求参数进行验证，此外，参数绑定也是很好的手段，这样恶意的SQL会被当做SQL的参数而不是命令被执行，JDBC中的PreparedStatement就是支持参数绑定的语句对象，从性能和安全性上都明显优于Statement。 CSRF攻击（Cross Site Request Forgery，跨站请求伪造）是攻击者通过跨站请求，以合法的用户身份进行非法操作（如转账或发帖等）。CSRF的原理是利用浏览器的Cookie或服务器的Session，盗取用户身份，其原理如下图所示。防范CSRF的主要手段是识别请求者的身份，主要有以下几种方式：（1）在表单中添加令牌（token）；（2）验证码；（3）检查请求头中的Referer（前面提到防图片盗链接也是用的这种方式）。令牌和验证都具有一次消费性的特征，因此在原理上一致的，但是验证码是一种糟糕的用户体验，不是必要的情况下不要轻易使用验证码，目前很多网站的做法是如果在短时间内多次提交一个表单未获得成功后才要求提供验证码，这样会获得较好的用户体验。 什么是领域模型(domain model)？贫血模型(anaemic domain model)和充血模型(rich domain model)有什么区别？领域模型是领域内的概念类或现实世界中对象的可视化表示，又称为概念模型或分析对象模型，它专注于分析问题领域本身，发掘重要的业务领域概念，并建立业务领域概念之间的关系。贫血模型是指使用的领域对象中只有setter和getter方法（POJO），所有的业务逻辑都不包含在领域对象中而是放在业务逻辑层。有人将我们这里说的贫血模型进一步划分成失血模型（领域对象完全没有业务逻辑）和贫血模型（领域对象有少量的业务逻辑），我们这里就不对此加以区分了。充血模型将大多数业务逻辑和持久化放在领域对象中，业务逻辑（业务门面）只是完成对业务逻辑的封装、事务和权限等的处理。下面两张图分别展示了贫血模型和充血模型的分层架构。更加细粒度的有失血模型，贫血模型，充血模型，胀血模型。贫血模型就是domain ojbect包含了不依赖于持久化的领域逻辑，而那些依赖持久化的领域逻辑被分离到Service层。失血模型简单来说，就是domain object只有属性的getter/setter方法的纯数据类，所有的业务逻辑完全由business object来完成(又称Transaction Script)，这种模型下的domain object被Martin Fowler称之为“贫血的domain object”。充血模型和第二种模型差不多，所不同的就是如何划分业务逻辑，即认为，绝大多业务逻辑都应该被放在domain object里面(包括持久化逻辑)，而Service层应该是很薄的一层，仅仅封装事务和少量逻辑，不和DAO层打交道。 描述一下JVM加载class文件的原理机制类加载的过程包括了加载、验证、准备、解析、初始化五个阶段。JVM中类的装载是由类加载器（ClassLoader）和它的子类来实现的，Java中的类加载器是一个重要的Java运行时系统组件，它负责在运行时查找和装入类文件中的类。 由于Java的跨平台性，经过编译的Java源程序并不是一个可执行程序，而是一个或多个类文件。当Java程序需要使用某个类时，JVM会确保这个类已经被加载、连接（验证、准备和解析）和初始化。类的加载是指把类的.class文件中的数据读入到内存中，通常是创建一个字节数组读入.class文件，然后产生与所加载类对应的Class对象。加载完成后，Class对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。最后JVM对类进行初始化，包括：A. 如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；B. 如果类中存在初始化语句，就依次执行这些初始化语句。 1编译 -&gt; 加载 -&gt; 链接（验证+准备+解析）-&gt;初始化（使用前的准备）-&gt;使用-&gt; 卸载 类的加载是由类加载器完成的，类加载器包括：根加载器（BootStrap）、扩展加载器（Extension）、系统加载器（System）和用户自定义类加载器（java.lang.ClassLoader的子类）。从Java 2（JDK 1.2）开始，类加载过程采取了父亲委托机制(PDM[Parerent Delegate Mechanism])。PDM更好的保证了Java平台的安全性，在该机制中，JVM自带的Bootstrap是根加载器，其他的加载器都有且仅有一个父类加载器。类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。JVM不会向Java程序提供对Bootstrap的引用。下面是关于几个类加载器的说明： Bootstrap：一般用本地代码实现，负责加载JVM基础核心类库（rt.jar）； Extension：从java.ext.dirs系统属性所指定的目录中加载类库，它的父加载器是Bootstrap； System：又叫应用类加载器，其父类是Extension。它是应用最广泛的类加载器。它从环境变量classpath或者系统属性java.class.path所指定的目录中记载类，是用户自定义加载器的默认父加载器。 什么条件下会触发垃圾回收触发Full GC除直接调用System.gc外，触发Full GC执行的情况有如下四种。 旧生代空间不足 旧生代空间只有在新生代对象转入及创建为大对象、大数组时才会出现不足的现象，当执行Full GC后空间仍然不足，则抛出如下错误：java.lang.OutOfMemoryError: Java heap space，为避免以上两种状况引起的Full GC，调优时应尽量做到让对象在Minor GC阶段被回收、让对象在新生代多存活一段时间及不要创建过大的对象及数组。 Permanet Generation空间满 Permanet Generation中存放的为一些class的信息等，当系统中要加载的类、反射的类和调用的方法较多时，Permanet Generation可能会被占满，在未配置为采用CMS GC的情况下会执行Full GC。如果经过Full GC仍然回收不了，那么JVM会抛出如下错误信息：java.lang.OutOfMemoryError: PermGen space。为避免Perm Gen占满造成Full GC现象，可采用的方法为增大Perm Gen空间或转为使用CMS GC。 CMS GC时出现promotion failed和concurrent mode failure 对于采用CMS进行旧生代GC的程序而言，尤其要注意GC日志中是否有promotion failed和concurrent mode failure两种状况，当这两种状况出现时可能会触发Full GC。 promotion failed是在进行Minor GC时，survivor space放不下、对象只能放入旧生代，而此时旧生代也放不下造成的；concurrent mode failure是在执行CMS GC的过程中同时有对象要放入旧生代，而此时旧生代空间不足造成的。CMS(Concurrent Mark-Sweep)是以牺牲吞吐量为代价来获得最短回收停顿时间的垃圾回收器。对于要求服务器响应速度的应用上，这种垃圾回收器非常适合。 应对措施为：增大survivor space、旧生代空间或调低触发并发GC的比率，但在JDK 5.0+、6.0+的版本中有可能会由于JDK的bug29导致CMS在remark完毕后很久才触发sweeping动作。对于这种状况，可通过设置-XX: CMSMaxAbortablePrecleanTime=5（单位为ms）来避免。 统计得到的Minor GC晋升到旧生代的平均大小大于旧生代的剩余空间 这是一个较为复杂的触发情况，Hotspot为了避免由于新生代对象晋升到旧生代导致旧生代空间不足的现象，在进行Minor GC时，做了一个判断，如果之前统计所得到的Minor GC晋升到旧生代的平均大小大于旧生代的剩余空间，那么就直接触发Full GC。 例如程序第一次触发Minor GC后，有6MB的对象晋升到旧生代，那么当下一次Minor GC发生时，首先检查旧生代的剩余空间是否大于6MB，如果小于6MB，则执行Full GC。 当新生代采用PS GC时，方式稍有不同，PS GC是在Minor GC后也会检查，例如上面的例子中第一次Minor GC后，PS GC会检查此时旧生代的剩余空间是否大于6MB，如小于，则触发对旧生代的回收。 除了以上4种状况外，对于使用RMI来进行RPC或管理的Sun JDK应用而言，默认情况下会一小时执行一次Full GC。可通过在启动时通过- java -Dsun.rmi.dgc.client.gcInterval=3600000来设置Full GC执行的间隔时间或通过-XX:+ DisableExplicitGC来禁止RMI调用System.gc。 对象分配规则 1.对象优先分配在Eden区，如果Eden区没有足够的空间时，虚拟机执行一次Minor GC。 2.大对象直接进入老年代（大对象是指需要大量连续内存空间的对象）。这样做的目的是避免在Eden区和两个Survivor区之间发生大量的内存拷贝（新生代采用复制算法收集内存）。 3.长期存活的对象进入老年代。虚拟机为每个对象定义了一个年龄计数器，如果对象经过了1次Minor GC那么对象会进入Survivor区，之后每经过一次Minor GC那么对象的年龄加1，知道达到阀值对象进入老年区。 4.动态判断对象的年龄。如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代。 5.空间分配担保。每次进行Minor GC时，JVM会计算Survivor区移至老年区的对象的平均大小，如果这个值大于老年区的剩余值大小则进行一次Full GC，如果小于检查HandlePromotionFailure设置，如果true则只进行Monitor GC,如果false则进行Full GC。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2016年终总结与规划]]></title>
      <url>%2F2016%2F12%2F01%2F2016-summerize%2F</url>
      <content type="text"><![CDATA[转眼之间一年又过去了，不得不感叹时间过的飞起。时光如梭一点不假，年底了做一个自我总结，也算是对自己的一个交代。这一年改变了什么，什么没有变，想想又忍不住狠狠的装了一把。 技术层面Java 熟悉MySQL、Redis、HBase数据库(存储) 熟悉Spring下Web Socket\Web Service的开发，熟悉了Restful接口的开发 可以应付日常的Java开发任务，与同事合作可以应付较为复杂的开发任务（业务） 了解Apache Kafka，可以使用Ambari独立部署集群环境 可以搭建SSM(Spring\Spring MVC\Mybatis)框架 熟悉Java常见的开发工具(Eclipse\Maven\Intellij Idea\Gradle)的使用，并应用于日常开发中 进一步熟悉了GitHub、StackoverFlow网站和Git工具，开发必不可少的朋友 熟悉了Jira、Redmine等项目管理工具，并部署并应用于日常开发中 进一步熟悉持续集成思想，熟悉了Jenkins等持续集成工具，并应用于日常开发中 使用Hexo博客模板引擎搭建了自己的博客，编写开发与生活总结文章 使用LaTex编写了开发总结 熟悉了Wireshark和Tcpdump等网络包分析工具的使用 重新使用起了Linux操作系统 进一步熟悉TCP、HTTP协议、交通部T808协议 阅读了《代码大全》等编程相关书籍 学习了网页开发常见工具(Fiddler、FireBug)的使用，会根据原理进行分析 熟悉了前端的JavaScript、HTML、CSS知识 注重效率的培养，包括Intellij Idea的快捷键，JRebel等等工具的使用 Python 了解了Python的基本语法 尝试写了简单的Python代码 未来规划目前还是比较浮躁的，希望对Java底层有更加深入的了解(JVM)，不止于停留在表面，Java性能调优方面的经验、数据库性能调优经验，只有更深入的了解原理，看到错误时才可以一步一步分析原因，而不是简单的停留在猜测上。从现在开始静下心来，需要选择一个方向努力了。以热爱开源，热爱分享为指导思想，不断学习。乐于助人与寻求别人的帮助，别人没有义务帮助谁，俺有义务助人啊，软件构建里没有谁是全能型选手，取长补短即可。快乐工作，该装的A-C还是得装，一个也不能少，虽然换工作比较频繁，但是收获最大的还是认识一帮开心的朋友，工作也不是那么无趣，工作经验可以没有，换工作的经验必须得有啊。将来会多阅读人文类书籍，好多年一直抱着技术书籍在看，可见功利心还是蛮强的，好久没有阅读人文类书籍了，值得引起重视。不要原地踏步，不要重复，不要无聊。需要进步，需要创造，需要有趣。不断提高效率，想当初修改代码后不断重启项目，每次重启大概耗时1分钟，到后面完全在1秒内搞定，想想也有点小激动。希望以后在开发中由于不熟悉花1天去解决的事情，往后只需要1秒即可。来年的小计划如下： 阅读不少于5本人文类书籍 阅读《编译原理》、《算法导论》、《代码大全》 结识朋友 学习Java底层知识(原谅不能量化)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Spring MVC拦截规则]]></title>
      <url>%2F2016%2F12%2F01%2Fspringmvc-filter%2F</url>
      <content type="text"><![CDATA[在Spring MVC中，需要配置Mapping规则。 拦截.do、.htm这是最传统的方式，最简单也最实用。不会导致静态文件（jpg,js,css）被拦截。 1234&lt;servlet-mapping&gt; &lt;servlet-name&gt;dolphin&lt;/servlet-name&gt; &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 拦截/1234&lt;servlet-mapping&gt; &lt;servlet-name&gt;dolphin&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 可以实现现在很流行的REST风格。很多互联网类型的应用很喜欢这种风格的URL。 弊端：会导致静态文件（jpg,js,css）被拦截后不能正常显示。想实现REST风格，事情就是麻烦一些。后面有解决办法还算简单。 拦截/*1234&lt;servlet-mapping&gt; &lt;servlet-name&gt;dolphin&lt;/servlet-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 这是一个错误的方式，请求可以通过DispatcherServlet走到Action中，但是返回的内容，如返回的jsp还会再次被拦截，这样导致404错误，即访问不到jsp，也无法访问到html静态页面。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[spring-step-by-step（三）-权限管理]]></title>
      <url>%2F2016%2F11%2F29%2Fspring-step-by-step-privillege%2F</url>
      <content type="text"><![CDATA[配置过滤器为了在项目中使用Spring Security控制权限，在项目的web.xml文件中，添加过滤器，就可以控制对这个项目的每个请求了。 12345678&lt;filter&gt; &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt; Spring Security数据库表Spring Security默认情况下需要两张表，用户表和权限表。以下是mysql中的建表语句： 一个简单的HelloWorld]]></content>
>>>>>>> 5ebd748e66ab1e6dae8df6cd825a3f977c0cd1b0
    </entry>
    
    <entry>
      <title><![CDATA[Windows下用Nexus搭建Maven私服]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/08/maven-private-service/</url>
      <content type="html"><![CDATA[<h4 id="Nexus简介"><a href="#Nexus简介" class="headerlink" title="Nexus简介"></a>Nexus简介</h4><p>使用Maven的中央仓库存在如下问题：</p>
<ul>
<li>Maven自己的中央库访问速度非常慢，外加GFW，基本没法用。</li>
<li>有些jar包由于版权原因，maven中央仓库没有，比如oracle JDBC驱动。另外也会有一些项目中用到的比较老的开源jar包， 中央仓库也没有。这种情况我们需要把jar包手动上传到私服。</li>
<li>公司自己开发的jar包并不开源，不能上传到maven中央仓库，只能部署到私服上面。</li>
</ul>
<a id="more"></a>
<p>Nexus 是Maven仓库管理器，如果你使用Maven，你可以从Maven中央仓库下载所需要的构件（artifact），但这通常不是一个好的做法，你应该在本地架设一个Maven仓库服务器，在代理远程仓库的同时维护本地仓库，以节省带宽和时间，Nexus就可以满足这样的需要。此外，他还提供了强大的仓库管理功能，构件搜索功能，它基于REST，友好的UI是一个extjs的REST客户端，它占用较少的内存，基于简单文件系统而非数据库。这些优点使其日趋成为最流行的Maven仓库管理器。下载Nexus（nexus-3.0.1-01-win64.exe），安装完毕后访问<a href="http://192.168.1.102:8081/" target="_blank" rel="external">本地Maven私服主页</a>。</p>
<h4 id="配置单个项目"><a href="#配置单个项目" class="headerlink" title="配置单个项目"></a>配置单个项目</h4><p>安装完毕后需要登录，默认的用户名密码是：<code>admin/admin123</code>。登录之后才会显示设置图标，才能添加repositories。将<a href="http://192.168.1.102:8081/repository/maven-public/" target="_blank" rel="external">本地Maven私服路径</a>配置到项目的pom.xml中即可。如下代码片段所示。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>my-nexus-repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.102:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>my-nexus-repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.102:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果在本地私服没有的jar包，会自动从中心服务器下载。至此，最简单的Maven私服搭建完毕。</p>
<h4 id="配置全局应用"><a href="#配置全局应用" class="headerlink" title="配置全局应用"></a>配置全局应用</h4><p>在Maven的settings.xml中配置profile元素，这样就能让本机所有的Maven项目都使用自己的Maven私服。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">		  <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">		  <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Web开发--log4j]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/08/log4j/</url>
      <content type="html"><![CDATA[<h2 id="isDebugEnabled"><a href="#isDebugEnabled" class="headerlink" title="isDebugEnabled"></a>isDebugEnabled</h2><p>在输出日志时，判断输出级别：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(logger.isDebugEnabled()) &#123;</div><div class="line">    logger.debug(<span class="string">"通用处理，信息为："</span> + JSON.toJSONString(vehicleLocationData));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当输出级别是debug，即需要进行日志信息输出时，加不加这句if判断，在效率上几乎没有差别；当输出级别高于debug，即不需要进行日志信息输出时：</p>
<p>①假如debug方法中的参数比较简单时（比如直接就是写好的字符串），加不加这句if判断，在效率上也几乎没有什么差别；</p>
<p>②假如debug方法中的参数比较复杂时（比如还要使用别的函数进行计算、或者还要进行字符串的拼接等等,如上代码片段所示，输出的内容需要序列化），在前面就加上这句if判断，会让效率提高（否则，开始大动干戈做了很多事情（比如字符串的拼接，序列化），后来才发现不需要进行输出日志信息），白白浪费了CPU资源，影响程序的运行效率。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Websocket发送消息长度设置]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/08/websocket-sending-config/</url>
      <content type="html"><![CDATA[<p>项目中用到WebSocket技术，发送文本字节比较多时出现异常，立即断开了连接。项目在Tomcat上运行，Tomcat默认的文本大小为8192。</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">If the application does not define a MessageHandler.Partial for incoming text messages, any incoming text messages must be buffered so the entire message can be delivered in a single call to the registered MessageHandler.Whole for text messages. The default buffer size for text messages is 8192 bytes. This may be changed for a web application by setting the servlet context initialization parameter org.apache.tomcat.websocket.textBufferSize to the desired value in bytes.</div></pre></td></tr></table></figure>
<p>在项目Tomcat的web.xml(<code>D:\Source\zwnewplatform\javasoftware\runtime\apache-tomcat-8.0.36\apache-tomcat-8.0.36\conf\web.xml</code>)中添加如下配置（注意单位为byte）。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>org.apache.tomcat.websocket.textBufferSize<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>327680<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>org.apache.tomcat.websocket.binaryBufferSize<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>327680<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果是Eclipse，则直接在Eclipse中配置，如下图所示：</p>

]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC-DispatcherServlet处理请求过程]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/08/springmvc-dispatcherservlet/</url>
      <content type="html"><![CDATA[<p>Spring MVC基于模型-视图-控制器(Model-View-Controller,MVC)模式，它能够帮助我们建立灵活和松耦合的Web程序.Spring MVC中用户请求如下图所示：</p>
<a id="more"></a>

<h6 id="请求发出-HTTP-Resquest"><a href="#请求发出-HTTP-Resquest" class="headerlink" title="请求发出(HTTP Resquest)"></a>请求发出(HTTP Resquest)</h6><p>一个请求携带信息进入Spring MVC程序时，第一站是Spring的DispatcherServlet(在web.xml中配置)，它是接收所有用户请求的前端控制器Servlet。DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）。然后根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain对象的形式返回；DispatcherServlet的任务是将请求转发给Spring MVC控制器(Controller)，控制器是用于处理用户请求的Spring Bean。DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。（如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler()方法）</p>
<h6 id="处理器映射-Handler-Mapping"><a href="#处理器映射-Handler-Mapping" class="headerlink" title="处理器映射(Handler Mapping)"></a>处理器映射(Handler Mapping)</h6><p>一般程序中会有不止一个控制器，那么DispatcherServlet需要知道将请求发送给哪个控制器，所以DispatcherServlet将会查询处理器映射(handler mapping)来确定请求的下一站，处理器映射会根据用户请求的URL来决定是哪个控制器。提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p>
<ul>
<li>HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</li>
<li>数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</li>
<li>数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</li>
<li>数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</li>
</ul>
<h6 id="控制器-Controller"><a href="#控制器-Controller" class="headerlink" title="控制器(Controller)"></a>控制器(Controller)</h6><p>DispatcherServlet选择了控制器之后，就会将请求发送给该控制器并等待控制器处理用户请求。控制器在完成了逻辑处理后，通常会返回处理结果并将这些结果在浏览器上显示，这些信息在Spring MVC中成为模型(Model)。Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p>
<h6 id="模型以及逻辑视图名称-Model"><a href="#模型以及逻辑视图名称-Model" class="headerlink" title="模型以及逻辑视图名称(Model)"></a>模型以及逻辑视图名称(Model)</h6><p>控制器仅仅返回模型信息往往是不够的，需要对模型信息进行格式化，生成用户友好的方式如html进行显示。所以模型信息将会被发送给一个视图(View，例如jsp视图。事实上，控制器同时产生了模型以及视图名称，将这些信息发送回DispatcherServlet。</p>
<h6 id="视图解析器-View-Parser"><a href="#视图解析器-View-Parser" class="headerlink" title="视图解析器(View Parser)"></a>视图解析器(View Parser)</h6><p>DispatcherServlet收到控制器的视图名称并不直接表示某个特定的JSP，这个视图名称仅仅是个逻辑值，DispatcherServlet为了找到真正的视图，会使用视图解析器(view resolver)将视图名称匹配成一个具体的视图。根据返回的ModelAndView，选择一个适合的ViewResolver（必须是已经注册到Spring容器中的ViewResolver)返回给DispatcherServlet。</p>
<h6 id="视图-View"><a href="#视图-View" class="headerlink" title="视图(View)"></a>视图(View)</h6><p>目前为止，DispatcherServlet知道了具体由哪个视图来显示模型信息，那么它就会将模型信息交付给视图，请求的任务到这里就完成了。ViewResolver 结合Model和View，来渲染视图。</p>
<h6 id="响应-HTTP-Response"><a href="#响应-HTTP-Response" class="headerlink" title="响应(HTTP Response)"></a>响应(HTTP Response)</h6><p>视图渲染模型信息并输出，该输出最后会传递给用户端，展示给用户查看。从以上步骤可以看到，Spring MVC要处理很多过程，但是大部分过程是Spring框架内部处理的，事实上，我们可以十分方便利用Spring MVC框架的编写功能强大的Web应用程序，下一章我们将搭建一个基础的Spring MVC实例程序。</p>
<p>原始地址：</p>
<ul>
<li><a href="http://wiki.jikexueyuan.com/project/spring/mvc-framework/spring-mvc-form-handling-example.html" target="_blank" rel="external">Spring MVC入门-DispatcherServlet处理请求过程</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring框架搭建]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/08/spring/</url>
      <content type="html"><![CDATA[<p>Spring的不足：</p>
<ul>
<li>配置太多</li>
</ul>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Could-not-open-ServletContext-resource-WEB-INF-applicationContext-xml"><a href="#Could-not-open-ServletContext-resource-WEB-INF-applicationContext-xml" class="headerlink" title="Could not open ServletContext resource [/WEB-INF/applicationContext.xml]"></a>Could not open ServletContext resource [/WEB-INF/applicationContext.xml]</h3><p>ContextLoaderListener has its own context which is shared by all servlets and filters. By default it will search /WEB-INF/applicationContext.xml。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/somewhere-else/root-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Missing-artifact-org-aspectj-aspectjweaver-jar-1-8-0-M1"><a href="#Missing-artifact-org-aspectj-aspectjweaver-jar-1-8-0-M1" class="headerlink" title="Missing artifact org.aspectj:aspectjweaver:jar:1.8.0.M1"></a>Missing artifact org.aspectj:aspectjweaver:jar:1.8.0.M1</h3><p>According to a reported issue at springsource, aspectjweaver is “basically identical to AspectJ 1.7” except that it has early support for Java 8.As I don’t need Java 8 support, I basically added a compile dependency to the latest release version of aspectweaver:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>This ensures that the 1.7.4 is used instead of the milestone release, and is an acceptable workaround for me, for the time being.</p>
<h5 id="Exception-java-lang-ClassNotFoundException-org-apache-commons-dbcp-BasicDataSource"><a href="#Exception-java-lang-ClassNotFoundException-org-apache-commons-dbcp-BasicDataSource" class="headerlink" title="Exception java.lang.ClassNotFoundException: org.apache.commons.dbcp.BasicDataSource"></a>Exception java.lang.ClassNotFoundException: org.apache.commons.dbcp.BasicDataSource</h5><p>在POM.xml中引入jar包。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="java-lang-NoClassDefFoundError-org-apache-ibatis-session-SqlSessionFactory"><a href="#java-lang-NoClassDefFoundError-org-apache-ibatis-session-SqlSessionFactory" class="headerlink" title="java.lang.NoClassDefFoundError: org/apache/ibatis/session/SqlSessionFactory"></a>java.lang.NoClassDefFoundError: org/apache/ibatis/session/SqlSessionFactory</h5><p>引入jar包。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.ibatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ibatis-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring事务管理]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/03/spring-transaction/</url>
      <content type="html"><![CDATA[<p>事务最重要的两个特性，是事务的传播级别和数据隔离级别。传播级别定义的是事务的控制范围，事务隔离级别定义的是事务在数据库读写方面的控制范围。</p>
<a id="more"></a>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span></div><div class="line">        <span class="attr">p:dataSource-ref</span>=<span class="string">"dataSource"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- enables scanning for @Transactional annotations --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h4 id="传播级别"><a href="#传播级别" class="headerlink" title="传播级别"></a>传播级别</h4><p>1） PROPAGATION_REQUIRED ，默认的spring事务传播级别，使用该级别的特点是，如果上下文中已经存在事务，那么就加入到事务中执行，如果当前上下文中不存在事务，则新建事务执行。所以这个级别通常能满足处理大多数的业务场景。</p>
<p>2）PROPAGATION_SUPPORTS ，从字面意思就知道，supports，支持，该传播级别的特点是，如果上下文存在事务，则支持事务加入事务，如果没有事务，则使用非事务的方式执行。所以说，并非所有的包在transactionTemplate.execute中的代码都会有事务支持。这个通常是用来处理那些并非原子性的非核心业务逻辑操作。应用场景较少。</p>
<p>3）PROPAGATION_MANDATORY ， 该级别的事务要求上下文中必须要存在事务，否则就会抛出异常！配置该方式的传播级别是有效的控制上下文调用代码遗漏添加事务控制的保证手段。比如一段代码不能单独被调用执行，但是一旦被调用，就必须有事务包含的情况，就可以使用这个传播级别。</p>
<p>4）PROPAGATION_REQUIRES_NEW ，从字面即可知道，new，每次都要一个新事务，该传播级别的特点是，每次都会新建一个事务，并且同时将上下文中的事务挂起，执行当前新建事务完成以后，上下文事务恢复再执行。</p>
<p>这是一个很有用的传播级别，举一个应用场景：现在有一个发送100个红包的操作，在发送之前，要做一些系统的初始化、验证、数据记录操作，然后发送100封红包，然后再记录发送日志，发送日志要求100%的准确，如果日志不准确，那么整个父事务逻辑需要回滚。<br>怎么处理整个业务需求呢？就是通过这个PROPAGATION_REQUIRES_NEW 级别的事务传播控制就可以完成。发送红包的子事务不会直接影响到父事务的提交和回滚。</p>
<p>5）PROPAGATION_NOT_SUPPORTED ，这个也可以从字面得知，not supported ，不支持，当前级别的特点就是上下文中存在事务，则挂起事务，执行当前逻辑，结束后恢复上下文的事务。</p>
<p>这个级别有什么好处？可以帮助你将事务极可能的缩小。我们知道一个事务越大，它存在的风险也就越多。所以在处理事务的过程中，要保证尽可能的缩小范围。比如一段代码，是每次逻辑操作都必须调用的，比如循环1000次的某个非核心业务逻辑操作。这样的代码如果包在事务中，势必造成事务太大，导致出现一些难以考虑周全的异常情况。所以这个事务这个级别的传播级别就派上用场了。用当前级别的事务模板抱起来就可以了。</p>
<p>6）PROPAGATION_NEVER ，该事务更严格，上面一个事务传播级别只是不支持而已，有事务就挂起，而PROPAGATION_NEVER传播级别要求上下文中不能存在事务，一旦有事务，就抛出runtime异常，强制停止执行！这个级别上辈子跟事务有仇。</p>
<p>7）PROPAGATION_NESTED ，字面也可知道，nested，嵌套级别事务。该传播级别特征是，如果上下文中存在事务，则嵌套事务执行，如果不存在事务，则新建事务。</p>
<h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>1、Serializable ：最严格的级别，事务串行执行，资源消耗最大；</p>
<p>2、REPEATABLE READ ：保证了一个事务不会修改已经由另一个事务读取但未提交（回滚）的数据。避免了“脏读取”和“不可重复读取”的情况，但是带来了更多的性能损失。</p>
<p>3、READ COMMITTED :大多数主流数据库的默认事务等级，保证了一个事务不会读到另一个并行事务已修改但未提交的数据，避免了“脏读取”。该级别适用于大多数系统。</p>
<p>4、Read Uncommitted ：保证了读取过程中不会读取到非法数据。</p>
<p>上面的解释其实每个定义都有一些拗口，其中涉及到几个术语：脏读、不可重复读、幻读。<br>这里解释一下：</p>
<p>脏读 :所谓的脏读，其实就是读到了别的事务回滚前的脏数据。比如事务B执行过程中修改了数据X，在未提交前，事务A读取了X，而事务B却回滚了，这样事务A就形成了脏读。</p>
<p>不可重复读 ：不可重复读字面含义已经很明了了，比如事务A首先读取了一条数据，然后执行逻辑的时候，事务B将这条数据改变了，然后事务A再次读取的时候，发现数据不匹配了，就是所谓的不可重复读了。</p>
<p>幻读 ：小的时候数手指，第一次数十10个，第二次数是11个，怎么回事？产生幻觉了？<br>幻读也是这样子，事务A首先根据条件索引得到10条数据，然后事务B改变了数据库一条数据，导致也符合事务A当时的搜索条件，这样事务A再次搜索发现有11条数据了，就产生了幻读。</p>
<p>一个对照关系表：<br>                                       Dirty reads          non-repeatable reads            phantom reads<br>Serializable                          不会                        不会                                           不会<br>REPEATABLE READ             不会                        不会                                            会<br>READ COMMITTED             不会                        会                                                会<br>Read Uncommitted             会                           会                                                会</p>
<p>所以最安全的，是Serializable，但是伴随而来也是高昂的性能开销。<br>另外，事务常用的两个属性：readonly和timeout<br>一个是设置事务为只读以提升性能。<br>另一个是设置事务的超时时间，一般用于防止大事务的发生。还是那句话，事务要尽可能的小！</p>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>在需要事务管理的地方加@Transactional 注解。@Transactional 注解可以被应用于接口定义和接口方法、类定义和类的 public 方法上。<br>@Transactional 注解只能应用到 public 可见度的方法上。 如果你在 protected、private 或者 package-visible 的方法上使用 @Transactional 注解，它也不会报错， 但是这个被注解的方法将不会展示已配置的事务设置。<br>注意仅仅 @Transactional 注解的出现不足于开启事务行为，它仅仅 是一种元数据。必须在配置文件中使用配置元素，才真正开启了事务行为。<br>通过 元素的 “proxy-target-class” 属性值来控制是基于接口的还是基于类的代理被创建。如果 “proxy-target-class” 属值被设置为 “true”，那么基于类的代理将起作用（这时需要CGLIB库cglib.jar在CLASSPATH中）。如果 “proxy-target-class” 属值被设置为 “false” 或者这个属性被省略，那么标准的JDK基于接口的代理将起作用。<br>Spring团队建议在具体的类（或类的方法）上使用 @Transactional 注解，而不要使用在类所要实现的任何接口上。在接口上使用 @Transactional 注解，只能当你设置了基于接口的代理时它才生效。因为注解是 不能继承 的，这就意味着如果正在使用基于类的代理时，那么事务的设置将不能被基于类的代理所识别，而且对象也将不会被事务代理所包装。<br>@Transactional 的事务开启 ，或者是基于接口的 或者是基于类的代理被创建。所以在同一个类中一个方法调用另一个方法有事务的方法，事务是不会起作用的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MyBatis缓存]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/02/mybatis-cache/</url>
      <content type="html"><![CDATA[<p>正如大多数持久层框架一样，MyBatis 同样提供了一级缓存和二级缓存的支持；</p>
<a id="more"></a>
<p>一级缓存基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当 Session flush 或 close 之后，该Session中的所有 Cache 就将清空。<br>二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache、Hazelcast等。<br>对于缓存数据更新机制，当某一个作用域(一级缓存Session/二级缓存Namespaces)的进行了 C/U/D 操作后，默认该作用域下所有 select 中的缓存将被clear。<br>MyBatis 的缓存采用了delegate机制 及 装饰器模式设计，当put、get、remove时，其中会经过多层 delegate cache 处理，其Cache类别有：BaseCache(基础缓存)、EvictionCache(排除算法缓存) 、DecoratorCache(装饰器缓存)：</p>
<ul>
<li>BaseCache:为缓存数据最终存储的处理类，默认为 PerpetualCache，基于Map存储；可自定义存储处理，如基于EhCache、Memcached等；</li>
<li>EvictionCache:当缓存数量达到一定大小后，将通过算法对缓存数据进行清除。默认采用 Lru 算法(LruCache)，提供有 fifo 算法(FifoCache)等；</li>
<li>DecoratorCache：缓存put/get处理前后的装饰器，如使用 LoggingCache 输出缓存命中日志信息、使用 SerializedCache 对 Cache的数据 put或get 进行序列化及反序列化处理、当设置flushInterval(默认1/h)后，则使用 ScheduledCache 对缓存数据进行定时刷新等。</li>
</ul>
<p>一般缓存框架的数据结构基本上都是 Key-Value 方式存储，MyBatis 对于其 Key 的生成采取规则为：[hashcode : checksum : mappedStementId : offset : limit : executeSql : queryParams]。对于并发 Read/Write 时缓存数据的同步问题，MyBatis 默认基于 JDK/concurrent中的ReadWriteLock，使用 ReentrantReadWriteLock 的实现，从而通过 Lock 机制防止在并发 Write Cache 过程中线程安全问题。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring视图解析器]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/02/spring-viewresolver/</url>
      <content type="html"><![CDATA[<h4 id="InternalResourceViewResolver"><a href="#InternalResourceViewResolver" class="headerlink" title="InternalResourceViewResolver"></a>InternalResourceViewResolver</h4><p>在Sprinng MVC中，Handler执行完成后，向DispatcherServlet返回一个ModelAndView对象。此时就需要调用视图解析器(View Resolver)来渲染视图了。</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>它是URLBasedViewResolver的子类，所以URLBasedViewResolver支持的特性它都支持。单从字面意思来看，可以把InternalResourceViewResolver解释为内部资源视图解析器，这就是InternalResourceViewResolver的一个特性。InternalResourceViewResolver会把返回的视图名称都解析为InternalResourceView对象，InternalResourceView会把Controller处理器方法返回的模型属性都存放到对应的request属性中，然后通过RequestDispatcher在服务器端把请求forword重定向到目标URL。比如在InternalResourceViewResolver中定义了prefix=/WEB-INF/，suffix=.jsp，然后请求的Controller处理器方法返回的视图名称为test，那么这个时候InternalResourceViewResolver就会把test解析为一个InternalResourceView对象，先把返回的模型属性都存放到对应的HttpServletRequest属性中，然后利用RequestDispatcher在服务器端把请求forword到/WEB-INF/test.jsp。注意InternalResourceViewResolver只能渲染jsp页面，如果需要渲染html看<a href="http://stackoverflow.com/questions/20564336/internalresourceviewresolver-to-resolve-both-jsp-and-html-together" target="_blank" rel="external">这里</a>。</p>
<h4 id="ThymeleafViewResolver"><a href="#ThymeleafViewResolver" class="headerlink" title="ThymeleafViewResolver"></a>ThymeleafViewResolver</h4><p>在Java世界的MVC框架里，使用的视图技术不少，最基本的是JSP，还有知名的FreeMarker和Velocity等模板引擎。Thymeleaf也是一款优秀的模板引擎，它在HTML5/XHTML的视图层表现的很好，也能在离线情况下处理任何XML文件。它是完全可以替代JSP+JSTL(JSP Standard Tag Library，JSP标准标签库)的。</p>
<p>Thymeleaf官方的Q&amp;A：</p>
<p>Q: 和FreeMarker,Velocity相比，Thymeleaf表现得怎样呢？</p>
<p>A：FreeMarker和Velocity都是软件领域杰出的作品，但它们在解决模板问题上的处理哲学和Thymeleaf不一样。Thymeleaf强调的是自然模板，也就是允许模板作为产品原型使用(笔者注:因为其后缀名就是.html，可以直接在浏览器打开)，而FreeMarker和Velocity不行。并且Thymeleaf的语法更简洁、更和目前Web开发的趋势相一致。其次，从架构的角度看，FreeMarker和Velocity更像个文本处理器，所以它们能够处理很多类型的内容，而Thymeleaf是基于XML的，只能处理XML格式的数据。因此这样看，FreeMarker和Velocity更通用些，但恰恰如此，Thymeleaf更能利用XML的特性，尤其是在Web应用中。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- thymeleaf thymeleafViewResolver--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.view.ThymeleafViewResolver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateEngine"</span> <span class="attr">ref</span>=<span class="string">"templateEngine"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"characterEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fedora上MySQL安装]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/02/fedora-mysql-install/</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## Fedora 24 ##</span></div><div class="line">dnf install https://dev.mysql.com/get/mysql57-community-release-fc24-8.noarch.rpm</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>安装MySQL。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnf install -y mysql-community-server</div></pre></td></tr></table></figure>
<p>启动MySQL。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">systemctl start mysqld.service <span class="comment">## use restart after update</span></div><div class="line"></div><div class="line">systemctl <span class="built_in">enable</span> mysqld.service</div></pre></td></tr></table></figure>
<p>登陆时会提示如下错误：ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: YES)获取随机密码。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep <span class="string">'A temporary password is generated for root@localhost'</span> /var/<span class="built_in">log</span>/mysqld.log |tail -1</div></pre></td></tr></table></figure>
<p>重新设置MySQL密码,密码要求包含大小写和数字以及特殊字符，不符合安全策略的(Your password does not satisfy the current policy requirements)密码无法设置成功。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SET PASSWORD FOR <span class="string">'root'</span>@<span class="string">'localhost'</span> = PASSWORD(<span class="string">'$jxqMySQL123456'</span>);</div></pre></td></tr></table></figure>
<h4 id="數據庫操作"><a href="#數據庫操作" class="headerlink" title="數據庫操作"></a>數據庫操作</h4><p>創建數據庫。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#列出數據庫</span></div><div class="line">show databases;</div><div class="line"><span class="comment">#創建數據庫</span></div><div class="line">create database dolphin;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面试总结]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/02/interview-summerize/</url>
      <content type="html"><![CDATA[<p>面试的过程也是气质是否和公司搭调的过程，每个公司都有自己的管理特色。找到价值观相对契合的企业非常重要。这里是面试时面试官问过的问题，或许平时开发中根本没有想过这些问题，但注意更多细节总是有益处的，总结如下。</p>
<a id="more"></a>
<h4 id="Java中线程安全的类"><a href="#Java中线程安全的类" class="headerlink" title="Java中线程安全的类"></a>Java中线程安全的类</h4><ul>
<li>ArrayList线程不安全，Vector线程安全；</li>
<li>HashMap线程不安全，HashTable线程安全,ConcurrentHashMap线程安全；</li>
<li>StringBuilder线程不安全，StringBuffer线程安全。</li>
</ul>
<h4 id="String、StringBuilder、StringBuffer区别"><a href="#String、StringBuilder、StringBuffer区别" class="headerlink" title="String、StringBuilder、StringBuffer区别"></a>String、StringBuilder、StringBuffer区别</h4><p>简要的说， String 类型和 StringBuffer类型的主要性能区别其实在于 String 是不可变的对象, 因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用 String ，因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后， JVM 的 GC 就会进行垃圾回收，执行垃圾回收时是会block住程序的，影响性能。而如果是使用 StringBuffer 类则结果就不一样了，每次结果都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，再改变对象引用。所以在一般情况下我们推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。而在某些特别情况下， String 对象的字符串拼接其实是被 JVM 解释成了 StringBuffer 对象的拼接，所以这些时候 String 对象的速度并不会比 StringBuffer 对象慢，而特别是以下的字符串对象生成中， String 效率是远要比 StringBuffer 快的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String S1 = “This is only a” + “ simple” + “ test”;</div><div class="line">StringBuffer Sb = <span class="keyword">new</span> StringBuilder(“This is only a”).append(“ simple”).append(“ test”);</div></pre></td></tr></table></figure>
<p> 你会很惊讶的发现，生成 String S1 对象的速度简直太快了，而这个时候 StringBuffer 居然速度上根本一点都不占优势。其实这是 JVM 的一个把戏，在 JVM 里:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String S1 = “This is only a” + “ simple” + “test”;</div></pre></td></tr></table></figure>
<p> 其实就是：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String S1 = “This is only a simple test”;</div></pre></td></tr></table></figure>
<p> 所以当然不需要太多的时间了。但大家这里要注意的是，如果你的字串是来自另外的 String 对象的话，速度就没那么快了，譬如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String S2 = “This is only a”;</div><div class="line">String S3 = “ simple”;</div><div class="line">String S4 = “ test”;</div><div class="line">String S1 = S2 +S3 + S4;</div></pre></td></tr></table></figure>
<p>这时候 JVM 会规规矩矩的按照原来的方式去做</p>
<p>在大部分情况下 StringBuffer 优于 String<br>StringBuffer<br>Java.lang.StringBuffer线程安全的可变字符序列。一个类似于 String 的字符串缓冲区，但不能修改。虽然在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。<br>可将字符串缓冲区安全地用于多个线程。可以在必要时对这些方法进行同步，因此任意特定实例上的所有操作就好像是以串行顺序发生的，该顺序与所涉及的每个线程进行的方法调用顺序一致。<br>StringBuffer 上的主要操作是 append 和 insert 方法，可重载这些方法，以接受任意类型的数据。每个方法都能有效地将给定的数据转换成字符串，然后将该字符串的字符追加或插入到字符串缓冲区中。append 方法始终将这些字符添加到缓冲区的末端；而 insert 方法则在指定的点添加字符。<br>例如，如果 z 引用一个当前内容是“start”的字符串缓冲区对象，则此方法调用 z.append(“le”) 会使字符串缓冲区包含“startle”，而 z.insert(4, “le”) 将更改字符串缓冲区，使之包含“starlet”。<br>在大部分情况下 StringBuilder 优于 StringBuffer<br>java.lang.StringBuilde<br>java.lang.StringBuilder一个可变的字符序列是5.0新增的。此类提供一个与 StringBuffer 兼容的 API，但不保证同步。该类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快。两者的方法基本相同。</p>
<h4 id="使用Spring框架的原因"><a href="#使用Spring框架的原因" class="headerlink" title="使用Spring框架的原因"></a>使用Spring框架的原因</h4><ul>
<li><p>非侵入式：支持基于POJO的编程模式，不强制性的要求实现Spring框架中的接口或继承Spring框架中的类。</p>
</li>
<li><p>IoC容器：IoC容器帮助应用程序管理对象以及对象之间的依赖关系，对象之间的依赖关系如果发生了改变只需要修改配置文件而不是修改代码，因为代码的修改可能意味着项目的重新构建和完整的回归测试。有了IoC容器，程序员再也不需要自己编写工厂、单例，这一点特别符合Spring的精神”不要重复的发明轮子”。</p>
</li>
<li><p>AOP（面向切面编程）：将所有的横切关注功能封装到切面（aspect）中，通过配置的方式将横切关注功能动态添加到目标代码上，进一步实现了业务逻辑和系统服务之间的分离。另一方面，有了AOP程序员可以省去很多自己写代理类的工作。</p>
</li>
<li><p>MVC：Spring的MVC框架是非常优秀的，Spring MVC的配置相对于Struts 2来说较少，性能方面，Spring比Struts较快，开发效率Spring MVC确实比struts2高，Spring3 MVC更容易实现Restful URL。Struts更加很多新的技术点，比如拦截器、值栈及OGNL表达式，学习成本较高，springmvc 比较简单，很较少的时间都能上手。</p>
</li>
<li><p>事务管理：Spring以宽广的胸怀接纳多种持久层技术，并且为其提供了声明式的事务管理，在不需要任何一行代码的情况下就能够完成事务管理。</p>
</li>
<li><p>其他：选择Spring框架的原因还远不止于此，Spring为Java企业级开发提供了一站式选择，你可以在需要的时候使用它的部分和全部，更重要的是，你甚至可以在感觉不到Spring存在的情况下，在你的项目中使用Spring提供的各种优秀的功能。</p>
</li>
</ul>
<h4 id="大型网站在架构上应当考虑哪些问题"><a href="#大型网站在架构上应当考虑哪些问题" class="headerlink" title="大型网站在架构上应当考虑哪些问题"></a>大型网站在架构上应当考虑哪些问题</h4><ul>
<li><p>分层(Layer)：分层是处理任何复杂系统最常见的手段之一，将系统横向切分成若干个层面，每个层面只承担单一的职责，然后通过下层为上层提供的基础设施和服务以及上层对下层的调用来形成一个完整的复杂的系统。计算机网络的开放系统互联参考模型（OSI[Open Systems Interconnection]/RM）和Internet的TCP/IP模型都是分层结构，大型网站的软件系统也可以使用分层的理念将其分为持久层（提供数据存储和访问服务）、业务层（处理业务逻辑，系统中最核心的部分）和表示层（系统交互、视图展示）。需要指出的是：（1）分层是逻辑上的划分，在物理上可以位于同一设备上也可以在不同的设备上部署不同的功能模块，这样可以使用更多的计算资源来应对用户的并发访问；（2）层与层之间应当有清晰的边界，这样分层才有意义，才更利于软件的开发和维护。</p>
</li>
<li><p>分割(Split)：分割是对软件的纵向切分。我们可以将大型网站的不同功能和服务分割开，形成高内聚低耦合的功能模块（单元）。在设计初期可以做一个粗粒度的分割，将网站分割为若干个功能模块，后期还可以进一步对每个模块进行细粒度的分割，这样一方面有助于软件的开发和维护，另一方面有助于分布式的部署，提供网站的并发处理能力和功能的扩展。</p>
</li>
<li><p>分布式(Distribution)：除了上面提到的内容，网站的静态资源（JavaScript、CSS、图片等）也可以采用独立分布式部署并采用独立的域名，这样可以减轻应用服务器的负载压力，也使得浏览器对资源的加载更快。数据的存取也应该是分布式的，传统的商业级关系型数据库产品基本上都支持分布式部署，而新生的NoSQL产品几乎都是分布式的。当然，网站后台的业务处理也要使用分布式技术，例如查询索引的构建、数据分析等，这些业务计算规模庞大，可以使用Hadoop以及MapReduce分布式计算框架来处理。</p>
</li>
<li><p>集群(Cluster)：集群使得有更多的服务器提供相同的服务，可以更好的提供对并发的支持。</p>
</li>
<li><p>缓存(Cache)：所谓缓存就是用空间换取时间的技术，将数据尽可能放在距离计算最近的位置。使用缓存是网站优化的第一定律。我们通常说的CDN、反向代理、热点数据都是对缓存技术的使用。</p>
</li>
<li><p>异步(Async)：异步是实现软件实体之间解耦合的又一重要手段。异步架构是典型的生产者消费者模式，二者之间没有直接的调用关系，只要保持数据结构不变，彼此功能实现可以随意变化而不互相影响，这对网站的扩展非常有利。使用异步处理还可以提高系统可用性，加快网站的响应速度（用Ajax加载数据就是一种异步技术），同时还可以起到削峰作用（应对瞬时高并发）。能推迟处理的都要推迟处理”是网站优化的第二定律，而异步是践行网站优化第二定律的重要手段。</p>
</li>
<li><p>冗余(Redundancy)：各种服务器都要提供相应的冗余服务器以便在某台或某些服务器宕机时还能保证网站可以正常工作，同时也提供了灾难恢复的可能性。冗余是网站高可用性的重要保证。</p>
</li>
</ul>
<h4 id="你使用过的应用服务器优化技术有哪些"><a href="#你使用过的应用服务器优化技术有哪些" class="headerlink" title="你使用过的应用服务器优化技术有哪些"></a>你使用过的应用服务器优化技术有哪些</h4><ul>
<li><p>分布式缓存：缓存的本质就是内存中的哈希表，如果设计一个优质的哈希函数，那么理论上哈希表读写的渐近时间复杂度为O(1)。缓存主要用来存放那些读写比很高、变化很少的数据，这样应用程序读取数据时先到缓存中读取，如果没有或者数据已经失效再去访问数据库或文件系统，并根据拟定的规则将数据写入缓存。对网站数据的访问也符合二八定律（Pareto分布，幂律分布），即80%的访问都集中在20%的数据上，如果能够将这20%的数据缓存起来，那么系统的性能将得到显著的改善。当然，使用缓存需要解决以下几个问题：</p>
<p>1.频繁修改的数据；<br>2.数据不一致与脏读；<br>3.缓存雪崩（可以采用分布式缓存服务器集群加以解决，memcached是广泛采用的解决方案）；<br>4.缓存预热；<br>5.缓存穿透（恶意持续请求不存在的数据）。</p>
</li>
<li><p>异步操作：可以使用消息队列将调用异步化，通过异步处理将短时间高并发产生的事件消息存储在消息队列中，从而起到削峰作用。电商网站在进行促销活动时，可以将用户的订单请求存入消息队列，这样可以抵御大量的并发订单请求对系统和数据库的冲击。目前，绝大多数的电商网站即便不进行促销活动，订单系统都采用了消息队列来处理。</p>
</li>
<li><p>使用集群。</p>
</li>
<li><p>代码优化：</p>
<p>1.多线程：基于Java的Web开发基本上都通过多线程的方式响应用户的并发请求，使用多线程技术在编程上要解决线程安全问题，主要可以考虑以下几个方面：A. 将对象设计为无状态对象（这和面向对象的编程观点是矛盾的，在面向对象的世界中被视为不良设计），这样就不会存在并发访问时对象状态不一致的问题。B. 在方法内部创建对象，这样对象由进入方法的线程创建，不会出现多个线程访问同一对象的问题。使用ThreadLocal将对象与线程绑定也是很好的做法，这一点在前面已经探讨过了。C. 对资源进行并发访问时应当使用合理的锁机制。<br>2.非阻塞I/O： 使用单线程和非阻塞I/O是目前公认的比多线程的方式更能充分发挥服务器性能的应用模式，基于Node.js构建的服务器就采用了这样的方式。Java在JDK 1.4中就引入了NIO（Non-blocking I/O）,在Servlet 3规范中又引入了异步Servlet的概念，这些都为在服务器端采用非阻塞I/O提供了必要的基础。<br>3.资源复用：资源复用主要有两种方式，一是单例，二是对象池，我们使用的数据库连接池、线程池都是对象池化技术，这是典型的用空间换取时间的策略，另一方面也实现对资源的复用，从而避免了不必要的创建和释放资源所带来的开销。</p>
</li>
</ul>
<h4 id="你用过的网站前端优化的技术有哪些"><a href="#你用过的网站前端优化的技术有哪些" class="headerlink" title="你用过的网站前端优化的技术有哪些"></a>你用过的网站前端优化的技术有哪些</h4><ul>
<li>浏览器访问优化：</li>
</ul>
<ol>
<li>减少HTTP请求数量：合并CSS、合并JavaScript、合并图片（CSS Sprite）</li>
<li>使用浏览器缓存：通过设置HTTP响应头中的Cache-Control和Expires属性，将CSS、JavaScript、图片等在浏览器中缓存，当这些静态资源需要更新时，可以更新HTML文件中的引用来让浏览器重新请求新的资源</li>
<li>启用压缩</li>
<li>CSS前置，JavaScript后置</li>
<li>减少Cookie传输</li>
</ol>
<ul>
<li><p>CDN加速：CDN（Content Distribute Network）的本质仍然是缓存，将数据缓存在离用户最近的地方，CDN通常部署在网络运营商的机房，不仅可以提升响应速度，还可以减少应用服务器的压力。当然，CDN缓存的通常都是静态资源。</p>
</li>
<li><p>反向代理：反向代理相当于应用服务器的一个门面，可以保护网站的安全性，也可以实现负载均衡的功能，当然最重要的是它缓存了用户访问的热点资源，可以直接从反向代理将某些内容返回给用户浏览器。</p>
</li>
</ul>
<h4 id="什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？"><a href="#什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？" class="headerlink" title="什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？"></a>什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？</h4><ul>
<li><p>XSS（Cross Site Script，跨站脚本攻击）是向网页中注入恶意脚本在用户浏览网页时在用户浏览器中执行恶意脚本的攻击方式。跨站脚本攻击分有两种形式：反射型攻击（诱使用户点击一个嵌入恶意脚本的链接以达到攻击的目标，目前有很多攻击者利用论坛、微博发布含有恶意脚本的URL就属于这种方式）和持久型攻击（将恶意脚本提交到被攻击网站的数据库中，用户浏览网页时，恶意脚本从数据库中被加载到页面执行，QQ邮箱的早期版本就曾经被利用作为持久型跨站脚本攻击的平台）。XSS虽然不是什么新鲜玩意，但是攻击的手法却不断翻新，防范XSS主要有两方面：消毒（对危险字符进行转义）和HttpOnly（防范XSS攻击者窃取Cookie数据）。</p>
</li>
<li><p>SQL注入攻击是注入攻击最常见的形式（此外还有OS注入攻击（Struts 2的高危漏洞就是通过OGNL实施OS注入攻击导致的）），当服务器使用请求参数构造SQL语句时，恶意的SQL被嵌入到SQL中交给数据库执行。SQL注入攻击需要攻击者对数据库结构有所了解才能进行，攻击者想要获得表结构有多种方式：（1）如果使用开源系统搭建网站，数据库结构也是公开的（目前有很多现成的系统可以直接搭建论坛，电商网站，虽然方便快捷但是风险是必须要认真评估的）；（2）错误回显（如果将服务器的错误信息直接显示在页面上，攻击者可以通过非法参数引发页面错误从而通过错误信息了解数据库结构，Web应用应当设置友好的错误页，一方面符合最小惊讶原则，一方面屏蔽掉可能给系统带来危险的错误回显信息）；（3）盲注。防范SQL注入攻击也可以采用消毒的方式，通过正则表达式对请求参数进行验证，此外，参数绑定也是很好的手段，这样恶意的SQL会被当做SQL的参数而不是命令被执行，JDBC中的PreparedStatement就是支持参数绑定的语句对象，从性能和安全性上都明显优于Statement。</p>
</li>
<li><p>CSRF攻击（Cross Site Request Forgery，跨站请求伪造）是攻击者通过跨站请求，以合法的用户身份进行非法操作（如转账或发帖等）。CSRF的原理是利用浏览器的Cookie或服务器的Session，盗取用户身份，其原理如下图所示。防范CSRF的主要手段是识别请求者的身份，主要有以下几种方式：（1）在表单中添加令牌（token）；（2）验证码；（3）检查请求头中的Referer（前面提到防图片盗链接也是用的这种方式）。令牌和验证都具有一次消费性的特征，因此在原理上一致的，但是验证码是一种糟糕的用户体验，不是必要的情况下不要轻易使用验证码，目前很多网站的做法是如果在短时间内多次提交一个表单未获得成功后才要求提供验证码，这样会获得较好的用户体验。</p>
</li>
</ul>
<h4 id="什么是领域模型-domain-model-？贫血模型-anaemic-domain-model-和充血模型-rich-domain-model-有什么区别？"><a href="#什么是领域模型-domain-model-？贫血模型-anaemic-domain-model-和充血模型-rich-domain-model-有什么区别？" class="headerlink" title="什么是领域模型(domain model)？贫血模型(anaemic domain model)和充血模型(rich domain model)有什么区别？"></a>什么是领域模型(domain model)？贫血模型(anaemic domain model)和充血模型(rich domain model)有什么区别？</h4><p>领域模型是领域内的概念类或现实世界中对象的可视化表示，又称为概念模型或分析对象模型，它专注于分析问题领域本身，发掘重要的业务领域概念，并建立业务领域概念之间的关系。贫血模型是指使用的领域对象中只有setter和getter方法（POJO），所有的业务逻辑都不包含在领域对象中而是放在业务逻辑层。有人将我们这里说的贫血模型进一步划分成失血模型（领域对象完全没有业务逻辑）和贫血模型（领域对象有少量的业务逻辑），我们这里就不对此加以区分了。充血模型将大多数业务逻辑和持久化放在领域对象中，业务逻辑（业务门面）只是完成对业务逻辑的封装、事务和权限等的处理。下面两张图分别展示了贫血模型和充血模型的分层架构。更加细粒度的有失血模型，贫血模型，充血模型，胀血模型。贫血模型就是domain ojbect包含了不依赖于持久化的领域逻辑，而那些依赖持久化的领域逻辑被分离到Service层。失血模型简单来说，就是domain object只有属性的getter/setter方法的纯数据类，所有的业务逻辑完全由business object来完成(又称Transaction Script)，这种模型下的domain object被Martin Fowler称之为“贫血的domain object”。充血模型和第二种模型差不多，所不同的就是如何划分业务逻辑，即认为，绝大多业务逻辑都应该被放在domain object里面(包括持久化逻辑)，而Service层应该是很薄的一层，仅仅封装事务和少量逻辑，不和DAO层打交道。</p>
<h4 id="描述一下JVM加载class文件的原理机制"><a href="#描述一下JVM加载class文件的原理机制" class="headerlink" title="描述一下JVM加载class文件的原理机制"></a>描述一下JVM加载class文件的原理机制</h4><p>类加载的过程包括了加载、验证、准备、解析、初始化五个阶段。JVM中类的装载是由类加载器（ClassLoader）和它的子类来实现的，Java中的类加载器是一个重要的Java运行时系统组件，它负责在运行时查找和装入类文件中的类。<br>  由于Java的跨平台性，经过编译的Java源程序并不是一个可执行程序，而是一个或多个类文件。当Java程序需要使用某个类时，JVM会确保这个类已经被加载、连接（验证、准备和解析）和初始化。类的加载是指把类的.class文件中的数据读入到内存中，通常是创建一个字节数组读入.class文件，然后产生与所加载类对应的Class对象。加载完成后，Class对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。最后JVM对类进行初始化，包括：A. 如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；B. 如果类中存在初始化语句，就依次执行这些初始化语句。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">编译 -&gt; 加载 -&gt; 链接（验证+准备+解析）-&gt;初始化（使用前的准备）-&gt;使用-&gt; 卸载</div></pre></td></tr></table></figure>
<p>  类的加载是由类加载器完成的，类加载器包括：根加载器（BootStrap）、扩展加载器（Extension）、系统加载器（System）和用户自定义类加载器（java.lang.ClassLoader的子类）。从Java 2（JDK 1.2）开始，类加载过程采取了父亲委托机制(PDM[Parerent Delegate Mechanism])。PDM更好的保证了Java平台的安全性，在该机制中，JVM自带的Bootstrap是根加载器，其他的加载器都有且仅有一个父类加载器。类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。JVM不会向Java程序提供对Bootstrap的引用。下面是关于几个类加载器的说明：</p>
<ul>
<li>Bootstrap：一般用本地代码实现，负责加载JVM基础核心类库（rt.jar）；</li>
<li>Extension：从java.ext.dirs系统属性所指定的目录中加载类库，它的父加载器是Bootstrap；</li>
<li>System：又叫应用类加载器，其父类是Extension。它是应用最广泛的类加载器。它从环境变量classpath或者系统属性java.class.path所指定的目录中记载类，是用户自定义加载器的默认父加载器。</li>
</ul>
<h4 id="什么条件下会触发垃圾回收"><a href="#什么条件下会触发垃圾回收" class="headerlink" title="什么条件下会触发垃圾回收"></a>什么条件下会触发垃圾回收</h4><h5 id="触发Full-GC"><a href="#触发Full-GC" class="headerlink" title="触发Full GC"></a>触发Full GC</h5><p>除直接调用System.gc外，触发Full GC执行的情况有如下四种。</p>
<ol>
<li>旧生代空间不足</li>
</ol>
<p>旧生代空间只有在新生代对象转入及创建为大对象、大数组时才会出现不足的现象，当执行Full GC后空间仍然不足，则抛出如下错误：<code>java.lang.OutOfMemoryError: Java heap space</code>，为避免以上两种状况引起的Full GC，调优时应尽量做到让对象在Minor GC阶段被回收、让对象在新生代多存活一段时间及不要创建过大的对象及数组。</p>
<ol>
<li>Permanet Generation空间满</li>
</ol>
<p>Permanet Generation中存放的为一些class的信息等，当系统中要加载的类、反射的类和调用的方法较多时，Permanet Generation可能会被占满，在未配置为采用CMS GC的情况下会执行Full GC。如果经过Full GC仍然回收不了，那么JVM会抛出如下错误信息：<code>java.lang.OutOfMemoryError: PermGen space</code>。为避免Perm Gen占满造成Full GC现象，可采用的方法为增大Perm Gen空间或转为使用CMS GC。</p>
<ol>
<li>CMS GC时出现promotion failed和concurrent mode failure</li>
</ol>
<p>对于采用CMS进行旧生代GC的程序而言，尤其要注意GC日志中是否有promotion failed和concurrent mode failure两种状况，当这两种状况出现时可能会触发Full GC。</p>
<p>promotion failed是在进行Minor GC时，survivor space放不下、对象只能放入旧生代，而此时旧生代也放不下造成的；concurrent mode failure是在执行CMS GC的过程中同时有对象要放入旧生代，而此时旧生代空间不足造成的。CMS(Concurrent Mark-Sweep)是以牺牲吞吐量为代价来获得最短回收停顿时间的垃圾回收器。对于要求服务器响应速度的应用上，这种垃圾回收器非常适合。</p>
<p>应对措施为：增大survivor space、旧生代空间或调低触发并发GC的比率，但在JDK 5.0+、6.0+的版本中有可能会由于JDK的bug29导致CMS在remark完毕后很久才触发sweeping动作。对于这种状况，可通过设置-XX: CMSMaxAbortablePrecleanTime=5（单位为ms）来避免。</p>
<ol>
<li>统计得到的Minor GC晋升到旧生代的平均大小大于旧生代的剩余空间</li>
</ol>
<p>这是一个较为复杂的触发情况，Hotspot为了避免由于新生代对象晋升到旧生代导致旧生代空间不足的现象，在进行Minor GC时，做了一个判断，如果之前统计所得到的Minor GC晋升到旧生代的平均大小大于旧生代的剩余空间，那么就直接触发Full GC。</p>
<p>例如程序第一次触发Minor GC后，有6MB的对象晋升到旧生代，那么当下一次Minor GC发生时，首先检查旧生代的剩余空间是否大于6MB，如果小于6MB，则执行Full GC。</p>
<p>当新生代采用PS GC时，方式稍有不同，PS GC是在Minor GC后也会检查，例如上面的例子中第一次Minor GC后，PS GC会检查此时旧生代的剩余空间是否大于6MB，如小于，则触发对旧生代的回收。</p>
<p>除了以上4种状况外，对于使用RMI来进行RPC或管理的Sun JDK应用而言，默认情况下会一小时执行一次Full GC。可通过在启动时通过- java -Dsun.rmi.dgc.client.gcInterval=3600000来设置Full GC执行的间隔时间或通过-XX:+ DisableExplicitGC来禁止RMI调用System.gc。</p>
<p>对象分配规则</p>
<p>1.对象优先分配在Eden区，如果Eden区没有足够的空间时，虚拟机执行一次Minor GC。</p>
<p>2.大对象直接进入老年代（大对象是指需要大量连续内存空间的对象）。这样做的目的是避免在Eden区和两个Survivor区之间发生大量的内存拷贝（新生代采用复制算法收集内存）。</p>
<p>3.长期存活的对象进入老年代。虚拟机为每个对象定义了一个年龄计数器，如果对象经过了1次Minor GC那么对象会进入Survivor区，之后每经过一次Minor GC那么对象的年龄加1，知道达到阀值对象进入老年区。</p>
<p>4.动态判断对象的年龄。如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代。</p>
<p>5.空间分配担保。每次进行Minor GC时，JVM会计算Survivor区移至老年区的对象的平均大小，如果这个值大于老年区的剩余值大小则进行一次Full GC，如果小于检查HandlePromotionFailure设置，如果true则只进行Monitor GC,如果false则进行Full GC。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016年终总结与规划]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/01/2016-summerize/</url>
      <content type="html"><![CDATA[<p>转眼之间一年又过去了，不得不感叹时间过的飞起。时光如梭一点不假，年底了做一个自我总结，也算是对自己的一个交代。这一年改变了什么，什么没有变，想想又忍不住狠狠的装了一把。</p>
<a id="more"></a>
<h4 id="技术层面"><a href="#技术层面" class="headerlink" title="技术层面"></a>技术层面</h4><h5 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h5><ul>
<li>熟悉MySQL、Redis、HBase数据库(存储)</li>
<li>熟悉Spring下Web Socket\Web Service的开发，熟悉了Restful接口的开发</li>
<li>可以应付日常的Java开发任务，与同事合作可以应付较为复杂的开发任务（业务）</li>
<li>了解Apache Kafka，可以使用Ambari独立部署集群环境</li>
<li>可以搭建SSM(Spring\Spring MVC\Mybatis)框架</li>
<li>熟悉Java常见的开发工具(Eclipse\Maven\Intellij Idea\Gradle)的使用，并应用于日常开发中</li>
<li>进一步熟悉了GitHub、StackoverFlow网站和Git工具，开发必不可少的朋友</li>
<li>熟悉了Jira、Redmine等项目管理工具，并部署并应用于日常开发中</li>
<li>进一步熟悉持续集成思想，熟悉了Jenkins等持续集成工具，并应用于日常开发中</li>
<li>使用Hexo博客模板引擎搭建了自己的博客，编写开发与生活总结文章</li>
<li>使用LaTex编写了开发总结</li>
<li>熟悉了Wireshark和Tcpdump等网络包分析工具的使用</li>
<li>重新使用起了Linux操作系统</li>
<li>进一步熟悉TCP、HTTP协议、交通部T808协议</li>
<li>阅读了《代码大全》等编程相关书籍</li>
<li>学习了网页开发常见工具(Fiddler、FireBug)的使用，会根据原理进行分析</li>
<li>熟悉了前端的JavaScript、HTML、CSS知识</li>
<li>注重效率的培养，包括Intellij Idea的快捷键，JRebel等等工具的使用</li>
</ul>
<h5 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h5><ul>
<li>了解了Python的基本语法</li>
<li>尝试写了简单的Python代码</li>
</ul>
<h4 id="未来规划"><a href="#未来规划" class="headerlink" title="未来规划"></a>未来规划</h4><p>目前还是比较浮躁的，希望对Java底层有更加深入的了解(JVM)，不止于停留在表面，Java性能调优方面的经验、数据库性能调优经验，只有更深入的了解原理，看到错误时才可以一步一步分析原因，而不是简单的停留在猜测上。从现在开始静下心来，需要选择一个方向努力了。以热爱开源，热爱分享为指导思想，不断学习。乐于助人与寻求别人的帮助，别人没有义务帮助谁，俺有义务助人啊，软件构建里没有谁是全能型选手，取长补短即可。快乐工作，该装的A-C还是得装，一个也不能少，虽然换工作比较频繁，但是收获最大的还是认识一帮开心的朋友，工作也不是那么无趣，工作经验可以没有，换工作的经验必须得有啊。将来会多阅读人文类书籍，好多年一直抱着技术书籍在看，可见功利心还是蛮强的，好久没有阅读人文类书籍了，值得引起重视。不要原地踏步，不要重复，不要无聊。需要进步，需要创造，需要有趣。不断提高效率，想当初修改代码后不断重启项目，每次重启大概耗时1分钟，到后面完全在1秒内搞定，想想也有点小激动。希望以后在开发中由于不熟悉花1天去解决的事情，往后只需要1秒即可。来年的小计划如下：</p>
<ul>
<li>阅读不少于5本人文类书籍</li>
<li>阅读《编译原理》、《算法导论》、《代码大全》</li>
<li>结识朋友</li>
<li>学习Java底层知识(原谅不能量化)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC拦截规则]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/01/springmvc-filter/</url>
      <content type="html"><![CDATA[<p>在Spring MVC中，需要配置Mapping规则。</p>
<a id="more"></a>
<h4 id="拦截-do、-htm"><a href="#拦截-do、-htm" class="headerlink" title="拦截.do、.htm"></a>拦截<em>.do、</em>.htm</h4><p>这是最传统的方式，最简单也最实用。不会导致静态文件（jpg,js,css）被拦截。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dolphin<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="拦截"><a href="#拦截" class="headerlink" title="拦截/"></a>拦截/</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dolphin<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以实现现在很流行的REST风格。很多互联网类型的应用很喜欢这种风格的URL。</p>
<p>弊端：会导致静态文件（jpg,js,css）被拦截后不能正常显示。想实现REST风格，事情就是麻烦一些。后面有解决办法还算简单。</p>
<h4 id="拦截-1"><a href="#拦截-1" class="headerlink" title="拦截/*"></a>拦截/*</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dolphin<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这是一个错误的方式，请求可以通过DispatcherServlet走到Action中，但是返回的内容，如返回的jsp还会再次被拦截，这样导致404错误，即访问不到jsp，也无法访问到html静态页面。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spring-step-by-step（三）-权限管理]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/29/spring-step-by-step-privillege/</url>
      <content type="html"><![CDATA[<h4 id="配置过滤器"><a href="#配置过滤器" class="headerlink" title="配置过滤器"></a>配置过滤器</h4><p>为了在项目中使用Spring Security控制权限，在项目的web.xml文件中，添加过滤器，就可以控制对这个项目的每个请求了。</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Spring-Security数据库表"><a href="#Spring-Security数据库表" class="headerlink" title="Spring Security数据库表"></a>Spring Security数据库表</h4><p>Spring Security默认情况下需要两张表，用户表和权限表。以下是mysql中的建表语句：</p>
<p><a href="http://www.mossle.com:8080/docs/auth/html/ch001-helloworld.html" target="_blank" rel="external">一个简单的HelloWorld</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java单元测试]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/29/java-unit-test/</url>
      <content type="html"><![CDATA[<p>在Intellij Idea中按下快捷键:<code>Ctrl + Alt + T(Test)</code>，弹出如下界面，选择需要创建测试的方法。</p>
<a id="more"></a>

<p>选择完毕后会自动生成一个测试类，编写相应的测试代码即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jiangxiaoqiang on 2016/11/29.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VehicleMessageHandlerTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseAlarm</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        VehicleMessageHandler vehicleMessageHandler = <span class="keyword">new</span> VehicleMessageHandler();</div><div class="line">        String result = vehicleMessageHandler.parseAlarm(<span class="number">1232131</span>);</div><div class="line">        System.out.print(result);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在代码编辑器中右键，选择<code>Debug ‘parseAlarm’</code>菜单即可进行单元测试。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sonarcube代码优化]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/28/sonarcube/</url>
      <content type="html"><![CDATA[<h4 id="Generic-exceptions-should-never-be-thrown"><a href="#Generic-exceptions-should-never-be-thrown" class="headerlink" title="Generic exceptions should never be thrown"></a>Generic exceptions should never be thrown</h4><p>Using such generic exceptions as Error, RuntimeException, Throwable, and Exception prevents calling methods from handling true, system-generated exceptions differently than application-generated errors.</p>
<a id="more"></a>
<p>不应该写成如下方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(String bar)</span> <span class="keyword">throws</span> Throwable </span>&#123;  <span class="comment">// Noncompliant</span></div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"My Message"</span>);     <span class="comment">// Noncompliant</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>应该写成如下方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(String bar)</span> </span>&#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> MyOwnRuntimeException(<span class="string">"My Message"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Instance-methods-should-not-write-to-“static”-fields"><a href="#Instance-methods-should-not-write-to-“static”-fields" class="headerlink" title="Instance methods should not write to “static” fields"></a>Instance methods should not write to “static” fields</h4><p>实例化方法不写静态字段。</p>
<p>优化前：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">     SpringApplicationContextHolder.context = context;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优化后：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setApplicationContextImpl</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">    SpringApplicationContextHolder.context = context;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">    setApplicationContextImpl(context);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Neither-“Math-abs”-nor-negation-should-be-used-on-numbers-that-could-be-“MIN-VALUE”"><a href="#Neither-“Math-abs”-nor-negation-should-be-used-on-numbers-that-could-be-“MIN-VALUE”" class="headerlink" title="Neither “Math.abs” nor negation should be used on numbers that could be “MIN_VALUE”"></a>Neither “Math.abs” nor negation should be used on numbers that could be “MIN_VALUE”</h4><p>Math.abs(Integer.MIN_VALUE)的值还是其本身。通过查阅Java的API文档，我们看到对abs(int a)运算，“如果参数等于 Integer.MIN_VALUE 的值（即能够表示的最小负 int 值），那么结果与该值相同且为负。</p>
<p>优化前：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> newlineId = Math.abs(randomPointId.replaceAll(<span class="string">"-"</span>, <span class="string">""</span>).hashCode());</div></pre></td></tr></table></figure>
<p>优化后：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String hashedSourceId = sourceId.replaceAll(<span class="string">"-"</span>, <span class="string">""</span>);</div><div class="line"><span class="keyword">if</span> (hashedSourceId.hashCode() != Integer.MIN_VALUE) &#123;</div><div class="line">    Integer hashedId = Math.abs(hashedSourceId.hashCode());</div><div class="line">    hashedIds.add(hashedId.toString());</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    hashedIds.add(String.valueOf(Integer.MAX_VALUE));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[推荐书《代码大全》(Code Complete)]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/27/code-complete/</url>
      <content type="html"><![CDATA[<p>今天晚上下班时，朋友跟我讲：应该尽量使用局部变量，避免使用全局变量。</p>
<p>我说：这是编程常识啊，怎么还不知道呢。在心里暗暗佩服自己，这个B装的真的是完美，完全找不到任何破绽。</p>
<p>闲言少叙，如果想到知道更多关于编程的经验分享，那么我推荐你阅读《代码大全》(Code Complete)。</p>
<a id="more"></a>
<img src="/2016/11/27/code-complete/code-complete.jpg" alt="封面" title="封面">
<p>一开始是由于好奇，什么书吹的这么神奇？等到阅读后，发现再多的溢美之词也不足以形容。</p>
<p>是自己真的阅读过才在这里鼓吹，开始还以为是实现各种功能的各种代码片段组成的一本书籍。心里暗自庆幸，这下拷贝更便捷了。但是阅读之后才知道，它是另一种境界了，代码片段只是表面招式而已，而这本书里所总结的经验和概括的方法论，是帮助你修炼内力。不论你是做Android开发，前端开发、后端开发，Java、C、C++，都可以从中获得灵感。</p>
<p>阅读此书后，你会知道什么代码是优秀的代码，什么样的写法是不太合适的。他是编程通用的方法论，不会跟你争论哪门语言是最好的语言，括号是不是应该换行。即使工作了十几年的老程序员，当你阅读他的代码时，也不会有膜拜的感觉。因为你可以看出来哪些地方写的好，哪些地方有待改进的空间。并不代表他的水平有问题。</p>
<p>里面还有一段关于注释的讨论，对于平时的代码是否要需要注释，会有更加深入的理解，非常经典。</p>
<p>由于此书实在是爱不释手，中文英文版本都买了。推荐你也一定要阅读。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面试经历-重庆]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/26/interview-experience/</url>
      <content type="html"><![CDATA[<p>最近有换工作的打算，把面试经历分享出来，希望可以给求职的朋友一个参考。工作就像婚姻，是一个双向选择的过程，不找最好的，要找最适合自己的。</p>
<h4 id="重庆市宽景网络技术有限公司"><a href="#重庆市宽景网络技术有限公司" class="headerlink" title="重庆市宽景网络技术有限公司"></a>重庆市宽景网络技术有限公司</h4><p>公司地址在渝北区龙溪街道金山路18号中渝都会首站4幢12-5，嘉州路站下车3B出口步行500米即到。交通还是蛮方便的。这幢大厦是居民楼，但是大堂看起来又有点写字楼的味道(商住两用)，富丽堂皇，有点高端。</p>
<p>进去后，由于早先已到了另一位面试者，等待了十几分钟左右。面试时，给看了一个后台相关的网页，大概问了一下做这样一个网页需要多长时间。是否熟悉Spring Boot，是否有自己的脚手架(开发框架，具备一些基础功能，如权限等)。面试官也反复强调需要招聘的一个技术经理级别的人。同时也强调，技术不是特别复杂，就是一些简单的增删改(CRUD)即可。公司需要找一个手头能有一个带有基础功能系统，或者能够在极短时间里搭建一个简单系统的人。由于没有脚手架，做到快速开发，开箱即用。最后的面试结果是被面试官婉拒了。</p>
<a id="more"></a>
<p>大致了解了宽景网络公司做的业务和技术要求，如果对技术追求不是特别苛刻，能够乐于且擅长做CRUD的同学，是一个不错的选择。</p>
<p>官方网站：<a href="http://www.cqwv.net/" target="_blank" rel="external">这里</a></p>
<p>面试评价：6</p>
<h4 id="重庆同方融达信息科技有限公司"><a href="#重庆同方融达信息科技有限公司" class="headerlink" title="重庆同方融达信息科技有限公司"></a>重庆同方融达信息科技有限公司</h4><p>重庆同方融达信息科技有限公司系同方股份有限公司全资子公司，成立于2011年9月。面试过程大概持续了将近半个小时。两位面试官，其中一位年级稍长，年纪稍长的那位估计是领导罗，不停的发问，而且还打断说话。了解了以前做的项目的情况，问自己的优点，和缺点。优点就讲了：善于总结。缺点没有回答上来，有点套路的感觉。记得以前说的回答此类问题有固定套路的，一时想不起来了。比如什么工作必须追求完美什么的，总体思路就是把优点说成缺点。这个套路还没有玩转。本来想了解公司的业务情况的，面试官不愿意透露，也就作罢了。估计是政府项目比较多，项目和现在做的这一块还是比较匹配的。整体印象还是不错的。</p>
<p>官方网站：<a href="http://rota.thtf.com.cn/tfrdqd/tPtTemplate/syFtl" target="_blank" rel="external">这里</a></p>
<p>面试评价：6</p>
<h4 id="重庆致树网络科技有限公司"><a href="#重庆致树网络科技有限公司" class="headerlink" title="重庆致树网络科技有限公司"></a>重庆致树网络科技有限公司</h4><p>和公司的合伙人之一聊了将近2个小时，不得不说创业公司还是蛮有意思的,也非常诚恳。天，说起产品和前景来真的是停不下来阿。虽然在心里咆哮，兄弟，淡定淡定，公司还没有赚钱呢！但是表面还是表现的像：兄弟，好样的，咱这就橹起袖子干一票吧。</p>
<p>公司主要做文化类产品的直播，直播一些手工艺品的制作过程。可能会衍生到更多品类的文化产品上，想法还是蛮新奇的。</p>
<p>官方网站：无</p>
<p>面试评价：7</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis主键失效原理]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/24/redis-expire-strategy/</url>
      <content type="html"><![CDATA[<p>Redis 中的主键失效是如何实现的，即失效的主键是如何删除的？实际上，Redis 删除失效主键的方法主要有两种：</p>
<ul>
<li><p>消极方法（passive way），在主键被访问时如果发现它已经失效，那么就删除它</p>
</li>
<li><p>积极方法（active way），周期性地从设置了失效时间的主键中选择一部分失效的主键删除</p>
</li>
</ul>
<a id="more"></a>
<h4 id="消极方法-Passive-Way"><a href="#消极方法-Passive-Way" class="headerlink" title="消极方法(Passive Way)"></a>消极方法(Passive Way)</h4><p>消极方法也叫惰性删除，在大致了解了 Redis 是如何维护设置了失效时间的主键之后，我们就先来看一看 Redis 是如何实现消极地删除失效主键的。如下代码给出了一个名为 expireIfNeeded 的函数，这个函数在任何访问数据的函数中都会被调用，也就是说 Redis 在实现 GET、MGET、HGET、LRANGE 等所有涉及到读取数据的命令时都会调用它，它存在的意义就是在读取数据之前先检查一下它有没有失效，如果失效了就删除它。惰性删除也即是消极删除(Passive Way)的源代码如下所示：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">expireIfNeeded</span><span class="params">(redisDb *db, robj *key)</span> </span>&#123;</div><div class="line">    <span class="keyword">mstime_t</span> when = getExpire(db,key);</div><div class="line">    <span class="keyword">mstime_t</span> now;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (when &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">/* No expire for this key */</span></div><div class="line"></div><div class="line">    <span class="comment">/* Don't expire anything while loading. It will be done later. */</span></div><div class="line">    <span class="keyword">if</span> (server.loading) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* If we are in the context of a Lua script, we claim that time is</span></div><div class="line">     * blocked to when the Lua script started. This way a key can expire</div><div class="line">     * only the first time it is accessed and not in the middle of the</div><div class="line">     * script execution, making propagation to slaves / AOF consistent.</div><div class="line">     * See issue #1525 on Github for more information. */</div><div class="line">    now = server.lua_caller ? server.lua_time_start : mstime();</div><div class="line"></div><div class="line">    <span class="comment">/* If we are running in the context of a slave, return ASAP:</span></div><div class="line">     * the slave key expiration is controlled by the master that will</div><div class="line">     * send us synthesized DEL operations for expired keys.</div><div class="line">     *</div><div class="line">     * Still we try to return the right information to the caller,</div><div class="line">     * that is, 0 if we think the key should be still valid, 1 if</div><div class="line">     * we think the key is expired at this time. */</div><div class="line">    <span class="keyword">if</span> (server.masterhost != <span class="literal">NULL</span>) <span class="keyword">return</span> now &gt; when;</div><div class="line"></div><div class="line">    <span class="comment">/* Return when this key has not expired */</span></div><div class="line">    <span class="keyword">if</span> (now &lt;= when) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* Delete the key */</span></div><div class="line">    server.stat_expiredkeys++;</div><div class="line">    propagateExpire(db,key,server.lazyfree_lazy_expire);</div><div class="line">    notifyKeyspaceEvent(NOTIFY_EXPIRED,</div><div class="line">        <span class="string">"expired"</span>,key,db-&gt;id);</div><div class="line">    <span class="keyword">return</span> server.lazyfree_lazy_expire ? dbAsyncDelete(db,key) :</div><div class="line">                                         dbSyncDelete(db,key);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="积极方法-Active-Way"><a href="#积极方法-Active-Way" class="headerlink" title="积极方法(Active Way)"></a>积极方法(Active Way)</h4><p>以上我们通过对expireIfNeeded函数的介绍了解了Redis是如何以一种消极的方式删除失效主键的，但是仅仅通过这种方式显然是不够的，因为如果某些失效的主键迟迟等不到再次访问的话，Redis就永远不会知道这些主键已经失效，也就永远也不会删除它们了，这无疑会导致内存空间的浪费。因此，Redis还准备了一招积极的删除方法，该方法利用Redis的时间事件来实现，即每隔一段时间就中断一下完成一些指定操作，其中就包括检查并删除失效主键。实现的代码在<code>expire.c</code>文件中，如下所示：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">activeExpireCycle</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">    <span class="comment">/* This function has some global state in order to continue the work</span></div><div class="line">     * incrementally across calls. */</div><div class="line">    <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> current_db = <span class="number">0</span>; <span class="comment">/* Last DB tested. */</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> timelimit_exit = <span class="number">0</span>;      <span class="comment">/* Time limit hit in previous call? */</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> last_fast_cycle = <span class="number">0</span>; <span class="comment">/* When last fast cycle ran. */</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> j, iteration = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> dbs_per_call = CRON_DBS_PER_CALL;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> start = ustime(), timelimit;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (type == ACTIVE_EXPIRE_CYCLE_FAST) &#123;</div><div class="line">        <span class="comment">/* Don't start a fast cycle if the previous cycle did not exited</span></div><div class="line">         * for time limt. Also don't repeat a fast cycle for the same period</div><div class="line">         * as the fast cycle total duration itself. */</div><div class="line">        <span class="keyword">if</span> (!timelimit_exit) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (start &lt; last_fast_cycle + ACTIVE_EXPIRE_CYCLE_FAST_DURATION*<span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">        last_fast_cycle = start;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* We usually should test CRON_DBS_PER_CALL per iteration, with</span></div><div class="line">     * two exceptions:</div><div class="line">     *</div><div class="line">     * 1) Don't test more DBs than we have.</div><div class="line">     * 2) If last time we hit the time limit, we want to scan all DBs</div><div class="line">     * in this iteration, as there is work to do in some DB and we don't want</div><div class="line">     * expired keys to use memory for too much time. */</div><div class="line">    <span class="keyword">if</span> (dbs_per_call &gt; server.dbnum || timelimit_exit)</div><div class="line">        dbs_per_call = server.dbnum;</div><div class="line"></div><div class="line">    <span class="comment">/* We can use at max ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC percentage of CPU time</span></div><div class="line">     * per iteration. Since this function gets called with a frequency of</div><div class="line">     * server.hz times per second, the following is the max amount of</div><div class="line">     * microseconds we can spend in this function. */</div><div class="line">    timelimit = <span class="number">1000000</span>*ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC/server.hz/<span class="number">100</span>;</div><div class="line">    timelimit_exit = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (timelimit &lt;= <span class="number">0</span>) timelimit = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (type == ACTIVE_EXPIRE_CYCLE_FAST)</div><div class="line">        timelimit = ACTIVE_EXPIRE_CYCLE_FAST_DURATION; <span class="comment">/* in microseconds. */</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; dbs_per_call; j++) &#123;</div><div class="line">        <span class="keyword">int</span> expired;</div><div class="line">        redisDb *db = server.db+(current_db % server.dbnum);</div><div class="line"></div><div class="line">        <span class="comment">/* Increment the DB now so we are sure if we run out of time</span></div><div class="line">         * in the current DB we'll restart from the next. This allows to</div><div class="line">         * distribute the time evenly across DBs. */</div><div class="line">        current_db++;</div><div class="line"></div><div class="line">        <span class="comment">/* Continue to expire if at the end of the cycle more than 25%</span></div><div class="line">         * of the keys were expired. */</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">long</span> num, slots;</div><div class="line">            <span class="keyword">long</span> <span class="keyword">long</span> now, ttl_sum;</div><div class="line">            <span class="keyword">int</span> ttl_samples;</div><div class="line"></div><div class="line">            <span class="comment">/* If there is nothing to expire try next DB ASAP. */</span></div><div class="line">            <span class="keyword">if</span> ((num = dictSize(db-&gt;expires)) == <span class="number">0</span>) &#123;</div><div class="line">                db-&gt;avg_ttl = <span class="number">0</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            slots = dictSlots(db-&gt;expires);</div><div class="line">            now = mstime();</div><div class="line"></div><div class="line">            <span class="comment">/* When there are less than 1% filled slots getting random</span></div><div class="line">             * keys is expensive, so stop here waiting for better times...</div><div class="line">             * The dictionary will be resized asap. */</div><div class="line">            <span class="keyword">if</span> (num &amp;&amp; slots &gt; DICT_HT_INITIAL_SIZE &amp;&amp;</div><div class="line">                (num*<span class="number">100</span>/slots &lt; <span class="number">1</span>)) <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="comment">/* The main collection cycle. Sample random keys among keys</span></div><div class="line">             * with an expire set, checking for expired ones. */</div><div class="line">            expired = <span class="number">0</span>;</div><div class="line">            ttl_sum = <span class="number">0</span>;</div><div class="line">            ttl_samples = <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (num &gt; ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP)</div><div class="line">                num = ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (num--) &#123;</div><div class="line">                dictEntry *de;</div><div class="line">                <span class="keyword">long</span> <span class="keyword">long</span> ttl;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> ((de = dictGetRandomKey(db-&gt;expires)) == <span class="literal">NULL</span>) <span class="keyword">break</span>;</div><div class="line">                ttl = dictGetSignedIntegerVal(de)-now;</div><div class="line">                <span class="keyword">if</span> (activeExpireCycleTryExpire(db,de,now)) expired++;</div><div class="line">                <span class="keyword">if</span> (ttl &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">/* We want the average TTL of keys yet not expired. */</span></div><div class="line">                    ttl_sum += ttl;</div><div class="line">                    ttl_samples++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">/* Update the average TTL stats for this database. */</span></div><div class="line">            <span class="keyword">if</span> (ttl_samples) &#123;</div><div class="line">                <span class="keyword">long</span> <span class="keyword">long</span> avg_ttl = ttl_sum/ttl_samples;</div><div class="line"></div><div class="line">                <span class="comment">/* Do a simple running average with a few samples.</span></div><div class="line">                 * We just use the current estimate with a weight of 2%</div><div class="line">                 * and the previous estimate with a weight of 98%. */</div><div class="line">                <span class="keyword">if</span> (db-&gt;avg_ttl == <span class="number">0</span>) db-&gt;avg_ttl = avg_ttl;</div><div class="line">                db-&gt;avg_ttl = (db-&gt;avg_ttl/<span class="number">50</span>)*<span class="number">49</span> + (avg_ttl/<span class="number">50</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">/* We can't block forever here even if there are many keys to</span></div><div class="line">             * expire. So after a given amount of milliseconds return to the</div><div class="line">             * caller waiting for the other active expire cycle. */</div><div class="line">            iteration++;</div><div class="line">            <span class="keyword">if</span> ((iteration &amp; <span class="number">0xf</span>) == <span class="number">0</span>) &#123; <span class="comment">/* check once every 16 iterations. */</span></div><div class="line">                <span class="keyword">long</span> <span class="keyword">long</span> elapsed = ustime()-start;</div><div class="line"></div><div class="line">                latencyAddSampleIfNeeded(<span class="string">"expire-cycle"</span>,elapsed/<span class="number">1000</span>);</div><div class="line">                <span class="keyword">if</span> (elapsed &gt; timelimit) timelimit_exit = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (timelimit_exit) <span class="keyword">return</span>;</div><div class="line">            <span class="comment">/* We don't repeat the cycle if there are less than 25% of keys</span></div><div class="line">             * found expired in the current DB. */</div><div class="line">        &#125; <span class="keyword">while</span> (expired &gt; ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP/<span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://redis.io/commands/expire" target="_blank" rel="external">EXPIRE key seconds</a></p>
<p><a href="http://www.voidcn.com/blog/wuliusir/article/p-6001792.html" target="_blank" rel="external">redis学习笔记——Redis过期键的删除策略</a></p>
<p><a href="https://github.com/antirez/redis" target="_blank" rel="external">redis github</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring中单用户登录]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/23/single-user-login/</url>
      <content type="html"><![CDATA[<p>在<code>web.xml</code>文件的配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></div><div class="line">        org.springframework.security.web.session.HttpSessionEventPublisher</div><div class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>单用户登录，当其他用户登录时，自动退出，在<code>Spring-Security.xml</code>中作如下配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置SpringSecurity的http安全服务 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">sec:session-management</span> <span class="attr">invalid-session-url</span>=<span class="string">"/login?type=expired"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 单用户登陆  --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 仅配置max-sessions="1",则第二次登录会让第一次登录失效。 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 同时配置max-sessions="1" error-if-maximum-exceeded="true"，则可以防止第二次登录--&gt;</span></div><div class="line">    <span class="comment">&lt;!-- max-sessions="1" 其中1表示一个帐号可同时登录的次数  --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">sec:concurrency-control</span> <span class="attr">max-sessions</span>=<span class="string">"1"</span> <span class="attr">error-if-maximum-exceeded</span>=<span class="string">"false"</span> <span class="attr">expired-url</span>=<span class="string">"/login?type=expired"</span></span></div><div class="line">    /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">sec:session-management</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在标签中加入concurrency-control配置，设置max-sessions=1。当另一个用户登录之后，当前用户操作时会自动跳转到登录页面。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Google查找资料]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/20/paper-searching/</url>
      <content type="html"><![CDATA[<p>今天需要了解关于<strong>静脉可视化技术的发展</strong>状况。查找资料的工作就由我来。首先明确中文关键字是：<strong>静脉可视化</strong>，英文关键字是：<strong>Intravenous visualization</strong>。</p>
<a id="more"></a>
<h4 id="根据文件类型搜索"><a href="#根据文件类型搜索" class="headerlink" title="根据文件类型搜索"></a>根据文件类型搜索</h4><p>搜索所有关于静脉可视化的doc文档，在Google中输入如下查询关键字。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">静脉 可视化  filetype:pdf</div></pre></td></tr></table></figure>
<p>总共有3600个符合条件的结果。</p>
<img src="/2016/11/20/paper-searching/searching-by-filetype.jpg" alt="Google根据文件类型查找" title="Google根据文件类型查找">
<p>搜索所有关于静脉可视化的pdf文档。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">静脉 可视化  filetype:doc</div></pre></td></tr></table></figure>
<p>仿佛没有什么值得挖掘的内容，有一篇《静脉可视化装置减少静脉被重复扎针的痛苦 - 后花园网文》勉强符合要求。此时可以精确搜索，全字匹配，缩小搜索范围。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;静脉可视化&quot; filetype:pdf</div></pre></td></tr></table></figure>
<p>其中双引号表示精确匹配，共出来有3条结果，都不是想要的。看来不应该那么学术化，学术资料都被某一帮人锁起来了，必须要给钱才能看，个人认为是非常不合理的。此时直接放弃学术资料。直接在搜索框里输入如下关键字：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">静脉可视化</div></pre></td></tr></table></figure>
<p>共有58500个结果，如下图所示。这些才是想要的结果。</p>
<img src="/2016/11/20/paper-searching/simple-search.jpg" alt="Google简单搜索" title="Google简单搜索">
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HBase重复数据问题解决思路]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/19/hbase-dulplicate-data/</url>
      <content type="html"><![CDATA[<p>解决思路1可以设计消息主键，每次插入数据时，查询判断此消息是否已经写入，可以排除重复写入数据问题。但是此种手段需要查询HBase，由于写入并发量相对较高&gt;1000条/s。会影响写入速度。由于此时有单点的Redis,由于数据到达的时间相隔不会太长，可以考虑将数据持久化到Redis中，插入时，到Redis中查询，Redis中查询复杂度为常数，基本可以忽略查询对性能的影响。判断是否已经写入。而写入到Redis中的数据可以设置过期时间，可以自动清除。</p>
<a id="more"></a>
<p>采用此种方式，需要考虑，新的消费者不能消费数据from beginning。如果新消费者从头开始消费数据，此时Redis缓存已经清除，也会重复写入数据。需要在写入时作相应判断，超过Redis缓存到达的数据不用写入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">positionInfoHandler</span><span class="params">(KafkaRecievedLocationMessage&lt;KafkaRecievedLocationMessageBody&gt; kafkaRecievedLocationMessage, String groupId)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (groupId != <span class="keyword">null</span> &amp;&amp; groupId.equals(PublicVariable.HBASE_GROUPID)) &#123;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 将最近的位置数据缓存到Redis中</div><div class="line">         * 判断重复数据查询Redis数据库</div><div class="line">         * Redis的Key设计采用topic+消息类型+时间来标志消息的唯一性</div><div class="line">         * 如果消息在Redis存在，代表已经写入，将忽略</div><div class="line">         * 后期可以考虑添加事务</div><div class="line">         *</div><div class="line">         */</div><div class="line">        String gpsTime = String.valueOf(kafkaRecievedLocationMessage.getData().getMsgBody().getGps_time());</div><div class="line">        String positionKey = kafkaRecievedLocationMessage.getDesc().getTopic() + <span class="string">"-"</span> + kafkaRecievedLocationMessage.getDesc().getMsgID() + <span class="string">"-"</span> + gpsTime;</div><div class="line">        String persistStatus = RedisHelper.get(positionKey, PublicVariable.REDIS_DEFAULT_DATABASE);</div><div class="line">        <span class="keyword">if</span> (StringUtils.isBlank(persistStatus)) &#123;</div><div class="line">            <span class="comment">/**</span></div><div class="line">             * 缓存的位置数据将在12小时后过期</div><div class="line">             * 只有第一次设置会成功</div><div class="line">             * Redis本身是原子操作</div><div class="line">             */</div><div class="line">            String result = RedisHelper.setValueNx(positionKey, <span class="string">"1"</span>, <span class="number">2592000</span>, PublicVariable.REDIS_DEFAULT_DATABASE);</div><div class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span> &amp;&amp; result.equals(<span class="string">"OK"</span>)) &#123;</div><div class="line">            	<span class="comment">//保存数据</span></div><div class="line">                persistOilImpl(kafkaRecievedLocationMessage, groupId);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置Redis的Key，方法setValueNx，如果Key设置成功会返回OK，如果设置失败则返回null：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">EX seconds -- Set the specified expire time, in seconds.</div><div class="line">PX milliseconds -- Set the specified expire time, in milliseconds.</div><div class="line">NX -- Only set the key if it does not already exist.</div><div class="line">XX -- Only set the key if it already exist.</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置数据</div><div class="line"> * 如果已经存在Key</div><div class="line"> * 键已经存在，则设置失败</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> key     //key</div><div class="line"> * <span class="doctag">@param</span> value   //值</div><div class="line"> * <span class="doctag">@param</span> timeOut //过期时间</div><div class="line"> * <span class="doctag">@param</span> db      //数据库序号</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">setValueNx</span><span class="params">(String key, String value, Integer timeOut, Integer db)</span> </span>&#123;</div><div class="line">    Jedis jredis = <span class="keyword">null</span>;</div><div class="line">    String result = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        JedisPool poolItem = pools.get(db);</div><div class="line">        jredis = poolItem.getResource();</div><div class="line">        <span class="keyword">if</span> (timeOut &gt; <span class="number">0</span>) &#123;</div><div class="line">            jredis.expire(key, timeOut);</div><div class="line">        &#125;</div><div class="line">        result = jredis.set(key, value, <span class="string">"nx"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        log.error(<span class="string">"set value encount an error"</span>, e);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (jredis != <span class="keyword">null</span>) &#123;</div><div class="line">            jredis.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://redis.io/commands/SET" target="_blank" rel="external">SET key value [EX seconds] [PX milliseconds] [NX|XX]</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[curl使用]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/19/curl-using/</url>
      <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>curl is a tool to transfer data from or to a server, using one of the supported protocols (DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET and TFTP). The command is designed to work without user interaction.</p>
<p>curl offers a busload of useful tricks like proxy support, user authentication, FTP upload, HTTP post, SSL connections, cookies, file transfer resume, Metalink, and more. As you will see below, the number of features will make your head spin!</p>
<a id="more"></a>
<h4 id="查看网页源码"><a href="#查看网页源码" class="headerlink" title="查看网页源码"></a>查看网页源码</h4><p>直接在curl命令后加上网址，就可以看到网页源码。我们以网址www.jiangxiaoqiang.com为例：</p>
<p>curl www.jiangxiaoqiang.com</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>301 Moved Permanently<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"white"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>301 Moved Permanently<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>nginx<span class="tag">&lt;/<span class="name">center</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[迁移解析服务]]></title>
<<<<<<< HEAD
      <url>http://jiangxiaoqiang.com/2016/11/16/migration-parse-service/</url>
      <content type="html"><![CDATA[<p>迁移解析服务是将服务在不同主机上部署。</p>
<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>在解析服务器上，使用如下命令启动Tomcat:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /opt/tomcat/bin</div><div class="line">./catalina.sh start</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>查看输出日志，检查服务是否正常启动：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /opt/tomcat/logs</div><div class="line">tail <span class="_">-f</span> catalina.out</div></pre></td></tr></table></figure>
<h4 id="配置映射主机"><a href="#配置映射主机" class="headerlink" title="配置映射主机"></a>配置映射主机</h4><p>使用如下命令打开hosts文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/hosts</div></pre></td></tr></table></figure>
<p>添加主机映射。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">192.168.24.195 hostname1</div><div class="line">192.168.24.226 hostname2</div></pre></td></tr></table></figure>
<p>添加主机映射之后，从新启动解析服务即可，不必重新启动计算机。</p>
<h4 id="验证迁移"><a href="#验证迁移" class="headerlink" title="验证迁移"></a>验证迁移</h4><p>部署完毕后一定要验证，因为在解析服务器上日志打印OK并不代表数据成功写入Kafka集群中，所以验证最后验证迁移是否成功，在Kafka服务器中，切换到Kafka的目录：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/hdp/2.4.3.0-227/kafka/bin</div></pre></td></tr></table></figure>
<p>使用如下命令查看迁移是否成功：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./kafka-console-consumer.sh --zookeeper localhost:2181 --topic 0720688</div></pre></td></tr></table></figure>
<p>其中，0720688是需要消费的主题。启动解析服务后，将解析服务Tomcat日志中写入的主题拷贝进命令行中启动消费者，<strong>如果能够成功消费到数据</strong>，代表迁移成功。否则，迁移失败。</p>
]]></content>
=======
      <url>%2F2016%2F11%2F16%2Fmigration-parse-service%2F</url>
      <content type="text"><![CDATA[迁移解析服务是将服务在不同主机上部署。 启动服务在解析服务器上，使用如下命令启动Tomcat: 12cd /opt/tomcat/bin./catalina.sh start 查看输出日志，检查服务是否正常启动： 12cd /opt/tomcat/logstail -f catalina.out 配置映射主机使用如下命令打开hosts文件： 1vim /etc/hosts 添加主机映射。 12192.168.24.195 hostname1192.168.24.226 hostname2 添加主机映射之后，从新启动解析服务即可，不必重新启动计算机。 验证迁移部署完毕后一定要验证，因为在解析服务器上日志打印OK并不代表数据成功写入Kafka集群中，所以验证最后验证迁移是否成功，在Kafka服务器中，切换到Kafka的目录： 1cd /usr/hdp/2.4.3.0-227/kafka/bin 使用如下命令查看迁移是否成功： 1./kafka-console-consumer.sh --zookeeper localhost:2181 --topic 0720688 其中，0720688是需要消费的主题。启动解析服务后，将解析服务Tomcat日志中写入的主题拷贝进命令行中启动消费者，如果能够成功消费到数据，代表迁移成功。否则，迁移失败。]]></content>
>>>>>>> 5ebd748e66ab1e6dae8df6cd825a3f977c0cd1b0
    </entry>
    
    <entry>
      <title><![CDATA[Redmine安装]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/15/redmine-install/</url>
      <content type="html"><![CDATA[<h4 id="Redmine简介"><a href="#Redmine简介" class="headerlink" title="Redmine简介"></a>Redmine简介</h4><p>Redmine 是一个网页界面的项目管理与缺陷跟踪管理系统的自由及开放源代码软件工具。它集成了项目管理所需的各项功能：日历、燃尽图和甘特图 以协助可视化表现项目与时间限制，问题跟踪和版本控制。此外，Redmine也可以同时处理多个项目。<br>Redmine 是以 Ruby on Rails 撰写的架构，它横跨多个平台与数据库，它的设计很明显是受一些类似功能软件包的Trac所影响。此外，它也是Bitnami 应用库的一部分。</p>
<a id="more"></a>
<p>安装的环境是CentOS 7.2，查看CentOS版本可以使用命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /etc/redhat-release</div></pre></td></tr></table></figure>
<p>安装前查看<a href="http://www.redmine.org/projects/redmine/wiki/RedmineInstall" target="_blank" rel="external">Redmine版本的对应关系</a>。</p>
<h4 id="安装依赖包-Install-pre-dependencies"><a href="#安装依赖包-Install-pre-dependencies" class="headerlink" title="安装依赖包(Install pre-dependencies)"></a>安装依赖包(Install pre-dependencies)</h4><p>使用如下命令安装依赖包。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install libyaml-devel zlib-devel curl-devel openssl-devel httpd-devel apr-devel apr-util-devel gcc ruby-devel gcc-c++ make postgresql-devel ImageMagick-devel sqlite-devel perl-LDAP mod_perl perl-Digest-SHA</div></pre></td></tr></table></figure>
<h4 id="安装Ruby-Install-Ruby"><a href="#安装Ruby-Install-Ruby" class="headerlink" title="安装Ruby(Install Ruby)"></a>安装Ruby(Install Ruby)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/Downloads  <span class="comment"># YOUR FOLDER OF CHOICE</span></div><div class="line">ftp ftp.ruby-lang.org</div></pre></td></tr></table></figure>
<p>如果ftp未安装，输入如下命令安装ftp。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y ftp</div></pre></td></tr></table></figure>
<p>从FTP上获取Ruby安装文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ftp&gt; Anonymous  <span class="comment"># USERLOGIN</span></div><div class="line">ftp&gt; <span class="string">'none'</span>, just hit Enter  <span class="comment"># NO PASSWORD</span></div><div class="line">ftp&gt; <span class="built_in">cd</span> /pub/ruby</div><div class="line">ftp&gt; get get ruby-1.8.7-p358.tar.gz  <span class="comment"># XXX is currently 358, as of 03/2012</span></div><div class="line">ftp&gt; <span class="built_in">bye</span></div></pre></td></tr></table></figure>
<p>也可以使用wget下载安装文件，此处采用此种方式，使用wget命令下载能够看到文件下载的进度，FTP方式等了许久没有响应，遂放弃，采用wget下载：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget ftp://ftp.ruby-lang.org/pub/ruby/ruby-1.8.7-p358.tar.gz</div></pre></td></tr></table></figure>
<p>解压安装文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar zxvf ruby-1.8.7-p358.tar.gz</div></pre></td></tr></table></figure>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ruby-1.8.7.p358</div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<p>编译Ruby源码需要GCC(GNU C Compiler)，如果编译时提示没有安装GCC，输入如下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install gcc gcc-c++ kernel-devel</div></pre></td></tr></table></figure>
<h4 id="安装Ruby-Install-Ruby-Option-2"><a href="#安装Ruby-Install-Ruby-Option-2" class="headerlink" title="安装Ruby(Install Ruby (Option 2))"></a>安装Ruby(Install Ruby (Option 2))</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install ruby</div></pre></td></tr></table></figure>
<p>检查安装是否成功：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -v</div></pre></td></tr></table></figure>
<h4 id="安装RubyGems-1-4-2"><a href="#安装RubyGems-1-4-2" class="headerlink" title="安装RubyGems 1.4.2"></a>安装RubyGems 1.4.2</h4><p>RubyGems是一个方便而强大的Ruby程序包管理器(RubyGems is a package management framework for Ruby. )，Ruby的第三方插件是用gem方式来管理，非常容易发布和共享，一个简单的命令就可以安装上第三方的扩展库。特点：能远程安装包，包之间依赖关系的管理，简单可靠的卸载，查询机制，能查询本地和远程服务器的包信息，能保持一个包的不同版本，基于Web的查看接口，能查看你安装的gem的信息。更换gem源为Ruby中国的源。默认的官方源因为网络问题速度慢.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#删除官方源</span></div><div class="line">gem sources --remove https://rubygems.org/</div><div class="line"><span class="comment">#添加Ruby中国源，添加源的时间比较久</span></div><div class="line"><span class="comment">#没有进度提示，所以需要耐心等待</span></div><div class="line"><span class="comment">#大概在10几分钟左右</span></div><div class="line">gem sources --add https://gems.ruby-china.org/</div><div class="line"><span class="comment">#查询gem源记录</span></div><div class="line">gem sources –l</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget http://production.cf.rubygems.org/rubygems/rubygems-1.4.2.tgz</div><div class="line">tar zxvf rubygems-1.4.2.tgz</div><div class="line"><span class="built_in">cd</span> rubygems-1.4.2</div><div class="line">ruby setup.rb</div><div class="line">gem -v</div></pre></td></tr></table></figure>
<h4 id="安装Ruby-on-Rails"><a href="#安装Ruby-on-Rails" class="headerlink" title="安装Ruby on Rails"></a>安装Ruby on Rails</h4><p>安装Rails 4.2版本。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install rails -v=4.2</div></pre></td></tr></table></figure>
<p>提示错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ERROR:  Error installing rails:</div><div class="line">        ERROR: Failed to build gem native extension.</div><div class="line"></div><div class="line">    /usr/bin/ruby extconf.rb</div><div class="line">mkmf.rb can&apos;t find header files for ruby at /usr/share/include/ruby.h</div></pre></td></tr></table></figure>
<p>输入如下命令即可解决：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install gcc mysql-devel ruby-devel rubygems</div></pre></td></tr></table></figure>
<p>安装完毕后输入如下命令查看版本。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rails -v</div></pre></td></tr></table></figure>
<h4 id="安装Redmine"><a href="#安装Redmine" class="headerlink" title="安装Redmine"></a>安装Redmine</h4><p>下载安装包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://www.redmine.org/releases/redmine-3.3.1.tar.gz</div></pre></td></tr></table></figure>
<p>解压缩：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar zxvf redmine-3.3.1.tar.gz</div></pre></td></tr></table></figure>
<h4 id="数据库配置-Link-Redmine-to-the-Database"><a href="#数据库配置-Link-Redmine-to-the-Database" class="headerlink" title="数据库配置(Link Redmine to the Database)"></a>数据库配置(Link Redmine to the Database)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#登录数据库</span></div><div class="line">mysql -u root -p</div><div class="line"><span class="comment">#重置密码</span></div><div class="line">alter user root@localhost identified by <span class="string">'$zwkj123456ZWKJ'</span>;</div><div class="line"><span class="comment">#创建数据库</span></div><div class="line">create database redmine character <span class="built_in">set</span> utf8;</div><div class="line"><span class="comment">#创建用户</span></div><div class="line">create user <span class="string">'redmine'</span>@<span class="string">'localhost'</span> identified by <span class="string">'$zwkj123456ZWKJ'</span>;</div><div class="line"><span class="comment">#添加权限</span></div><div class="line">grant all privileges on redmine.* to <span class="string">'redmine'</span>@<span class="string">'localhost'</span>;</div></pre></td></tr></table></figure>
<h5 id="Configure-database-yml"><a href="#Configure-database-yml" class="headerlink" title="Configure database.yml"></a>Configure database.yml</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var/www/redmine/config</div><div class="line">cp database.yml.example database.yml</div><div class="line">nano database.yml</div></pre></td></tr></table></figure>
<h4 id="Rails配置-Rails-Settings"><a href="#Rails配置-Rails-Settings" class="headerlink" title="Rails配置(Rails Settings)"></a>Rails配置(Rails Settings)</h4><p>安装bundler：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install bundler --verbose</div></pre></td></tr></table></figure>
<p>安装依赖：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#切换到redmine目录</span></div><div class="line"><span class="comment">#redmine目录下有安装时需要的配置文件</span></div><div class="line"><span class="comment">#所以需要切换到此目录下运行bundle命令</span></div><div class="line"><span class="built_in">cd</span> /var/www/redmine</div><div class="line">bundle install</div></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">[root@localhost redmine]<span class="comment"># bundle install</span></div><div class="line">Don<span class="string">'t run Bundler as root. Bundler can ask for sudo if it is needed, and installing your bundle as root will break this</span></div><div class="line">application for all non-root users on this machine.</div><div class="line">/usr/share/gems/gems/psych-2.0.0/lib/psych.rb:98: warning: already initialized constant Psych::VERSION</div><div class="line">/usr/share/ruby/psych.rb:98: warning: previous definition of VERSION was here</div><div class="line">/usr/share/gems/gems/psych-2.0.0/lib/psych.rb:101: warning: already initialized constant Psych::LIBYAML_VERSION</div><div class="line">/usr/share/ruby/psych.rb:101: warning: previous definition of LIBYAML_VERSION was here</div><div class="line">Fetching gem metadata from https://rubygems.org/..........</div><div class="line">Fetching version metadata from https://rubygems.org/..</div><div class="line">Fetching dependency metadata from https://rubygems.org/.</div><div class="line">Resolving dependencies...</div><div class="line">Using rake 11.3.0</div><div class="line">Using i18n 0.7.0</div><div class="line">Installing json 1.8.3 with native extensions</div><div class="line">Using minitest 5.9.1</div><div class="line">Using thread_safe 0.3.5</div><div class="line">Using builder 3.2.2</div><div class="line">Using erubis 2.7.0</div><div class="line">Using mini_portile2 2.1.0</div><div class="line">Using rack 1.6.5</div><div class="line">Using mime-types-data 3.2016.0521</div><div class="line">Using arel 6.0.3</div><div class="line">Using public_suffix 2.0.4</div><div class="line">Using bundler 1.13.6</div><div class="line">Installing ffi 1.9.14 with native extensions</div><div class="line">Using coderay 1.1.1</div><div class="line">Using concurrent-ruby 1.0.2</div><div class="line">Using docile 1.1.5</div><div class="line">Using htmlentities 4.3.1</div><div class="line">Using thor 0.19.1</div><div class="line">Using metaclass 0.0.4</div><div class="line">Using mimemagic 0.3.2</div><div class="line">Using multi_json 1.12.1</div><div class="line">Installing mysql2 0.3.21 with native extensions</div><div class="line">Using net-ldap 0.12.1</div><div class="line">Using ruby-openid 2.3.0</div><div class="line">Using rbpdf-font 1.19.0</div><div class="line">Installing rdoc 5.0.0</div><div class="line">Installing redcarpet 3.3.4 with native extensions</div><div class="line">Using request_store 1.0.5</div><div class="line">Installing rmagick 2.16.0 with native extensions</div><div class="line">Using rubyzip 1.2.0</div><div class="line">Using websocket 1.2.3</div><div class="line">Using simplecov-html 0.9.0</div><div class="line">Using yard 0.9.5</div><div class="line">Using tzinfo 1.2.2</div><div class="line">Using nokogiri 1.6.8.1</div><div class="line">Using rack-test 0.6.3</div><div class="line">Using mime-types 3.1</div><div class="line">Installing addressable 2.5.0</div><div class="line">Installing childprocess 0.5.9</div><div class="line">Using sprockets 3.7.0</div><div class="line">Installing mocha 1.2.1</div><div class="line">Installing rack-openid 1.4.2</div><div class="line">Installing rbpdf 1.19.0</div><div class="line">Installing simplecov 0.9.2</div><div class="line">Installing activesupport 4.2.7.1</div><div class="line">Using loofah 2.0.3</div><div class="line">Installing xpath 2.0.0</div><div class="line">Using mail 2.6.4</div><div class="line">Installing css_parser 1.4.6</div><div class="line">Installing selenium-webdriver 3.0.1</div><div class="line">Using rails-deprecated_sanitizer 1.0.3</div><div class="line">Using globalid 0.3.7</div><div class="line">Installing activemodel 4.2.7.1</div><div class="line">Using rails-html-sanitizer 1.0.3</div><div class="line">Installing capybara 2.10.1</div><div class="line">Installing roadie 3.2.0</div><div class="line">Using rails-dom-testing 1.0.7</div><div class="line">Installing activejob 4.2.7.1</div><div class="line">Installing activerecord 4.2.7.1</div><div class="line">Installing protected_attributes 1.1.3</div><div class="line">Installing actionview 4.2.7.1</div><div class="line">Installing actionpack 4.2.7.1</div><div class="line">Installing actionmailer 4.2.7.1</div><div class="line">Installing actionpack-action_caching 1.1.1</div><div class="line">Installing actionpack-xml_parser 1.0.2</div><div class="line">Installing railties 4.2.7.1</div><div class="line">Using sprockets-rails 3.2.0</div><div class="line">Installing jquery-rails 3.1.4</div><div class="line">Installing roadie-rails 1.1.1</div><div class="line">Installing rails 4.2.7.1</div><div class="line">Bundle complete! 31 Gemfile dependencies, 71 gems now installed.</div><div class="line">Use `bundle show [gemname]` to see where a bundled gem is installed.</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装依赖软件</span></div><div class="line">gem install bundler</div></pre></td></tr></table></figure>
<p>初始化redmine数据库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rake db:migrate RAILS_ENV=production</div><div class="line">rake redmine:plugins:migrate RAILS_ENV=production</div><div class="line">rake tmp:cache:clear</div><div class="line">rake tmp:sessions:clear</div></pre></td></tr></table></figure>
<h4 id="启动Redmine"><a href="#启动Redmine" class="headerlink" title="启动Redmine"></a>启动Redmine</h4><p>启动Redmine：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#查找rails安装目录</span></div><div class="line">whereis rails</div><div class="line"><span class="comment">#切换到redmine目录下(此步骤不可缺)</span></div><div class="line"><span class="built_in">cd</span> /var/www/redmine</div><div class="line"><span class="comment">#启动redmine</span></div><div class="line">ruby /usr/<span class="built_in">local</span>/bin/rails server webrick <span class="_">-e</span> production –d</div><div class="line"></div><div class="line">bundle <span class="built_in">exec</span> rake assets:precompile RAILS_ENV=production</div></pre></td></tr></table></figure>
<h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><p>访问地址<code>http://localhost:3000</code>时提示错误：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Missing `secret_token` and `secret_key_base` <span class="keyword">for</span> <span class="string">'production'</span> environment, <span class="built_in">set</span> these values <span class="keyword">in</span> `config/secrets.yml`</div></pre></td></tr></table></figure>
<p>Rails的安全机制需要一个秘钥。在Rails 4.x版本的时候, 秘钥的设置在<code>RAILS_ROOT/config/secrets.yml</code>。在非生产环境下, 秘钥都是’明文’, ‘硬编码’, 写在secrets.yml里面的。这种方式会由于源代码的泄露, 造成安全问题, 所以这种方式存在安全隐患。所以Rails要求在生产环境下, 通过操作系统的环境变量来设置秘钥, 这样相对比较稳妥。</p>
<p>这里可以采取2种方法:</p>
<p>　　1. 自己动手, 利用linux系统的机制来设置环境变量 SECRET_KEY_BASE = XXX</p>
<p>　　2. 使用GEM dotenv-deployment帮你设置, 具体机制和方法1本质没区别。</p>
<p>PS: Rails产生秘钥的指令: <code>rake secret RAILS_ENV=production</code>, 会产生一个秘钥。这里我选择方法2, 利用/etc/profile.d/ 下面添加脚本的方式来设置秘钥:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#产生一个秘钥</span></div><div class="line">rake secret RAILS_ENV=production</div><div class="line"><span class="built_in">export</span> SECRET_KEY_BASE=生成的Key</div><div class="line"><span class="comment">#查看设置的Key</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$SECRET_KEY_BASE</span></div></pre></td></tr></table></figure>
<p>然后刷新你的shell,<code>echo $SECRET_KEY_BASE</code>, 输出成功，重新启动计算机。访问<code>http://localhost:3000</code>。如果无法访问，检查防火墙是否允许3000端口，或者关闭防火墙即可。如果需要在外网访问，需要绑定地址：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#参数b表示绑定(bind)</span></div><div class="line">ruby /usr/<span class="built_in">local</span>/bin/rails server webrick <span class="_">-e</span> production –d -b 192.168.24.221</div></pre></td></tr></table></figure>
<p>参考资料：</p>
<p><a href="http://www.redmine.org/projects/redmine/wiki/Redmine_on_CentOS_installation_HOWTO" target="_blank" rel="external">Redmine on CentOS installation HOWTO</a></p>
<p><a href="http://www.cnblogs.com/mahong-shaojiu-ruby/p/5707771.html" target="_blank" rel="external">rails production secret_key的设置</a></p>
<p><a href="http://muzizero.blog.51cto.com/6059241/1783563" target="_blank" rel="external">centos6.7安装redmine系统</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis使用]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/15/redis-using/</url>
      <content type="html"><![CDATA[<h4 id="过期时间"><a href="#过期时间" class="headerlink" title="过期时间"></a>过期时间</h4><p>生存时间可以通过使用 DEL 命令来删除整个 key 来移除，或者被 SET 和 GETSET 命令覆写(overwrite)。</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 设置数据（永久有效）</div><div class="line"> *</div><div class="line"> * @param key     //key</div><div class="line"> * @param value   //值</div><div class="line"> * @param db      //数据库序号</div><div class="line"> */</div><div class="line">public static void <span class="built_in">set</span>(String key, String value, Integer db) &#123;</div><div class="line">    Jedis jredis = null;</div><div class="line">    try &#123;</div><div class="line">        JedisPool poolItem = pools.get(db);</div><div class="line">        jredis = poolItem.getResource();</div><div class="line">        jredis.set(key, value);</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        log.error(<span class="string">"set value encount an error"</span>, e);</div><div class="line">    &#125; finally &#123;</div><div class="line">        <span class="keyword">if</span> (jredis != null) &#123;</div><div class="line">            jredis.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="取出包含指定规则的Key"><a href="#取出包含指定规则的Key" class="headerlink" title="取出包含指定规则的Key"></a>取出包含指定规则的Key</h4><p>从Redis中取出包含指定规则的Key的集合。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 取出包含指定key的集合</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushCacheStatusInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">    JedisPool jedisPool = RedisHelper.getRedisPool(<span class="number">0</span>);</div><div class="line">    Jedis jredis = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        jredis = jedisPool.getResource();</div><div class="line">        <span class="comment">//找到包含指定Key的集合</span></div><div class="line">        Set keys = jredis.keys(<span class="string">"*websocketsession"</span>);</div><div class="line">        Iterator iteratorKeys = keys.iterator();</div><div class="line">        <span class="keyword">while</span> (iteratorKeys.hasNext()) &#123;</div><div class="line">            String redisKey = iteratorKeys.next().toString();</div><div class="line">            String session = jredis.get(redisKey);</div><div class="line">            <span class="comment">//do something</span></div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">        log.error(<span class="string">"推送信息出错"</span>, ex);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    	<span class="keyword">if</span> (jredis != <span class="keyword">null</span>) &#123;</div><div class="line">        	jredis.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h4><p>登录Redis：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./redis-cli -h 192.168.24.252 -p 6379</div></pre></td></tr></table></figure>
<p>查看客户端数量：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.24.252:6379&gt; info clients</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[电影《恋恋风尘》(Dust in the Wind)]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/13/dust-in-the-wind/</url>
      <content type="html"><![CDATA[<p>评价一部作品，它的真实性在心里占有相当的重量。而上映于1987年《恋恋风尘》(Dust in the Wind)所讲述的故事给自己的感觉是真实的，对观众来说它是仅仅一件小事。但对当时亲身经历的主人公来说，这些都是刻骨铭心的回忆，相信许多人也会有相似的感受，那就是：初恋告吹。</p>
<p>第一次看《恋恋风尘》(Dust in the Wind)，还是在大二、大三的学生时期。当时只觉得非常新奇，电影原来可以拍的这样安静和特别。往后参加工作，反复观看，每一次观看感受都是如此相似。久远的记忆仿佛就在昨天，具有贫苦农村生活经验和当兵经历的人士观看效果更佳。整部电影没有夸张的剧情和场景，都是一个个简单的回忆按时间顺序依次展现。</p>
<a id="more"></a>
<img src="/2016/11/13/dust-in-the-wind/Dust_in_the_Wind.jpg" alt="恋恋风尘" title="恋恋风尘">
<p>电影里有2个场景给我的印象最深：</p>
<p>一次是在台北时，阿远得了气管炎，阿云专程过来看他，当阿云过来时，恒春仔已经睡下了，说明已是很晚了，看到躺在床上无力的阿远，阿云遂打了热水，用热水浸湿的帕子搭在阿远的额头上，没有对白。第二天很早时阿云去上班。注意电影并没有强调阿云整晚是如何休息的，但是从屋内摆设观众应该能够想到她整夜打盹的场景。当清晨阿远送她出门时，电影的镜头慢慢拉到阿云离去的背影。这个离去的场景，我想阿远一生都不会忘记。</p>
<p>一次是在部队时，士兵们聚在一起打台球，一群人突然在讨论7号(一个女孩子)，说是和男朋友闹翻了，才出来做(应该是皮肉生意)。谈起阿远时，说他都不出去玩一玩，跟大家显得格格不入，遂嘲讽他“坚心为君，独守我青春”，说着一起大笑起来。镜头切到阿远呕吐的镜头，我想，他是由于太过于思念阿云的缘故。不是自己，怎么能理解一个人在心中的位置，旁人是没法理解的。</p>
<p>当忙碌了一天的工作后，或者闲暇时刻，回到家打开电视看看这么一部简单轻松的电影，也不失为一种放松方式。</p>
<p>PS:优酷下面的群众的评论能发现很多细节。</p>
<p><a href="http://v.youku.com/v_show/id_XMjY2NjgwNjQ0.html?tpa=dW5pb25faWQ9MTAzMzUyXzEwMDAwMl8wMV8wMQ" target="_blank" rel="external">恋恋风尘优酷播放地址</a></p>
<p><a href="https://movie.douban.com/subject/1292330/" target="_blank" rel="external">恋恋风豆瓣介绍页面</a></p>
<p><a href="https://movie.douban.com/review/7918461/" target="_blank" rel="external">《恋恋风尘》影评</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Intellij-Idea远程调试]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/12/intellij-idea-remote-debbuging/</url>
      <content type="html"><![CDATA[<p>因为我们用的是Tomcat，所以在IDEA中点击右上角那个“Edit Configurations”按钮，然后在弹出的界面中点击左上角的加号，选择tomcat server-&gt;remote。</p>
<h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><p>要让远程服务器运行的代码支持远程调试，则启动的时候必须加上特定的JVM参数，这些参数是：</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-Xdebug -Xrunjdwp:transport=dt_socket,<span class="built_in">suspend</span>=n,server=y,address=<span class="variable">$&#123;debug_port&#125;</span></div></pre></td></tr></table></figure>
<p>其中的${debug_port}是用户自定义的，为debug端口，本例以53996端口为例。在Windows下到tomcat目录下的catalina.bat文件中，添加如下内容，设置catalina环境变量：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> CATALINA_OPTS=<span class="string">"-agentlib:jdwp=transport=dt_socket,address=53996,suspend=n,server=y"</span></div></pre></td></tr></table></figure>
<p>如果是Linux，在catalina.sh文件中中，设置catalina环境变量：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> CATALINA_OPTS=<span class="string">"-agentlib:jdwp=transport=dt_socket,address=53996,suspend=n,server=y"</span></div></pre></td></tr></table></figure>
<p>运行如下命令启动Tomcat：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Windows下启动Tomcat</span></div><div class="line">catalina.bat start</div><div class="line"></div><div class="line"><span class="comment">#Linux下启动Tomcat</span></div><div class="line">catalina.sh start</div></pre></td></tr></table></figure>
<p>使用如下命令查看是否配置成功：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Windows下用此命令查看</span></div><div class="line">netstat -ano</div><div class="line"></div><div class="line"><span class="comment">#Linux下用此命令查看</span></div><div class="line">lsof -i:53996</div></pre></td></tr></table></figure>
<p>查看是否有53996的端口处于监听状态。如下图所示：</p>

<h4 id="Intellij-Idea配置"><a href="#Intellij-Idea配置" class="headerlink" title="Intellij Idea配置"></a>Intellij Idea配置</h4><p>Intellij Idea远程调试配置如下：</p>

]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Websocket数据查看]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/12/websocket-check/</url>
      <content type="html"><![CDATA[<h4 id="FireFox中查看WebSocket"><a href="#FireFox中查看WebSocket" class="headerlink" title="FireFox中查看WebSocket"></a>FireFox中查看WebSocket</h4><p>使用FireFox查看WebSocket内容需要安装一个<a href="https://addons.mozilla.org/en-US/firefox/addon/websocket-monitor/" target="_blank" rel="external">WebSocket-Monitor</a>插件。安装完毕后在FireFox的Web控制台(Ctrl + Shift + K)中。</p>

<<<<<<< HEAD
<a id="more"></a>
<h4 id="Google-Chrome中查看WebSocket"><a href="#Google-Chrome中查看WebSocket" class="headerlink" title="Google Chrome中查看WebSocket"></a>Google Chrome中查看WebSocket</h4><p>Google Chrome自带查看模块，如下图所示。F12进入开发者页面，选择NetWork选项卡，选择WS(WebSocket)选项卡。</p>
=======
    
    <entry>
      <title><![CDATA[Spring MVC-DispatcherServlet处理请求过程]]></title>
      <url>%2F2016%2F11%2F04%2Fspringmvc-dispatcherservlet%2F</url>
      <content type="text"><![CDATA[Spring MVC基于模型-视图-控制器(Model-View-Controller,MVC)模式，它能够帮助我们建立灵活和松耦合的Web程序.Spring MVC中用户请求如下图所示： 请求发出(HTTP Resquest)一个请求携带信息进入Spring MVC程序时，第一站是Spring的DispatcherServlet(在web.xml中配置)，它是接收所有用户请求的前端控制器Servlet。DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）。然后根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain对象的形式返回；DispatcherServlet的任务是将请求转发给Spring MVC控制器(Controller)，控制器是用于处理用户请求的Spring Bean。DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。（如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler()方法） 处理器映射(Handler Mapping)一般程序中会有不止一个控制器，那么DispatcherServlet需要知道将请求发送给哪个控制器，所以DispatcherServlet将会查询处理器映射(handler mapping)来确定请求的下一站，处理器映射会根据用户请求的URL来决定是哪个控制器。提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作： HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等 数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中 控制器(Controller)DispatcherServlet选择了控制器之后，就会将请求发送给该控制器并等待控制器处理用户请求。控制器在完成了逻辑处理后，通常会返回处理结果并将这些结果在浏览器上显示，这些信息在Spring MVC中成为模型(Model)。Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。 模型以及逻辑视图名称(Model)控制器仅仅返回模型信息往往是不够的，需要对模型信息进行格式化，生成用户友好的方式如html进行显示。所以模型信息将会被发送给一个视图(View，例如jsp视图。事实上，控制器同时产生了模型以及视图名称，将这些信息发送回DispatcherServlet。 视图解析器(View Parser)DispatcherServlet收到控制器的视图名称并不直接表示某个特定的JSP，这个视图名称仅仅是个逻辑值，DispatcherServlet为了找到真正的视图，会使用视图解析器(view resolver)将视图名称匹配成一个具体的视图。根据返回的ModelAndView，选择一个适合的ViewResolver（必须是已经注册到Spring容器中的ViewResolver)返回给DispatcherServlet。 视图(View)目前为止，DispatcherServlet知道了具体由哪个视图来显示模型信息，那么它就会将模型信息交付给视图，请求的任务到这里就完成了。ViewResolver 结合Model和View，来渲染视图。 响应(HTTP Response)视图渲染模型信息并输出，该输出最后会传递给用户端，展示给用户查看。从以上步骤可以看到，Spring MVC要处理很多过程，但是大部分过程是Spring框架内部处理的，事实上，我们可以十分方便利用Spring MVC框架的编写功能强大的Web应用程序，下一章我们将搭建一个基础的Spring MVC实例程序。 原始地址： Spring MVC入门-DispatcherServlet处理请求过程]]></content>
    </entry>
>>>>>>> 5ebd748e66ab1e6dae8df6cd825a3f977c0cd1b0

<h4 id="Fiddler中查看WebSocket"><a href="#Fiddler中查看WebSocket" class="headerlink" title="Fiddler中查看WebSocket"></a>Fiddler中查看WebSocket</h4><p>在请求时选择任意WebSocket Session，即可出现WebSocket流量数据画面，不过是乱码，未找到合适的解决乱码的方案。</p>

<p>Fiddler中的WebSocket显示乱码是因为数据已经被压缩(Compressed),要查看乱码的内容，在Response中添加头信息。按下F2按钮后，即可在Response中手动添加头信息(Add Headers)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Content-Encoding: deflate</div></pre></td></tr></table></figure>
<p>添加头信息之后，点击TextView会出现黄色的Decode提示框。</p>

<p>点击之后即可看到原始的Json数据。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[grep使用]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/12/grep/</url>
      <content type="html"><![CDATA[<p>grep (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p>
<p>Unix的grep家族包括grep、egrep和fgrep。egrep和fgrep的命令只跟grep有很小不同。egrep是grep的扩展，支持更多的re元字符， fgrep就是fixed grep或fast grep，它们把所有的字母都看作单词，也就是说，正则表达式中的元字符表示回其自身的字面意义，不再特殊。linux使用GNU版本的grep。它功能更强，可以通过-G、-E、-F命令行选项来使用egrep和fgrep的功能。</p>
<a id="more"></a>
<h4 id="多个匹配模式"><a href="#多个匹配模式" class="headerlink" title="多个匹配模式"></a>多个匹配模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail <span class="_">-f</span> catalina.out | grep <span class="_">-e</span> <span class="string">"苏E22222"</span> <span class="_">-e</span> <span class="string">"服务器"</span></div></pre></td></tr></table></figure>
<p>使用此命令可以过滤catalina.out文件中包含<code>苏E22222</code><strong>且</strong>包含<code>服务器</code>的内容。使用grep匹配“与”或者“或”模式grep命令加-e参数，这一扩展允许使用扩展模式匹配。例如，要抽取城市代码为2 1 9或2 1 6，方法如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep –E <span class="string">'219|216'</span></div></pre></td></tr></table></figure>
<p>还可以为匹配的内容增加高亮的颜色。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail <span class="_">-f</span> catalina.out |grep --color=auto -E <span class="string">'topic|0194592|0720724|512|0146636|S000099'</span></div></pre></td></tr></table></figure>
<p>全局配置自动显示颜色：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim ~/.bashrc</div><div class="line"><span class="built_in">alias</span> grep=<span class="string">'grep --color'</span></div><div class="line"><span class="built_in">source</span> ~/.bashrc</div></pre></td></tr></table></figure>
<p>选出不包含512且不包含topic的行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail <span class="_">-f</span> catalina.out |grep -v -E <span class="string">'512|topic'</span></div></pre></td></tr></table></figure>
<h4 id="Grep正则表达式"><a href="#Grep正则表达式" class="headerlink" title="Grep正则表达式"></a>Grep正则表达式</h4><p>^  锚定行的开始 如：’^grep’匹配所有以grep开头的行。如下语句匹配Tomcat日志输出所有开始为2016的行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail <span class="_">-f</span> catalina.out |grep -E <span class="string">"^2016"</span></div></pre></td></tr></table></figure>
<p>过滤所有结尾为”}}”的行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail <span class="_">-f</span> catalina.out |grep -E <span class="string">"&#125;&#125;$"</span></div></pre></td></tr></table></figure>
<p>.   匹配一个非换行符的字符 如：’gr.p’匹配gr后接一个任意字符，然后是p。</p>
<p>*  匹配零个或多个先前字符 如：’ <em>grep’匹配所有一个或多个空格后紧跟grep的行。 .</em>一起用代表任意字符。</p>
<p>[] 匹配一个指定范围内的字符，如’[Gg]rep’匹配Grep和grep。</p>
<p>[^]  匹配一个不在指定范围内的字符，如：’[^A-FH-Z]rep’匹配不包含A-F和H-Z的一个字母开头，紧跟rep的行。</p>
<p>(..)  标记匹配字符，如：’(love)’，love被标记为1。</p>
<p>>  锚定单词的结束，如’grep&gt;’匹配包含以grep结尾的单词的行。</p>
<p>x{m} 连续重复字符x，m次，如：’o{5}’匹配包含连续5个o的行。</p>
<p>x{m,} 连续重复字符x,至少m次，如：’o{5,}’匹配至少连续有5个o的行。</p>
<p>x{m,n} 连续重复字符x，至少m次，不多于n次，如：’o{5,10}’匹配连续5–10个o的行。</p>
<p>w  匹配一个文字和数字字符，也就是[A-Za-z0-9]，如：’Gw*p’匹配以G后跟零个或多个文字或数字字符，然后是p。</p>
<p>W  w的反置形式，匹配一个非单词字符，如点号句号等。W*则可匹配多个。</p>
<p>b  单词锁定符，如: ‘bgrepb’只匹配grep，即只能是grep这个单词，两边均为空格。</p>
<h4 id="匹配条件附近相关内容"><a href="#匹配条件附近相关内容" class="headerlink" title="匹配条件附近相关内容"></a>匹配条件附近相关内容</h4><p>有时日志较大时，需要查看日志中央的内容，那么可以使用-C参数。参数后附加一个数，代表日志前后的行数。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat catalina.out | grep -C 500 <span class="string">'16 11 28 11 00 00'</span> | grep <span class="string">'0720738'</span></div></pre></td></tr></table></figure>
<p>以上命令查看满足日志中包含<code>16 11 28 11 00 00</code>且包含<code>0720738</code>的，前后500行的内容。如果是两个条件满足其中任意一个的话，使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat catalina.out | grep -C 500 -E <span class="string">'16 11 28 11 00 00|0720738'</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
<<<<<<< HEAD
      <title><![CDATA[地理位置纠偏]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/08/location-rectifying/</url>
      <content type="html"><![CDATA[<p>偏移的起因：天朝测绘局以国家安全为理由，用法律的形式对所有在天朝发行的地图类产品加了强制性规范，要求所有地图类产品都必须使用国家测绘局的一种加偏移的算法，对地图的真实坐标进行加偏移处理，之后才可能通过审批准许上市。因此，天朝的所有官方及商用地图的坐标都是偏移的，这种偏移属于非线性的，偏移量在300至500米不等，偏移方向也不定。这种加过偏移的地图坐标就是所谓“火星坐标”。GPS接收机本身接收卫星的信号，计算出本机所在位置的经纬度，在没有做特别处理的时候，这个经纬度是正确的。但是如果GPS支持加载地图的话，这个GPS中的地图就得受上述第一条法规的约束了，所以正式在天朝销售的行货GPS设备中的地图必须也得加偏移，处理成火星坐标。地理位置纠偏代码(处理成火星坐标)：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* Created by jiangxiaoqiang on 2016/11/7.</div><div class="line">* 适用于Google,高德体系的地图</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GpsDataTranslate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 圆周率</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> PI = Math.PI;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 地球的半径(单位:米)</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> EARTH_RADIUS = <span class="number">6378245.0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * ee: 椭球的偏心率(eccentricity of ellipsoid)</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> ECCENTRICITY_OF_ELLIPSOID = <span class="number">0.0066934216229659433</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">IsOutOfChina</span><span class="params">(<span class="keyword">double</span> latitude, <span class="keyword">double</span> longitude)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> longitude &lt; <span class="number">72.004</span> || longitude &gt; <span class="number">137.8347</span> || (latitude &lt; <span class="number">0.8293</span> || latitude &gt; <span class="number">55.8271</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">TransformLat</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> num = -<span class="number">100.0</span> + <span class="number">2.0</span> * x + <span class="number">3.0</span> * y + <span class="number">0.2</span> * y * y + <span class="number">0.1</span> * x * y + <span class="number">0.2</span> * Math.sqrt(Math.abs(x));</div><div class="line">        num += (<span class="number">20.0</span> * Math.sin(<span class="number">6.0</span> * x * PI) + <span class="number">20.0</span> * Math.sin(<span class="number">2.0</span> * x * PI)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</div><div class="line">        num += (<span class="number">20.0</span> * Math.sin(y * PI) + <span class="number">40.0</span> * Math.sin(y / <span class="number">3.0</span> * PI)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</div><div class="line">        <span class="keyword">return</span> num + (<span class="number">160.0</span> * Math.sin(y / <span class="number">12.0</span> * PI) + <span class="number">320.0</span> * Math.sin(y * PI / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">TransformLon</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> num = <span class="number">300.0</span> + x + <span class="number">2.0</span> * y + <span class="number">0.1</span> * x * x + <span class="number">0.1</span> * x * y + <span class="number">0.1</span> * Math.sqrt(Math.abs(x));</div><div class="line">        num += (<span class="number">20.0</span> * Math.sin(<span class="number">6.0</span> * x * PI) + <span class="number">20.0</span> * Math.sin(<span class="number">2.0</span> * x * PI)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</div><div class="line">        num += (<span class="number">20.0</span> * Math.sin(x * PI) + <span class="number">40.0</span> * Math.sin(x / <span class="number">3.0</span> * PI)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</div><div class="line">        <span class="keyword">return</span> num + (<span class="number">150.0</span> * Math.sin(x / <span class="number">12.0</span> * PI) + <span class="number">300.0</span> * Math.sin(x / <span class="number">30.0</span> * PI)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 地理位置纠偏</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> wgLat</div><div class="line">     * <span class="doctag">@param</span> wgLon</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span>[] transform(<span class="keyword">double</span> wgLat, <span class="keyword">double</span> wgLon) &#123;</div><div class="line">        <span class="keyword">double</span>[] latlng = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">2</span>];</div><div class="line">        <span class="keyword">if</span> (IsOutOfChina(wgLat, wgLon)) &#123;</div><div class="line">            latlng[<span class="number">0</span>] = wgLat;</div><div class="line">            latlng[<span class="number">1</span>] = wgLon;</div><div class="line">            <span class="keyword">return</span> latlng;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> dLat = TransformLat(wgLon - <span class="number">105.0</span>, wgLat - <span class="number">35.0</span>);</div><div class="line">        <span class="keyword">double</span> dLon = TransformLon(wgLon - <span class="number">105.0</span>, wgLat - <span class="number">35.0</span>);</div><div class="line">        <span class="keyword">double</span> radLat = wgLat / <span class="number">180.0</span> * PI;</div><div class="line">        <span class="keyword">double</span> magic = Math.sin(radLat);</div><div class="line">        magic = <span class="number">1</span> - ECCENTRICITY_OF_ELLIPSOID * magic * magic;</div><div class="line">        <span class="keyword">double</span> sqrtMagic = Math.sqrt(magic);</div><div class="line">        dLat = (dLat * <span class="number">180.0</span>) / ((EARTH_RADIUS * (<span class="number">1</span> - ECCENTRICITY_OF_ELLIPSOID)) / (magic * sqrtMagic) * PI);</div><div class="line">        dLon = (dLon * <span class="number">180.0</span>) / (EARTH_RADIUS / sqrtMagic * Math.cos(radLat) * PI);</div><div class="line">        latlng[<span class="number">0</span>] = (wgLat + dLat);</div><div class="line">        latlng[<span class="number">1</span>] = (wgLon + dLon);</div><div class="line">        <span class="keyword">return</span> latlng;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一对纠偏的数据组示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">原始数据：</div><div class="line">29.54163(纬度)</div><div class="line">106.508188(经度)</div><div class="line"></div><div class="line">纠偏后数据：</div><div class="line">29.538885930651567(纬度)</div><div class="line">106.5120118854562(经度)</div></pre></td></tr></table></figure>
]]></content>
=======
      <title><![CDATA[Lombok精简Java代码]]></title>
      <url>%2F2016%2F11%2F04%2Flombok%2F</url>
      <content type="text"><![CDATA[简介lombok提供了简单的注解的形式来帮助我们简化消除一些必须有但显得很臃肿的java代码,特别是相对于POJO(Plain Ordinary Java Object)。安装Lombok Plugin和引入Jar包之后方可使用。 安装安装完毕lombok插件之后，添加如下包： 12345&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.16.6&lt;/version&gt;&lt;/dependency&gt; 常用的 lombok 注解： @Data：注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法 @Setter：注解在属性上；为属性提供 setting 方法 @Getter：注解在属性上；为属性提供 getting 方法 @Log4j：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象 @NoArgsConstructor：注解在类上；为类提供一个无参的构造方法 @AllArgsConstructor：注解在类上；为类提供一个全参的构造方法 如果不使用lombok注解，代码是这样： 1234567891011121314151617181920public class Person &#123; private String id; private Logger log = Logger.getLogger(Person.class); public Person() &#123; &#125; public Person(String id) &#123; this.id = id; &#125; public String getId() &#123; return id; &#125; public void setId(String id) &#123; this.id = id; &#125;&#125; 使用lombok注解，代码是这样： 1234567@Data@Log4j@NoArgsConstructor@AllArgsConstructorpublic class Person &#123; private String id;&#125; 一旦POJO字段较多时精简的代码就很明显了，而且使用Lombok的代码更加干净、易读，添加@Data注解之后，按Ctrl + O(Outline)可以看到生成了get和set方法。 @EqualsAndHashCode@EqualsAndHashCode注解实现equals()方法和hashCode()方法。hashcode是用于散列数据的快速存取，如利用HashSet/HashMap/Hashtable类来存储数据时，都是根据存储对象的hashcode值来进行判断是否相同的。]]></content>
>>>>>>> 5ebd748e66ab1e6dae8df6cd825a3f977c0cd1b0
    </entry>
    
    <entry>
      <title><![CDATA[Redis客户端连接]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/04/redis-client-connect/</url>
      <content type="html"><![CDATA[<h4 id="Redis特点"><a href="#Redis特点" class="headerlink" title="Redis特点"></a>Redis特点</h4><ul>
<li><p>Redis 是一个 key-value 的缓存(cache)和存储(store)系统（现在我们只用它来做缓存，目前还未当作DB用，数据存放在 Cassandra 里）</p>
</li>
<li><p>支持丰富的数据结构，List 就专门用于存储列表型数据，默认按操作时间排序。Sorted Set 可以按分数排序元素，分数是一种广义概念，可以是时间或评分。其次，其丰富的数据结构为日后扩展提供了很大的方便。</p>
</li>
<li><p>提供的所有操作都是原子操作，为并发天然保驾护航。</p>
</li>
<li><p>超快的性能，见其官方性能测试《How fast is Redis?》。</p>
</li>
<li><p>拥有比较成熟的Java客户端 - Jedis，像新浪微博都是使用它作为客户端。（官方推荐的Clients）</p>
</li>
</ul>
<p>Redis运行一段时间后，出现错误，无法获得连接：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis.clients.jedis.exceptions.JedisException: Could not get a resource from the pool</div></pre></td></tr></table></figure>
<p>使用命令查看客户端数量。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D:\Program Files\Redis&gt;redis-cli.exe info clients</div></pre></td></tr></table></figure>
<p>结果如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Clients</div><div class="line">connected_clients:11</div><div class="line">client_longest_output_list:0</div><div class="line">client_biggest_input_buf:0</div><div class="line">blocked_clients:0</div></pre></td></tr></table></figure>
<h4 id="Redis客户端连接"><a href="#Redis客户端连接" class="headerlink" title="Redis客户端连接"></a>Redis客户端连接</h4><p>在修改了Redis的绑定IP后，用客户端登录需要显示的指定IP和端口：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./redis-cli -h 192.168.24.252 -p 6379</div></pre></td></tr></table></figure>
<p>h代表hostname，主机，p代表port，端口。</p>
<h4 id="Redis是否正确关闭连接"><a href="#Redis是否正确关闭连接" class="headerlink" title="Redis是否正确关闭连接"></a>Redis是否正确关闭连接</h4><p>可以看出目前的客户端已经超出了最大的客户端数量(配置的是10个)。应该是没有释放连接导致的问题。明显一个请求一次连接是很不靠谱的。这个问题发生有两方面的原因：</p>
<ul>
<li><p>未正确使用对象池的空闲队列行为（LIFO“后进先出”栈方式）</p>
</li>
<li><p>“关闭集群链接时异常导致连接泄漏”问题</p>
</li>
</ul>
<p>修改配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Dictionary&lt;Integer, JedisPool&gt; pools = <span class="keyword">new</span> Hashtable();</div><div class="line"></div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</div><div class="line">    config.setMaxTotal(<span class="number">200</span>);</div><div class="line">    config.setMaxIdle(<span class="number">50</span>);</div><div class="line">    <span class="comment">/*设置最小空闲数,在并发量不高时可以降低最小空闲数*/</span></div><div class="line">    config.setMinIdle(<span class="number">8</span>);</div><div class="line">    config.setMaxWaitMillis(<span class="number">10000</span>);</div><div class="line">    config.setTestOnBorrow(<span class="keyword">true</span>);</div><div class="line">    config.setTestOnReturn(<span class="keyword">true</span>); <span class="comment">//Idle时进行连接扫描</span></div><div class="line">    config.setTestWhileIdle(<span class="keyword">true</span>); <span class="comment">//表示idle object evitor两次扫描之间要sleep的毫秒数</span></div><div class="line">    config.setTimeBetweenEvictionRunsMillis(<span class="number">30000</span>); <span class="comment">//表示idle object evitor每次扫描的最多的对象数</span></div><div class="line">    config.setNumTestsPerEvictionRun(<span class="number">10</span>); <span class="comment">//表示一个对象至少停留在idle状态的最短时间，然后才能被idle object evitor扫描并驱逐；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义</span></div><div class="line">    config.setMinEvictableIdleTimeMillis(<span class="number">60000</span>);</div><div class="line">    <span class="comment">//循环创建16个redis数据库连接池,存放在字典里面</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        JedisPool item = <span class="keyword">new</span> JedisPool(config, <span class="string">"127.0.0.1"</span>, <span class="number">6379</span>, <span class="number">0</span>);</div><div class="line">        pools.put(i, item);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用命令<code>client-cli.exe info clients</code>查看客户端的连接数量时，一般为最小空闲连接数量与客户端数量之和。比如查看客户端连接数量为17，设置的最小空闲连接数量是8，有2个连接池，即为16，加一个当前客户端的连接，刚好17个连接。此处<code>Could not get a resource from the pool</code>错误的原因是在打开了连接之后未关闭连接，此处使用的Redis版本为3.2.100 for Windows。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 获取数据</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> key //key</div><div class="line">* <span class="doctag">@param</span> db  //数据库序号</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">(String key, Integer db)</span> </span>&#123;</div><div class="line">    JedisPool poolItem = pools.get(db);</div><div class="line">    Jedis jredis = <span class="keyword">null</span>;</div><div class="line">    String result = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        jredis = poolItem.getResource();</div><div class="line">        result = jredis.get(key);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        log.error(<span class="string">"get value error"</span>, e);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (jredis != <span class="keyword">null</span>) &#123;</div><div class="line">        	<span class="comment">/*</span></div><div class="line">            关闭Redis连接，ReturnResource方法已经标记为Deprecated</div><div class="line">            新的关闭连接的方式为直接调用close方法</div><div class="line">            */</div><div class="line">            jredis.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Redis配置是否正确绑定"><a href="#Redis配置是否正确绑定" class="headerlink" title="Redis配置是否正确绑定"></a>Redis配置是否正确绑定</h4><p>在Redis的配置文件中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#</div><div class="line"># ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</div><div class="line"># internet, binding to all the interfaces is dangerous and will expose the</div><div class="line"># instance to everybody on the internet. So by default we uncomment the</div><div class="line"># following bind directive, that will force Redis to listen only into</div><div class="line"># the IPv4 lookback interface address (this means Redis will be able to</div><div class="line"># accept connections only from clients running into the same computer it</div><div class="line"># is running).</div><div class="line">#</div><div class="line"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</div><div class="line"># JUST COMMENT THE FOLLOWING LINE.</div><div class="line"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line">bind 192.168.24.252</div></pre></td></tr></table></figure>
<p>bind的地址如果和程序中配置的地址不一致，也会提示此错误。在Linux里，如果没有指定配置文件，则会使用默认的配置文件，所以在修改了配置文件之后，启动Redis服务的时候显示的指定使用修改后的配置文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./redis-server ../redis.conf &amp;</div></pre></td></tr></table></figure>
<p>参考资料：</p>
<p><a href="http://stackoverflow.com/questions/17082163/jedis-when-to-use-returnbrokenresource" target="_blank" rel="external">Jedis - When to use returnBrokenResource()</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Intellij Idea小技巧(tips)]]></title>
<<<<<<< HEAD
      <url>http://jiangxiaoqiang.com/2016/11/03/intellij-idea-tips/</url>
      <content type="html"><![CDATA[<h4 id="键盘调整Debug窗口的大小"><a href="#键盘调整Debug窗口的大小" class="headerlink" title="键盘调整Debug窗口的大小"></a>键盘调整Debug窗口的大小</h4><p>键盘调整Debug窗口的大小快捷键是<code>Ctrl + Shift + Up/Down</code>，注意一定要定位到Debug视图，也就是Debug视图但是当前窗口的活跃(Active)视图才会生效。</p>
<a id="more"></a>
<p>同理，在调整项目树宽度时，可以使用快捷键<code>Ctrl + Alt + Left/Right</code>。</p>
<h4 id="Debug视图Tab页切换"><a href="#Debug视图Tab页切换" class="headerlink" title="Debug视图Tab页切换"></a>Debug视图Tab页切换</h4><p>快捷键是Shift + Tab，如下图所示。</p>

<h4 id="Debug视图日志滚动到末尾"><a href="#Debug视图日志滚动到末尾" class="headerlink" title="Debug视图日志滚动到末尾"></a>Debug视图日志滚动到末尾</h4><p>如果想在Debug视图中将日志始终定位到末尾，可以点击左侧的Scroll To End按钮，也可以使用快捷键<code>Ctrl + End</code>。</p>
<h4 id="Debug视图清空日志"><a href="#Debug视图清空日志" class="headerlink" title="Debug视图清空日志"></a>Debug视图清空日志</h4><p>清空日志没有快捷键，但是可以使用键盘上的鼠标右键来做到。</p>
<h4 id="关闭Editor-Tabs"><a href="#关闭Editor-Tabs" class="headerlink" title="关闭Editor Tabs"></a>关闭Editor Tabs</h4><p>在Editor Tabs中切换比较耗费时间，可以尝试关闭Editor Tabs功能，关闭掉Editor Tabs功能还有一个好处是加载的时候会变快，因为不用加载Editor Tabs里打开的页面的内容了。关闭Editor Tabs功能按下<code>Ctrl + Alt + S</code>快捷键。搜索Editor Tabs关键字即可，在右侧Tab Appearence中选择None即可。关闭掉后直接可以通过Ctrl + E快捷键或者<code>Ctrl + Shift + E</code>快捷键访问文件。</p>
<h4 id="跳转到特定文件夹"><a href="#跳转到特定文件夹" class="headerlink" title="跳转到特定文件夹"></a>跳转到特定文件夹</h4><p>在Intellij Idea中可以跳转到特定的文件夹，只需要按下两次Shift之后，在搜索的关键字前面加一个斜杠即可，如下图所示。</p>
=======
      <url>%2F2016%2F11%2F03%2Fintellij-idea-tips%2F</url>
      <content type="text"><![CDATA[键盘调整Debug窗口的大小键盘调整Debug窗口的大小快捷键是Ctrl + Shift + Up/Down，注意一定要定位到Debug视图，也就是Debug视图但是当前窗口的活跃(Active)视图才会生效。 同理，在调整项目树宽度时，可以使用快捷键Ctrl + Alt + Left/Right。 Debug视图Tab页切换快捷键是Shift + Tab，如下图所示。 Debug视图日志滚动到末尾如果想在Debug视图中将日志始终定位到末尾，可以点击左侧的Scroll To End按钮，也可以使用快捷键Ctrl + End。 Debug视图清空日志清空日志没有快捷键，但是可以使用键盘上的鼠标右键来做到。 关闭Editor Tabs在Editor Tabs中切换比较耗费时间，可以尝试关闭Editor Tabs功能，关闭掉Editor Tabs功能还有一个好处是加载的时候会变快，因为不用加载Editor Tabs里打开的页面的内容了。关闭Editor Tabs功能按下Ctrl + Alt + S快捷键。搜索Editor Tabs关键字即可，在右侧Tab Appearence中选择None即可。关闭掉后直接可以通过Ctrl + E快捷键或者Ctrl + Shift + E快捷键访问文件。 跳转到特定文件夹在Intellij Idea中可以跳转到特定的文件夹，只需要按下两次Shift之后，在搜索的关键字前面加一个斜杠即可，如下图所示。 自动补全分号在语句的结尾补全分号，可以使用快捷键Ctrl + Shift + Enter，注意光标需要移动到补全分号的行。 打开无快捷键的Tab在Intellij Idea中有些Tab时没有快捷键的，比如Maven Projects。要打开可以使用快捷键Ctrl + Alt + A，输入Maven projects关键字即可。 粘贴版历史如果使用过 Mac 里面的 Alfred 的话，可能大家早就习惯了 Alfred 的粘贴板历史的能力，真是复制粘贴的神器啊。其实 Intellij IDEA 里面也提供了这样的能力，我们可以直接通过Command + Shift + V来进行访问历史粘贴板： Language Injection在 Java 的 String 中编辑有 JSON 非常麻烦，在 Intellij IDEA 中，我们可以直接使用 Intellij IDEA 的 Language Injection 的功能（Alt + Enter）将一个字符串标记为 JSON，就可以非常方便地编写 JSON 了，再也不用担心转义的问题了：]]></content>
    </entry>
>>>>>>> 5ebd748e66ab1e6dae8df6cd825a3f977c0cd1b0

<h4 id="自动补全分号"><a href="#自动补全分号" class="headerlink" title="自动补全分号"></a>自动补全分号</h4><p>在语句的结尾补全分号，可以使用快捷键<code>Ctrl + Shift + Enter</code>，注意光标需要移动到补全分号的行。</p>
<h4 id="打开无快捷键的Tab"><a href="#打开无快捷键的Tab" class="headerlink" title="打开无快捷键的Tab"></a>打开无快捷键的Tab</h4><p>在Intellij Idea中有些Tab时没有快捷键的，比如Maven Projects。要打开可以使用快捷键<code>Ctrl + Alt + A</code>，输入Maven projects关键字即可。</p>
<h4 id="粘贴版历史"><a href="#粘贴版历史" class="headerlink" title="粘贴版历史"></a>粘贴版历史</h4><p>如果使用过 Mac 里面的 Alfred 的话，可能大家早就习惯了 Alfred 的粘贴板历史的能力，真是复制粘贴的神器啊。其实 Intellij IDEA 里面也提供了这样的能力，我们可以直接通过<code>Command + Shift + V</code>来进行访问历史粘贴板：</p>

<h4 id="Language-Injection"><a href="#Language-Injection" class="headerlink" title="Language Injection"></a>Language Injection</h4><p>在 Java 的 String 中编辑有 JSON 非常麻烦，在 Intellij IDEA 中，我们可以直接使用 Intellij IDEA 的 Language Injection 的功能（Alt + Enter）将一个字符串标记为 JSON，就可以非常方便地编写 JSON 了，再也不用担心转义的问题了：</p>

]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kafka消费position]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/02/kafka-consume-position/</url>
      <content type="html"><![CDATA[<p>kafka允许通过seek(TopicPartition，long)指定新的位置，或者seekToBeginning，seekToEnd定位到最早或最近的offset。注意seek重置offsets只对当前消费者起作用，它并不会触发consumer的rebalance，或者影响其他消费者的fetchOffsets。在大多数情况下，消费者消费记录只是简单地从一开始到结束，并且定时地提交它的位置(不管是自动的还是手动的)。不过新的API也允许消费者手动控制它的位置，消费者可以在一个partition钟随意地往前或者往后移动位置。这就意味着消费者可以重新消费旧的记录(多次读取相同的记录)，或者直接跳到最近的记录，忽略掉中间的记录。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 得到分区</div><div class="line"> *</div><div class="line"> * @param topics</div><div class="line"> * @return void</div><div class="line"> * @throws @author Jiangxiaoqiang</div><div class="line"> * @Title: initialTopicsPartitions</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialTopicsPartitions</span><span class="params">(String[] topics)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (topics != <span class="keyword">null</span> &amp;&amp; topics.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (String topic : topics) &#123;</div><div class="line">            <span class="keyword">if</span> (!Converter.toBlank(topic).equals(<span class="string">""</span>)) &#123;</div><div class="line">                topicPartitions.add(<span class="keyword">new</span> TopicPartition(topic, PublicVariable.KAFKA_COMSUME_PARTION));</div><div class="line">            &#125;</div><div class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//从最新的位置开始消费</span></div><div class="line">        consumer.seekToEnd();</div><div class="line">        consumer.assign(topicPartitions);</div><div class="line">=======</div><div class="line">        &#125;                </div><div class="line">        consumer.assign(topicPartitions);</div><div class="line">        <span class="comment">/*</span></div><div class="line">        从最新的位置开始消费,Special methods for seeking to the earliest and latest offset the server maintains are also available ( seekToBeginning(TopicPartition...) and seekToEnd(TopicPartition...) respectively)</div><div class="line">        */</div><div class="line">        consumer.seekToEnd();</div><div class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="number">2e811</span>b88860dc244827b13d566fed966b8243aaa</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis在Windows下配置]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/01/redis/</url>
      <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API，其实当前最热门的NoSQL数据库之一，NoSQL还包括了Memcached和mongodb。</p>
<a id="more"></a>
<h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p>下载在<a href="https://github.com/MSOpenTech/redis/releases" target="_blank" rel="external">这里</a>，这里下载的版本是：<code>Redis-x64-3.2.100.msi</code>。下载完毕后安装即可。安装Redis的目录<code>D:\Program Files\Redis</code>。启动Redis Service服务:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#切换到Redis目录</span></div><div class="line"><span class="built_in">cd</span> /d D:\Program Files\Redis</div><div class="line"><span class="comment">#启动Redis服务</span></div><div class="line">redis-server.exe redis.windows-service.conf</div></pre></td></tr></table></figure>
<p>双击打开 redis-cli.exe , 如果不报错,则连接上了本地服务器,然后测试，比如 set命令，get命令，如下图所示。</p>
<img src="/2016/11/01/redis/redis-client-test.jpg" alt="Redis客户端" title="Redis客户端">
<h4 id="Java连接Redis"><a href="#Java连接Redis" class="headerlink" title="Java连接Redis"></a>Java连接Redis</h4><p>引入Client jar包，在Maven中引入配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;2.8.1&lt;/version&gt;</div><div class="line">    &lt;type&gt;jar&lt;/type&gt;</div><div class="line">    &lt;scope&gt;compile&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>编写Java测试代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Created by jiangxiaoqiang on 2016/11/1.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisServiceTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//连接本地的 Redis 服务</span></div><div class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>);</div><div class="line">        System.out.println(<span class="string">"Connection to server sucessfully"</span>);</div><div class="line">        <span class="comment">//查看服务是否运行</span></div><div class="line">        System.out.println(<span class="string">"Server is running: "</span>+jedis.ping());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</div><div class="line">    config.setMaxIdle(<span class="number">2</span>);</div><div class="line">    config.setMaxTotal(<span class="number">10</span>);</div><div class="line">    config.setTestOnBorrow(<span class="keyword">true</span>);</div><div class="line">    config.setMaxWaitMillis(<span class="number">2000</span>);</div><div class="line">    <span class="comment">//循环创建16个redis数据库连接池,存放在字典里面</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</div><div class="line">        JedisPool item  = <span class="keyword">new</span> JedisPool(config, <span class="string">"127.0.0.1"</span>, <span class="number">6379</span>,<span class="number">10</span>*<span class="number">1000</span>);</div><div class="line">        pools.put(i, item);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[she]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/01/she/</url>
      <content type="html"><![CDATA[<p>like:</p>
<ul>
<li>鱼(Fish)</li>
<li>广味香肠</li>
</ul>
<h4 id="节目"><a href="#节目" class="headerlink" title="节目"></a>节目</h4><ul>
<li>《真正男子漢》(Takes a Real man)</li>
</ul>
<p>dislike:</p>
<ul>
<li>生食(日本料理),可以少量吃北极贝和甜虾</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kafka常用操作]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/29/kafka-common-operation/</url>
      <content type="html"><![CDATA[<p>启动kafka：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./kafka-server-start.sh ../config/server.properties &amp;</div></pre></td></tr></table></figure>
<p>创建主题：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./kafka-topics.sh --zookeeper localhost:2181 --create --topic <span class="built_in">test</span>1 --partitions 1 --replication-factor 1 --config max.message.bytes=64000 --config flush.messages=1</div></pre></td></tr></table></figure>
<p>查看所有主题：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./kafka-topics.sh --list --zookeeper 192.168.24.11:2181</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>删除主题：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./kafka-topics.sh --zookeeper 192.168.24.244:2181 --delete --topic 0085000</div></pre></td></tr></table></figure>
<p>消费主题：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 从开始处消费主题</span></div><div class="line">./kafka-console-consumer.sh --zookeeper localhost:2181 --from-beginning --topic 0085000</div><div class="line"></div><div class="line"><span class="comment"># 从最新位置消费主题</span></div><div class="line">./kafka-console-consumer.sh --zookeeper localhost:2181 --topic 0085000</div></pre></td></tr></table></figure>
<p>改变主题L000000的默认分区数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/kafka-topics.sh  --zookeeper 192.168.24.238:2181,192.168.24.11:2181,192.168.24.71:2181 --alter --topic L000000 --partitions 2</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kafka彻底删除主题]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/29/kafka-delete-topic/</url>
      <content type="html"><![CDATA[<p>这里的Kafka的版本是0.9.0.1，查看所有Topics和分区：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./kafka-topics.sh --describe --zookeeper 192.168.244.11:2181</div></pre></td></tr></table></figure>
<p>只查看所有Topic：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./kafka-topics.sh --list --zookeeper 192.168.24.244:2181</div></pre></td></tr></table></figure>
<p>删除主题：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./kafka-topics.sh --zookeeper 192.168.24.244:2181 --delete --topic 0085000</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>删除主题并不是真正的删除，仅仅是标记为删除(marked for deletion)，如果想彻底删除主题，可以修改kafka的配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delete.topic.enable=<span class="literal">true</span></div></pre></td></tr></table></figure>
<p>删除Kafka存储目录(server.properties文件log.dirs配置，默认为”/tmp/kafka-logs”)相关topic目录。配置了<code>delete.topic.enable=true</code>直接通过命令删除，如果命令删除不掉，直接通过zookeeper-client删除掉broker下的topic即可。登录ZooKeeper客户端：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#切换到ZooKeeper目录</span></div><div class="line"><span class="built_in">cd</span> /usr/hdp/2.4.3.0-227/zookeeper/bin</div><div class="line"></div><div class="line"><span class="comment">#登录ZooKeeper客户端</span></div><div class="line">./zookeeper-client</div><div class="line"></div><div class="line"><span class="comment">#找到topic所在的目录</span></div><div class="line">ls /brokers/topics</div><div class="line"></div><div class="line"><span class="comment">#彻底删除topic(remove recursively)</span></div><div class="line">rmr /brokers/topics/0085000</div></pre></td></tr></table></figure>
<p>如果不知道ZooKeeper客户端的目录，可以通过如下命令找到。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find / -name zookeeper-client</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kafka常见错误]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/28/kafka-error/</url>
      <content type="html"><![CDATA[<h4 id="Invalid-partition-given-with-record"><a href="#Invalid-partition-given-with-record" class="headerlink" title="Invalid partition given with record"></a>Invalid partition given with record</h4><p>在Kafka生产者里写入消息时，提示写入失败，详细的错误信息如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[ERROR]-[2016年-10月-28日16:17:35.083]-[Thread-25]-[com.zw.socket.service.kafka.producer.ClientKafkaProducer]-&#123;生产者发送消息出错&#125;java.lang.IllegalArgumentException: Invalid partition given with record: 1 is not in the range [0...1].</div><div class="line">	at org.apache.kafka.clients.producer.KafkaProducer.partition(KafkaProducer.java:671) ~[kafka-clients-0.9.0.1.jar:?]</div><div class="line">	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:430) ~[kafka-clients-0.9.0.1.jar:?]</div><div class="line">	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:339) ~[kafka-clients-0.9.0.1.jar:?]</div><div class="line">	at com.zw.socket.service.kafka.producer.ClientKafkaProducer.sendMessage(ClientKafkaProducer.java:102) [classes/:?]</div><div class="line">	at com.zw.socket.service.handler.common.CommonCommandHandler.commonMessageWriteIntoKafka(CommonCommandHandler.java:95) [classes/:?]</div><div class="line">	at com.zw.socket.service.handler.device.DeviceMessageHandler.sendRegisterResult(DeviceMessageHandler.java:175) [classes/:?]</div><div class="line">	at com.zw.socket.service.handler.device.DeviceMessageHandler.isAllowRegisted(DeviceMessageHandler.java:161) [classes/:?]</div><div class="line">	at com.zw.socket.service.handler.device.DeviceMessageHandler.saveDeviceInfo(DeviceMessageHandler.java:216) [classes/:?]</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>在Kafka的配置文件中，修改Kafka每个topic的默认分区数的配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#每个topic的分区个数，更多的partition会产生更多的segment file</span></div><div class="line">num.partitions=2</div></pre></td></tr></table></figure>
<h4 id="The-group-coordinator-is-not-available"><a href="#The-group-coordinator-is-not-available" class="headerlink" title="The group coordinator is not available"></a>The group coordinator is not available</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">2016-10-29 14:52:56.387 INFO [nioEventLoopGroup-3-1][org.apache.kafka.common.utils.AppInfoParser$AppInfo:82] - Kafka version : 0.9.0.1</div><div class="line">2016-10-29 14:52:56.387 INFO [nioEventLoopGroup-3-1][org.apache.kafka.common.utils.AppInfoParser$AppInfo:83] - Kafka commitId : 23c69d62a0cabf06</div><div class="line">2016-10-29 14:52:56.409 ERROR [nioEventLoopGroup-3-1][org.apache.kafka.clients.consumer.internals.ConsumerCoordinator$DefaultOffsetCommitCallback:489] - Offset commit failed.</div><div class="line">org.apache.kafka.common.errors.GroupCoordinatorNotAvailableException: The group coordinator is not available.</div><div class="line">2016-10-29 14:52:56.519 WARN [kafka-producer-network-thread | producer-1][org.apache.kafka.clients.NetworkClient$DefaultMetadataUpdater:582] - Error while fetching metadata with correlation id 0 : &#123;0085000=LEADER_NOT_AVAILABLE&#125;</div><div class="line">2016-10-29 14:52:56.612 WARN [pool-6-thread-1][org.apache.kafka.clients.NetworkClient$DefaultMetadataUpdater:582] - Error while fetching metadata with correlation id 1 : &#123;0085000=LEADER_NOT_AVAILABLE&#125;</div></pre></td></tr></table></figure>
<p>产生问题具体原因不详，可能是修改了默认分区导致的，解决方法：停止Kafka Broker，登录ZooKeeper客户端，删除所有主题即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#切换到ZooKeeper目录</span></div><div class="line"><span class="built_in">cd</span> /usr/hdp/2.4.3.0-227/zookeeper/bin</div><div class="line"></div><div class="line"><span class="comment">#登录ZooKeeper客户端</span></div><div class="line">./zookeeper-client</div><div class="line"></div><div class="line"><span class="comment">#找到topic所在的目录</span></div><div class="line">ls /brokers/topics</div><div class="line"></div><div class="line"><span class="comment">#彻底删除topic</span></div><div class="line">rmr /brokers/topics/0085000</div></pre></td></tr></table></figure>
<h4 id="无法往集群中写入数据"><a href="#无法往集群中写入数据" class="headerlink" title="无法往集群中写入数据"></a>无法往集群中写入数据</h4><p>检查部署服务器节点，也就是写入节点的<code>/etc/hosts</code>配置文件中是否有IP和主机名的映射。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/hosts</div></pre></td></tr></table></figure>
<p>配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</div><div class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</div><div class="line">192.168.24.136 节点1主机名</div><div class="line">192.168.24.137 节点2主机名</div><div class="line">192.168.24.244 localhost</div></pre></td></tr></table></figure>
<h4 id="Consumer-Marking-the-coordinator-XXXXX-dead"><a href="#Consumer-Marking-the-coordinator-XXXXX-dead" class="headerlink" title="Consumer Marking the coordinator XXXXX dead"></a>Consumer Marking the coordinator XXXXX dead</h4><p>Marking the coordinator dead happens when there is a Network communication error between the Consumer Client and the Coordinator (Also this can happen when the Coordinator dies and the group needs to rebalance). There are a variety of situations (offset commit request, fetch offset, etc) that can cause this issue. I will suggest that you research what’s causing this situations。解决此问题，重新启动消费者/生产者。</p>
<h4 id="LEADER-NOT-AVAILABLE"><a href="#LEADER-NOT-AVAILABLE" class="headerlink" title="LEADER_NOT_AVAILABLE"></a>LEADER_NOT_AVAILABLE</h4><p>在Kafka消费数据时，提示如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">14:37:19.717]-[Thread-24]-[org.apache.kafka.clients.NetworkClient]-&#123;Error while fetching metadata with correlation id 63 : &#123;0402080=LEADER_NOT_AVAILABLE, T16092920=LEADER_NOT_AVAILABLE, TH003086=LEADER_NOT_AVAILABLE, 65565665666=LEADER_NOT_AVAILABLE, 0146636=LEADER_NOT_AVAILABLE, 16687896589=LEADER_NOT_AVAILABLE, CQSZ=LEADER_NOT_AVAILABLE, 25698568=LEADER_NOT_AVAILABLE, 1037494=LEADER_NOT_AVAILABLE, 1551555=LEADER_NOT_AVAILABLE, 0085000=LEADER_NOT_AVAILABLE, L000010=LEADER_NOT_AVAILABLE, 145263078=LEADER_NOT_AVAILABLE&#125;&#125;</div></pre></td></tr></table></figure>
<p>重新启动生产者即可。KafkaProducer/Sender都需要获取集群的配置信息Metadata。所谓Metadata，Topic/Partion与broker的映射关系：每一个Topic的每一个Partion，得知道其对应的broker列表是什么，其中leader是谁，follower是谁。Sender从集群获取信息，然后更新Metadata； KafkaProducer先读取Metadata，然后把消息放入队列。如果没有获取到相应的元素据(Metadata)，则会有如下错误：<code>fetching topic metadata for topics from broker failed</code>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HP KU 1158键盘]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/27/new-keyboard/</url>
      <content type="html"><![CDATA[<p>以前的旧键盘打字的声音有点大，中午打字都担心吵到旁边休息的同学，而且按键比较生硬，今天特意请飞哥换了一款键盘HP KU 1158，确实好用不少。一直在找一款适合长时间输入的键盘，而且要求声音要尽量小一些，价格平民化一些(Realforce一千多也还蛮贵的)。这款键盘符合要求。</p>
<a id="more"></a>
<img src="/2016/10/27/new-keyboard/new-keyboard-overview.jpg" alt="键盘正面" title="键盘正面">
<img src="/2016/10/27/new-keyboard/new-keyboard-detail.jpg" alt="键盘参数信息" title="键盘参数信息">
<p><a href="https://www.amazon.com/HP-black-keyboard-KU-1156-672647-003/dp/B00LLK88IE" target="_blank" rel="external">Amaozn购买链接</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WebSocket连接(SessionConnectEvent)、断开连接(SessionDisconnectEvent)事件]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/27/websocket-event/</url>
      <content type="html"><![CDATA[<p>WebSocket事件：SessionConnectEvent(连接时), SessionConnectedEvent(连接后), SessionDisconnectEvent(断开连接)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketDisconnectHandler</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">SessionDisconnectEvent</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(SessionDisconnectEvent sessionDisconnectEvent)</span> </span>&#123;</div><div class="line">        StompHeaderAccessor stompHeaderAccessor = StompHeaderAccessor.wrap(sessionDisconnectEvent.getMessage());</div><div class="line">        <span class="comment">//do something</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加了断开连接实现类后的逻辑后，还需要注入Bean，否则不会生效。在相关配置文件(<code>spring-socket-servlet.xml</code>)中增加如下配置即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zw.socket.service.config.WebSocketDisconnectHandler"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Stomp + WebSocket消息实时推送]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/25/stomp-spring-message-push/</url>
      <content type="html"><![CDATA[<h4 id="消息广播"><a href="#消息广播" class="headerlink" title="消息广播"></a>消息广播</h4><p>消息广播将消息发送给所有用户。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 推送给所有用户</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pushInfoImpl</span><span class="params">(String url, String content)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (simpMessagingTemplate != <span class="keyword">null</span>) &#123;</div><div class="line">        simpMessagingTemplate.convertAndSend(url, content);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="推送给指定用户"><a href="#推送给指定用户" class="headerlink" title="推送给指定用户"></a>推送给指定用户</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 推送给指定用户</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pushInfoImpl</span><span class="params">(String user, String url, String content)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (simpMessagingTemplate != <span class="keyword">null</span>) &#123;</div><div class="line">        simpMessagingTemplate.convertAndSendToUser(user, url, content);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>url直接为<code>/location</code>，在发给客户端的时，会自动添加user前缀和用户名，客户端订阅的url像这样：<code>/user/admin/location</code>，订阅的url中，不包含topic。content为需要发送的消息的内容。</p>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>客户端订阅消息如下代码片段所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">stompClient.subscribe(<span class="string">'/user/admin/location/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">greeting</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'接收到订阅的信息：'</span> + greeting.body);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>客户端订阅的URL中，admin是用户名。发送给指定用户时会默认添加user前缀。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQuirreL GUI客户端集成Phoenix、MySQL配置]]></title>
<<<<<<< HEAD
      <url>http://jiangxiaoqiang.com/2016/10/25/squirrel-phoenix-configuration/</url>
      <content type="html"><![CDATA[<h4 id="SQuirreL-GUI客户端简介"><a href="#SQuirreL-GUI客户端简介" class="headerlink" title="SQuirreL GUI客户端简介"></a>SQuirreL GUI客户端简介</h4><p>SQuirreL GUI(<a href="https://sourceforge.net/projects/squirrel-sql/?source=typ_redirect" target="_blank" rel="external">下载地址</a>)客户端来连接Phoenix，就像MySQL使用Navicat for MySQL，Oracle使用PL/SQL Developer一样，在进行一些数据库操作的时候能够更加的直观和方便。同时它还可以连接MySQL。它可以运行在Windows、Linux、Mac OS操作系统上。</p>
<a id="more"></a>
<h4 id="下载并安装SQuirreL-GUI"><a href="#下载并安装SQuirreL-GUI" class="headerlink" title="下载并安装SQuirreL GUI"></a>下载并安装SQuirreL GUI</h4><p>下载好的文件是一个压缩包(<code>squirrel-sql-3.7.1-standard.zip</code>)。不用解压缩，直接修改文件的后缀名为jar(<code>squirrel-sql-3.7.1-standard.jar</code>)，双击即可打开安装界面。如果无法双击打开，则可以通过命令行的方式打开：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar squirrel-sql-3.7-standard.jar</div></pre></td></tr></table></figure>
<h4 id="下载驱动"><a href="#下载驱动" class="headerlink" title="下载驱动"></a>下载驱动</h4><p>到Phoenix<a href="http://www.apache.org/dyn/closer.lua/phoenix/" target="_blank" rel="external">镜像站点</a>下载包，这里选择的是<code>apache-phoenix-4.8.0-HBase-1.2-bin.tar.gzip</code>，到解压的<code>apache-phoenix-4.8.0-HBase-1.2-bin.tar.gzip</code>包的主目录下，将如下几个jar包拷贝到SQuirreL安装目录的lib目录下，例如本机路径是<code>D:\Program Files\squirrel-sql-3.7.1\lib</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">phoenix-4.8.0-HBase-1.2-client.jar</div></pre></td></tr></table></figure>
<p>注意顺序，先拷贝jar包，在启动SQuirreL添加驱动，如果是拷贝jar包时已经启动了SQuirreL，那么SQuirreL需要重启一下，拷贝的jar包才生效，这个是需要注意的地方，可以参见<a href="http://stackoverflow.com/questions/40215921/squirrel-configure-could-not-initial-class-org-apache-phoenix-jdbc-phoenixdrive/40225765#40225765" target="_blank" rel="external">SQuirreL Configure: could not initial class org.apache.phoenix.jdbc.PhoenixDriver</a>。在连接不同的HBase数据库时，需要注意驱动的版本，不同版本的驱动是无法正确连接的。高版本的驱动无法连接低版本的HBase。</p>
<h4 id="添加Driver"><a href="#添加Driver" class="headerlink" title="添加Driver"></a>添加Driver</h4><p>添加Driver如下图所示。</p>
=======
      <url>%2F2016%2F10%2F25%2Fsquirrel-phoenix-configuration%2F</url>
      <content type="text"><![CDATA[SQuirreL GUI客户端简介SQuirreL GUI(下载地址)客户端来连接Phoenix，就像MySQL使用Navicat for MySQL，Oracle使用PL/SQL Developer一样，在进行一些数据库操作的时候能够更加的直观和方便。同时它还可以连接MySQL。它可以运行在Windows、Linux、Mac OS操作系统上。 下载并安装SQuirreL GUI下载好的文件是一个压缩包(squirrel-sql-3.7.1-standard.zip)。不用解压缩，直接修改文件的后缀名为jar(squirrel-sql-3.7.1-standard.jar)，双击即可打开安装界面。如果无法双击打开，则可以通过命令行的方式打开： 1java -jar squirrel-sql-3.7-standard.jar 下载驱动到Phoenix镜像站点下载包，这里选择的是apache-phoenix-4.8.0-HBase-1.2-bin.tar.gzip，到解压的apache-phoenix-4.8.0-HBase-1.2-bin.tar.gzip包的主目录下，将如下几个jar包拷贝到SQuirreL安装目录的lib目录下，例如本机路径是D:\Program Files\squirrel-sql-3.7.1\lib。 1phoenix-4.8.0-HBase-1.2-client.jar 注意顺序，先拷贝jar包，在启动SQuirreL添加驱动，如果是拷贝jar包时已经启动了SQuirreL，那么SQuirreL需要重启一下，拷贝的jar包才生效，这个是需要注意的地方，可以参见SQuirreL Configure: could not initial class org.apache.phoenix.jdbc.PhoenixDriver。在连接不同的HBase数据库时，需要注意驱动的版本，不同版本的驱动是无法正确连接的。高版本的驱动无法连接低版本的HBase。 添加Driver添加Driver如下图所示。 Name填写用户自定义名称。Example URL填写ZooKepper地址。Class Name填写：org.apache.phoenix.jdbc.PhoenixDriver。 添加Alias连接Hbase如下图所示。 Name是Alias的名字，可以填写自定义名称。Driver选择上一步配置好的Driver名称，这里是Phoenix。url填写Phoenix连接串：jdbc:phoenix:192.168.24.226,192.168.24.195:2181:/hbase-unsecure。UserName和Password填写操作系统的登录用户和登录密码。 查询SQL查询如下图所示。 连接MySQL将MySQL的驱动mysql-connector-java-5.1.39.jar拷贝到lib目录下。 驱动链接填写：jdbc:mysql://192.168.24.234:3306/clbs?useUnicode=true&amp;characterEncoding=utf-8。用户名和密码填写登录Linux主机的用户名和密码。]]></content>
    </entry>
>>>>>>> 5ebd748e66ab1e6dae8df6cd825a3f977c0cd1b0

<p>Name填写用户自定义名称。Example URL填写ZooKepper地址。Class Name填写：<code>org.apache.phoenix.jdbc.PhoenixDriver</code>。</p>
<h4 id="添加Alias连接Hbase"><a href="#添加Alias连接Hbase" class="headerlink" title="添加Alias连接Hbase"></a>添加Alias连接Hbase</h4><p>如下图所示。</p>

<p>Name是Alias的名字，可以填写自定义名称。Driver选择上一步配置好的Driver名称，这里是Phoenix。url填写Phoenix连接串：<code>jdbc:phoenix:192.168.24.226,192.168.24.195:2181:/hbase-unsecure</code>。UserName和Password填写操作系统的登录用户和登录密码。</p>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>SQL查询如下图所示。</p>

<h4 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h4><p>将MySQL的驱动<code>mysql-connector-java-5.1.39.jar</code>拷贝到lib目录下。</p>

<p>驱动链接填写：<code>jdbc:mysql://192.168.24.234:3306/clbs?useUnicode=true&amp;characterEncoding=utf-8</code>。用户名和密码填写登录Linux主机的用户名和密码。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fedora快捷键]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/21/Fedora-shortkey/</url>
      <content type="html"><![CDATA[<p>如下是我在使用Fedora的时候整理的快捷键，网络上有许多快捷键版本，下表是经过测试可用并一直在使用的快捷键。</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows + A</td>
<td style="text-align:center">显示软件列表</td>
</tr>
<tr>
<td>Windows + H</td>
<td style="text-align:center">隐藏当前窗口</td>
</tr>
<tr>
<td>Alt + F10</td>
<td style="text-align:center">最大化、还原当前窗口</td>
</tr>
<tr>
<td>Ctrl + Alt + Up/Down</td>
<td style="text-align:center">切换当前窗口</td>
</tr>
<tr>
<td>Alt + Tab</td>
<td style="text-align:center">应用程序之间进行切换</td>
</tr>
<tr>
<td>Windows + Left/Right/Up/Down</td>
<td style="text-align:center">将窗口移向左右、最大化、还原</td>
</tr>
<tr>
<td>Windows + PageUp/PageDown</td>
<td style="text-align:center">切换工作区</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring模块化配置]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/21/spring-module-config/</url>
      <content type="html"><![CDATA[<p>Spring的一大缺点就是配置文件非常多，想象如果没有注解扫描Bean，所有的Bean都配置在XML文件中，将会是一个噩梦，项目中会充斥着大量的配置文件。这也是Spring-Boot项目所要避免的问题之一，在做项目开发时，为了使配置显得有条理化，易于理解，可以采用Spring Import配置文件，项目中需要一个Spring的主文件，在Web.xml中指定Spring的主文件位置，主文件再Import各类配置文件。指定主文件如下代码片段所示：</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-config/spring-main-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中<code>spring-main-config.xml</code>即是项目的Spring配置主文件。classpath是指WEB-INF文件夹下的classes目录,classpath 和 classpath<em> 区别是：classpath：只会到你的class路径中查找找文件;classpath</em>：不仅包含class路径，还包括jar文件中(class路径)进行查找.在部署完毕的WEB项目中，一般包含WEB-INF和META-INF文件夹。META-INF相当于一个信息包，目录中的文件和目录获得Java 2平台的认可与解释，用来配置应用程序、扩展程序、类加载器和服务manifest.mf文件，在用jar打包时自动生成。其中主配置文件中使用Import Resource如下代码片段所示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">    http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">    http://www.springframework.org/schema/aop</div><div class="line">    http://www.springframework.org/schema/aop/spring-aop.xsd  </div><div class="line">    http://www.springframework.org/schema/util</div><div class="line">    http://www.springframework.org/schema/util/spring-util.xsd</div><div class="line">    http://www.springframework.org/schema/context</div><div class="line">    http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>spring主配置文件<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 属性和配置文件读入 ,多个用逗号隔开 数据库参数和系统参数 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"applicationProperties"</span> <span class="attr">location</span>=<span class="string">"classpath:application.properties"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">properties-ref</span>=<span class="string">"applicationProperties"</span> <span class="attr">ignore-resource-not-found</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 扫描注解@Component , @Service , @Repository。--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span></span></div><div class="line">		<span class="attr">base-package</span>=<span class="string">"main.src.*"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></div><div class="line">			<span class="attr">expression</span>=<span class="string">"org.aspectj.lang.annotation.Aspect"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></div><div class="line">			<span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></div><div class="line">			<span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.RestController"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></div><div class="line">			<span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.ControllerAdvice"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--aop 注解风格支持 proxy-targer-class默认false,用jdk动态代理,true是cglib .expose-proxy当前代理是否为可暴露状态,值是"ture",则为可访问。 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span></span></div><div class="line">		<span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</div><div class="line">	<span class="comment">&lt;!--aop xml风格支持 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 导入其它spring配置文件 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-filters.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-datasource.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-mybatis.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-cache.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-i18n.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-json.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-security.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-exception.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-log.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-validator.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-quartz.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-socket-servlet.xml"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Stomp WebSocket路由]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/20/stomp-url-route/</url>
      <content type="html"><![CDATA[<p>STOMP即Simple (or Streaming) Text Orientated Messaging Protocol，简单(流)文本定向消息协议，它提供了一个可互操作的连接格式，允许STOMP客户端与任意STOMP消息代理（Broker）进行交互。STOMP协议由于设计简单，易于开发客户端，因此在多种语言和多种平台上得到广泛地应用。WebSocket协议的应用层子协议STOMP（流文本定向消息协议）。在应用中直接使用WebSocket API显得有些低端，直到统一标准规范时也只有一小部分框架可以解析信息或通过注解方式使用它。这正是考虑在应用中运用子协议和产生基于WebSocket支持的Spring的STOMP的原因。当运用一个上层协议，WebSocket API的细节就显得不那么重要了，正如运用了HTTP后TCP的通信细节不再暴漏在应用中一样。STOMP是为了简单而创建的一种消息协议。它基于模仿HTTP协议的帧。帧由一个命令、可选的头和可选的体组成。</p>
<a id="more"></a>
<p>业务中需要实现不同的消息类别分发，在客户端进行不同的处理。此时想到Stomp的路由。</p>
<h4 id="服务端启动代理中继"><a href="#服务端启动代理中继" class="headerlink" title="服务端启动代理中继"></a>服务端启动代理中继</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebSocketMessageBroker</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">extends</span> <span class="title">AbstractWebSocketMessageBrokerConfigurer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry config)</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 启用了STOMP代理中继功能：并将其目的地前缀设置为 "/topic"；</div><div class="line">         * spring就能知道 所有目的地前缀为"/topic" 的消息都会发送到STOMP代理中；</div><div class="line">         */</div><div class="line">        config.enableSimpleBroker(<span class="string">"/topic"</span>);</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 设置了应用的前缀为"app"：所有目的地以"/app"打头的消息（发送消息url not连接url）</div><div class="line">         * 都会路由到带有<span class="doctag">@MessageMapping</span>注解的方法中，而不会发布到代理队列或主题中；</div><div class="line">         */</div><div class="line">        config.setApplicationDestinationPrefixes(<span class="string">"/app"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> </span>&#123;</div><div class="line">        registry.addEndpoint(<span class="string">"/gs-guide-websocket"</span>).withSockJS();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者以XML文件的方式进行配置，两者是等价的：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xmlns:websocket</span>=<span class="string">"http://www.springframework.org/schema/websocket"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">        http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/websocket</div><div class="line">        http://www.springframework.org/schema/websocket/spring-websocket.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">websocket:message-broker</span> <span class="attr">application-destination-prefix</span>=<span class="string">"/app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">websocket:stomp-endpoint</span> <span class="attr">path</span>=<span class="string">"/gs-guide-websocket"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">websocket:sockjs</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">websocket:stomp-endpoint</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">websocket:simple-broker</span> <span class="attr">prefix</span>=<span class="string">"/topic, /queue"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">websocket:message-broker</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="服务端添加Controller"><a href="#服务端添加Controller" class="headerlink" title="服务端添加Controller"></a>服务端添加Controller</h4><p>Spring官方的例子演示了Send-Response模型，如果需要请求之后，服务端多次推送消息，主动推送消息，可采用如下方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> SimpMessagingTemplate template;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GreetingController</span><span class="params">(SimpMessagingTemplate template)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.template = template;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@MessageMapping</span>(<span class="string">"/hello"</span>)</div><div class="line">    <span class="meta">@SendTo</span>(<span class="string">"/topic/greetings"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greeting</span><span class="params">(HelloMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        template.convertAndSend(<span class="string">"/topic/greetings"</span>, <span class="string">"aaaaaaa"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SimpMessagingTemplate是Spring实现的一个发送模板类，直接自动注入获取相应实例即可。SimpMessagingTemplate实例可以实现服务端主动向客户端订阅的Url推送消息。第一个参数为推送地址，第二个参数为需要推送的消息内容。</p>
<h4 id="浏览器端"><a href="#浏览器端" class="headerlink" title="浏览器端"></a>浏览器端</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> socket = <span class="keyword">new</span> SockJS(<span class="string">'/clbs/gs-guide-websocket'</span>);</div><div class="line">    stompClient = Stomp.over(socket);</div><div class="line">    stompClient.connect(&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">frame</span>) </span>&#123;</div><div class="line">        setConnected(<span class="literal">true</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Connected: '</span> + frame);</div><div class="line">        stompClient.subscribe(<span class="string">'/topic/greetings'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">greeting</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(greeting.body);</div><div class="line">        &#125;);        </div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>clbs是项目名称，gs-guide-websocket是终结点名称。greeting.body是取出服务端响应的消息体(Message Body)。Stomp协议与HTTP协议有许多相似之处，命令 + 消息头 + 空行 + 消息体。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stompClient.send(<span class="string">"/app/gs-guide-websocket/location"</span>,&#123;&#125;,<span class="built_in">JSON</span>.stringify(requestStr));</div></pre></td></tr></table></figure>
<p><a href="http://jmesnil.net/stomp-websocket/doc/" target="_blank" rel="external">STOMP Over WebSocket</a></p>
<p><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html" target="_blank" rel="external">WebSocket Support</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[expected single matching bean but found 2]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/20/spring-encount-error/</url>
      <content type="html"><![CDATA[<p>在WebSocket往客户端推送消息的开发过程中，获取推送消息实例<code>SimpMessagingTemplate</code>时，错误如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ERROR]-[2016年-10月-19日17:53:25.026]-[RMI TCP Connection(2)-127.0.0.1]-[org.springframework.web.context.ContextLoader]-&#123;Context initialization failed&#125; org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name  &apos;com.zw.socket.service.controller.InstanceMessageController#0&apos; defined in class path resource [spring-config/spring-socket-servlet.xml]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [org.springframework.messaging.simp.SimpMessagingTemplate] is defined: expected single matching bean but found 2:org.springframework.messaging.simp.SimpMessagingTemplate#0,brokerMessagingTemplate</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>发生此错误的原因是在配置文件<code>spring-socket-servlet.xml</code>里重复做了如下配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">websocket:message-broker</span> <span class="attr">application-destination-prefix</span>=<span class="string">"/app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">websocket:stomp-endpoint</span> <span class="attr">path</span>=<span class="string">"/vehicle"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">websocket:handshake-interceptors</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">websocket:handshake-interceptors</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">websocket:sockjs</span> <span class="attr">session-cookie-needed</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">websocket:stomp-endpoint</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">websocket:simple-broker</span> <span class="attr">prefix</span>=<span class="string">"/topic"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">websocket:message-broker</span>&gt;</span></div></pre></td></tr></table></figure>
<p>扫描配置文件时会自动生成一个<code>brokerMessagingTemplate</code>实例，与实例<code>simpMessagingTemplate</code>冲突。解决的方法就是去掉配置文件中的配置。</p>
<p>参考：</p>
<p><a href="http://stackoverflow.com/questions/22925951/could-not-autowire-no-beans-of-simpmessagingtemplate-type-found" target="_blank" rel="external">Could not autowire. No beans of SimpMessagingTemplate type found</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring Bean是否注册判断]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/18/spring-bean-registered/</url>
      <content type="html"><![CDATA[<p>在项目的开发过程中有许多Bean，怎么判断一个Bean是否已经纳入容器管理了呢？当然最直接的方式是直接使用，如果不能用，那么肯定就未注册成功，但是也有的情况不是那么明显的，即使没有注册成功也不会有明显的错误。如何有效的鉴别和判断是否已经注册？</p>
<a id="more"></a>
<h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p>在项目启动时会输出日志，提示注册了哪些Bean，那么只需要使用Bean的名称，在日志里面搜索一遍，即可知晓Bean是否已经注册，如果有相关注册成功输出提示，那么代表注册OK，如果没有相关日志，此时就需要排查Bean的配置了。</p>
<h4 id="方法获取Bean"><a href="#方法获取Bean" class="headerlink" title="方法获取Bean"></a>方法获取Bean</h4><p>可以通过如下方法获取特定注解的Bean的集合：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Map&lt;String,Object&gt; beans = applicationContext.getBeansWithAnnotation(Foo.class);</div></pre></td></tr></table></figure>
<p>其中Foo代表@Autowired、@Controller等等注解。</p>
<p><a href="http://stackoverflow.com/questions/40108153/is-there-any-way-to-query-bean-of-spring-container?noredirect=1#comment67489885_40108153" target="_blank" rel="external">Is there any way to query bean of spring container</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring线程中Bean注入问题]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/18/spring-get-bean/</url>
      <content type="html"><![CDATA[<h4 id="实现ApplicationContextAware"><a href="#实现ApplicationContextAware" class="headerlink" title="实现ApplicationContextAware"></a>实现ApplicationContextAware</h4><p>在Spring中开启线程时，无法使用Bean的自动注入，此时需要手动获取Bean。方法如下：</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class SpringApplicationContextHolder implements ApplicationContextAware &#123;</div><div class="line">	private static ApplicationContext context;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void <span class="built_in">set</span>ApplicationContext(ApplicationContext context) throws BeansException &#123;</div><div class="line">		SpringApplicationContextHolder.context = context;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static Object getSpringBean(String beanName) &#123;</div><div class="line">		<span class="built_in">return</span> context == null ? null : context.getBean(beanName);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static String[] <span class="function"><span class="title">getBeanDefinitionNames</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> context.getBeanDefinitionNames();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="配置文件注册"><a href="#配置文件注册" class="headerlink" title="配置文件注册"></a>配置文件注册</h4><p>在Spring中注册工具类的bean：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zw.socket.service.kafka.comsumer.SpringApplicationContextHolder"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="获取Bean"><a href="#获取Bean" class="headerlink" title="获取Bean"></a>获取Bean</h4><p>获取Bean实例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ClientMessageTransfer clientMessageTransfer=(ClientMessageTransfer)SpringApplicationContextHolder.getSpringBean(<span class="string">"clientMessageTransfer"</span>);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[port aready in use]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/17/port-aready-in-use/</url>
      <content type="html"><![CDATA[<p>在使用Intellij Idea调试时，以Application方式启动程序时提示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">2016-10-17 11:28:38.537 ERROR 23156 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   : </div><div class="line"></div><div class="line">***************************</div><div class="line">APPLICATION FAILED TO START</div><div class="line">***************************</div><div class="line"></div><div class="line">Description:</div><div class="line"></div><div class="line">The Tomcat connector configured to listen on port 8080 failed to start. The port may already be in use or the connector may be misconfigured.</div><div class="line"></div><div class="line">Action:</div><div class="line"></div><div class="line">Verify the connector&apos;s configuration, identify and stop any process that&apos;s listening on port 8080, or configure this application to listen on another port.</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>提示8080端口已经被占用了，由于此时是以Application方式启动的，没有Tomcat的相关端口配置。Spring Boot uses embedded Tomcat by default, but it handles it differently without using tomcat-maven-plugin. To change the port use –server.port parameter for example。添加程序启动参数：<code>–server.port=8181</code>，更改嵌入的Tomcat的端口即可解决此问题。如图所示：</p>
<img src="/2016/10/17/port-aready-in-use/modify-tomcat-port.jpg" alt="修改Tomcat的启动端口" title="修改Tomcat的启动端口">
<p>解决方案来自StackOverflow：</p>
<p><a href="http://stackoverflow.com/questions/20735205/launching-spring-application-address-already-in-use" target="_blank" rel="external">Launching Spring application Address already in use</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fedora 24搭建Git Server]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/16/fedora-git-server/</url>
      <content type="html"><![CDATA[<p>想将代码拷贝到家里的电脑，在安静的时刻可以阅读消化。每天用U盘拷贝也是比较麻烦，本来Github挺好用的，但是闭源的托管需要费用。刚好办公电脑和家里的电脑安装了OpenVPN,所以就想在家里的电脑搭建一个Git Server，通过OpenVPN将家里的电脑和办公电脑相连(相当于局域网)。这样就可以随时提交代码了。同时也想以SSH连接家里的电脑，所以同时也安装了OpenSSH。也可以SSH远程Copy，但是无法增量Copy，Copy一次大概需要2-3个小时。遂放弃SSH Copy的方案。</p>
<a id="more"></a>
<h4 id="启动SSH服务"><a href="#启动SSH服务" class="headerlink" title="启动SSH服务"></a>启动SSH服务</h4><p>确定是否已经安装SSH服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -qa | grep openssh-server</div></pre></td></tr></table></figure>
<p>如果没有安装服务，输入如下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnf install openssh-server -y</div></pre></td></tr></table></figure>
<p>修改配置文件:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Port 22  监听的端口号，默认是22，可以自定义。</span></div><div class="line"><span class="comment">#Protocol 2  支持的协议，默认就好，不用修改</span></div><div class="line"><span class="comment">#PermitRootLogin yes 是否允许root直接登录，最好设置为no</span></div><div class="line"><span class="comment">#MMaxAuthTries 6 最大登录数，默认是6，建议设置为3，防止别人密码穷举。</span></div></pre></td></tr></table></figure>
<p>修改完配置后，重启SSH服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service ssh restart</div></pre></td></tr></table></figure>
<p>查看SSH服务状态:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service sshd status</div></pre></td></tr></table></figure>
<p>允许此端口（22）访问：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</div></pre></td></tr></table></figure>
<h4 id="初始化Git仓库"><a href="#初始化Git仓库" class="headerlink" title="初始化Git仓库"></a>初始化Git仓库</h4><p>先在Fedora机器上，选定一个目录作为Git仓库，这里选择的是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/home/dolphin/dolphin/source/zwlbs/plateform3.0/zwlbs.git</div></pre></td></tr></table></figure>
<p>在目录下输入命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo git init --bare zwlbs.git</div></pre></td></tr></table></figure>
<h4 id="签出Git库"><a href="#签出Git库" class="headerlink" title="签出Git库"></a>签出Git库</h4><p>在办公的电脑上输入如下命令签出Git仓库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> dolphin@10.0.0.6:/home/dolphin/dolphin/<span class="built_in">source</span>/zwlbs/plateform3.0/zwlbs.git</div></pre></td></tr></table></figure>
<p>签出时会提示确定指纹，选择yes，同时需要输入用户dolphin的密码，输入即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Fedora 24中使用xx-net]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/15/Fedora-24-using-xxnet/</url>
      <content type="html"><![CDATA[<p>虽然此处实际在Linux平台进行的配置，但是XX-Net是跨平台的，在Windows、Mac OS下一样可以使用，在其他的操作系统下配置类似。在Fedora 24中安装完Google Chrome之后，还需要同步在Windows平台上保存的Google Chrome的书签（里面有好多收藏的好网站）、Cookie(不用每次登陆网页输入用户名和密码，记忆用户名和密码非常具有迷惑性，目前注册的用户名密码真的太多了，根本记不住，现在都是借助KeePass来记忆)等等数据。平时的搜索还是需要用Google，Google相比于百度，搜索出的结果更加精确，内容对于用户更加有意义。当你迫切想要知道某个问题的思路时，如果搜索出来一些无关痛痒的内容，是非常浪费时间的，消磨你的意志，会让你有一种被掏空了的感觉，对就是那种感觉。极大的降低了效率，想想如此庞大的用户基数，如果搜索出的内容不精准、没有意义所造成的资源浪费（时间、精力、意志力等）是非常恐怖的。所以这也是为什么费尽心思要使用Google，当你顺利的找到自己想要的内容并快速完成任务时，会深刻的体会到前期在科学上网里花费的时间是值得的。要做到以上两点，就需要借助XX-Net。</p>
<a id="more"></a>
<h4 id="xx-net简介"><a href="#xx-net简介" class="headerlink" title="xx-net简介"></a>xx-net简介</h4><p>XX-Net是一款让你可以让你提高工作效率的工具，它通过让你可以获取到更多的信息的方式达到。<!--比如家里的娃娃晚上总是不睡觉啊，大人也是天天熊猫眼，可以向朋友取经（限于朋友圈子），如果单身狗比较多，就只能自己摸索了，但是有了xx-net,你可以向任何一个国家的人求助阿，提高了寻找到解决方案的概率。-->XX-Net is a free desktop application that delivers fast, reliable and secure access to the open Internet for users in censored regions. It uses google app engine (GAE:Google App Engine) as a proxy server through the firewall.截至目前，xx-net在Github上(全球最大的同性交友网站)已经有10000+的star和1000+的watch。</p>
<h4 id="下载xx-net"><a href="#下载xx-net" class="headerlink" title="下载xx-net"></a>下载xx-net</h4><p>下载在<a href="https://github.com/XX-net/XX-Net/blob/master/code/default/download.md" target="_blank" rel="external">Github</a>.这里下载的是稳定版(Stable Version).</p>
<h4 id="启动xx-net"><a href="#启动xx-net" class="headerlink" title="启动xx-net"></a>启动xx-net</h4><p>下载完毕后,解压文件夹，在终端中切换到解压的文件夹下，运行启动命令。如果是在Windows下，运行<code>start.vbs</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./start</div></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>配置主要分为两步，第一步是安装代理自动切换插件，第二步是导入证书。</p>
<h5 id="安装代理切换插件"><a href="#安装代理切换插件" class="headerlink" title="安装代理切换插件"></a>安装代理切换插件</h5><p>打开Google Chrome浏览器，切换到插件管理页面,可以选择Settings-Extensions,也可以访问链接：<code>chrome://extensions/</code>，将文件<code>/opt/xx-net/SwitchyOmega/SwitchyOmega.crx</code>托放到浏览器中，即可安装代理自动切换插件SwitchyOmega。</p>
<h5 id="导入证书"><a href="#导入证书" class="headerlink" title="导入证书"></a>导入证书</h5><p>在Google Chrome浏览器中，访问地址：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chrome://settings/certificates</div></pre></td></tr></table></figure>
<p>选择Authorities选项卡，选择导入(Import)证书。如下图所示。</p>
<img src="/2016/10/15/Fedora-24-using-xxnet/import-authorize.png" alt="Google-Chrome导入证书" title="Google-Chrome导入证书">
<p>证书导入完成后在浏览器中访问地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localhost:8085</div></pre></td></tr></table></figure>
<p>出现如下图所示页面表示导入成功。</p>
<img src="/2016/10/15/Fedora-24-using-xxnet/configuration-success.png" alt="Google-Chrome导入证书" title="Google-Chrome导入证书">
<h4 id="验证配置并使用"><a href="#验证配置并使用" class="headerlink" title="验证配置并使用"></a>验证配置并使用</h4><p>访问Google搜索引擎，如果能够成功访问Google,代表配置成功。如果首次无法访问，可以待后台程序多运行一些时间，几十分钟到几小时不等。一段时间之后再次尝试。需要注意的是XX-Net代理上网不具有匿名性，或者说匿名性很弱。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux开机自动启动程序]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/14/script-startup-with-linux/</url>
      <content type="html"><![CDATA[<h4 id="开机时自动运行"><a href="#开机时自动运行" class="headerlink" title="开机时自动运行"></a>开机时自动运行</h4><p>一般有守护进程的服务在Fedora 24中都可以通过systemctl命令自动运行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl <span class="built_in">enable</span> ServiceName</div></pre></td></tr></table></figure>
<p>对于没有服务的程序，如果想在开机时随系统启动可以通过脚本来实现。</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup openvpn /etc/openvpn/client.conf</div></pre></td></tr></table></figure>
<p>添加nohup后台启动，避免父进程结束的时候一并结束子进程。在<code>/etc/rc.d/rc.local</code>脚本中加入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/openvpn/startopenvpn.sh</div></pre></td></tr></table></figure>
<ul>
<li>0:Halt</li>
<li>1:Single-user mode</li>
<li>2:Multi-user mode</li>
<li>3:Multi-user mode with networking</li>
<li>4:Not used/user-definable</li>
<li>5:Start the system normally with appropriate display manager (with GUI)</li>
<li>6:Reboot</li>
</ul>
<h4 id="登录后自动运行程序"><a href="#登录后自动运行程序" class="headerlink" title="登录后自动运行程序"></a>登录后自动运行程序</h4><p>用户登录时，bash首先自动执行系统管理员建立的全局登录script ：/etc/profile。然后bash在用户起始目录下按顺序查找三个特殊文件中的一个：/.bash_profile、/.bash_login、/.profile，但只执行最先找到的 一个。因此，只需根据实际需要在上述文件中加入命令就可以实现用户登录时自动运行某些程序（类似于DOS下的 Autoexec.bat）。简单的方法,在/etc/inittab 结尾加上你要启动的程序。/etc/profile： 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行。/etc/bashrc: 为每一个运行bash shell的用户执行此文件。~/.bashrc: 当登录时以及每次打开新的shell时,该文件被执行。设置登陆时启动OpenVPN,在<code>/etc/profile</code>文件中添加执行脚本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/openvpn/startopenvpn.sh &amp; &gt;&gt; /tmp/openvpn.log</div></pre></td></tr></table></figure>
<p>其中startopenvpn.sh脚本中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/openvpn</div><div class="line">nohup openvpn /etc/openvpn/client.conf</div></pre></td></tr></table></figure>
<p>需要注意的是，执行时需要切换到<code>/etc/openvpn</code>目录，默认的配置文件例如key等默认在当前目录下寻找。OpenVPN启动时需要root权限。需要成功启动OpenVPN客户端首次登陆时需要以root用户登陆。</p>
<h4 id="联网后自动运行程序"><a href="#联网后自动运行程序" class="headerlink" title="联网后自动运行程序"></a>联网后自动运行程序</h4><p>网络连接建立后运行的脚本可以实现诸多实用功能，如动态域名绑定、连接VPN、上网认证等。实现这一目标的大体思路有两种：在基于NetworkManager的系统中，可配置其dispatcher脚本；Fedora对这一功能支持的不是很好，只能在网络连接建立后运行一个脚本，即/sbin/ifup-local。这个文件默认不存在，需要手动创建。下面的例子用vi编辑/创建这个文件，并添加执行权限。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vi /sbin/ifup-local</div><div class="line">chmod 755 /sbin/ifup-local</div></pre></td></tr></table></figure>
<p><a href="https://en.wikipedia.org/wiki/Runlevel" target="_blank" rel="external">Runlevel</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 使用Stream API]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/14/java-8-using-stream-api/</url>
      <content type="html"><![CDATA[<h4 id="遍历集合中的列"><a href="#遍历集合中的列" class="headerlink" title="遍历集合中的列"></a>遍历集合中的列</h4><p>Stream是Java8中，操作集合的一个重要特性。这里要遍历集合中对象的某一个属性，并取出来用“，”拼接成字符串，传统的写法是写循环遍历每个对象，从中取出某一个属性，进行拼接操作。在Java 8里可以使用Stream API只需要一行代码，非常简洁。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;WorkDayDataInfo&gt; workDayDataInfo = workDayInfos.get(currentWorkDay).getDatas();</div><div class="line">String assignmentIdStream = assignments.stream()</div><div class="line">                        .map(p -&gt; p.getId())</div><div class="line">                        .collect(Collectors.joining(<span class="string">","</span>));</div></pre></td></tr></table></figure>
<p>对于基本数据类型的拼接：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; numbers = Arrays.asList( <span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span> );</div><div class="line"><span class="keyword">return</span> numbers.stream().map( n -&gt; n.toString() ).collect( Collectors.joining( <span class="string">","</span> ) );</div></pre></td></tr></table></figure>
<h4 id="去List除重复数据"><a href="#去List除重复数据" class="headerlink" title="去List除重复数据"></a>去List除重复数据</h4><p>去除List中对象的重复数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;ClientVehicleInfo&gt; distinctVehicles = clientVehicleInfos.stream().distinct().collect(Collectors.toList());</div></pre></td></tr></table></figure>
<p>对于Stream中包含的元素进行去重操作（去重逻辑依赖元素的equals方法），新生成的Stream中没有重复的元素。（根据.equals行为排除所有重复的元素。）</p>
<h4 id="去除String数组重复数据"><a href="#去除String数组重复数据" class="headerlink" title="去除String数组重复数据"></a>去除String数组重复数据</h4><p>其中deviceNumbers为String类型的数组。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deviceNumbers= <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(deviceNumbers)).toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux中的chkconfig、service和systemctl]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/13/linux-chkconfig-service-systemctl/</url>
      <content type="html"><![CDATA[<p>最近在Fedora里使用开机自动启动命令时，提示如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Note: This output shows SysV services only and does not include native</div><div class="line">      systemd services. SysV configuration data might be overridden by native</div><div class="line">      systemd configuration.</div><div class="line"></div><div class="line">      If you want to list systemd services use &apos;systemctl list-unit-files&apos;.</div><div class="line">      To see services enabled on particular target use</div><div class="line">      &apos;systemctl list-dependencies [target]&apos;.</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>原来是systemctl命令要逐渐取代原来的chkconfig和services命令。在目前很多linux的新发行版本里，系统对于daemon的启动管理方法不再采用SystemV形式，而是使用了sytemd的架构来管理daemon的启动。UpStart\SystemV\systemd三种形式。Linux 操作系统的启动首先从 BIOS 开始，接下来进入 boot loader，由 bootloader 载入内核，进行内核初始化。内核初始化的最后一步就是启动 pid 为 1 的 init 进程。这个进程是系统的第一个进程。它负责产生其他所有用户进程。大多数 Linux 发行版的 init 系统是和 System V 相兼容的，被称为 sysvinit。这是人们最熟悉的 init 系统。一些发行版如 Slackware 采用的是 BSD 风格 Init 系统，这种风格使用较少。其他的发行版如 Gentoo 是自己定制的。Ubuntu 和 RHEL 采用 upstart 替代了传统的 sysvinit。而 Fedora 从版本 15 开始使用了一个被称为 systemd 的新 init 系统。如果需要服务随计算机启动时启用，在Fedora 24中，以SSH服务为例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl enable sshd.service</div></pre></td></tr></table></figure>
<p>这样SSH守护进程就会在开机时自动启动了。<br>输出的执行结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/sshd.service to /usr/lib/systemd/system/sshd.service.</div></pre></td></tr></table></figure>
<p>查看SSH守护进程当前的状态。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start sshd.service</div></pre></td></tr></table></figure>
<p>在 Linux 主要应用于服务器和 PC 机的时代，SysVinit 运行非常良好，概念简单清晰。它主要依赖于 Shell 脚本，这就决定了它的最大弱点：启动太慢。在很少重新启动的 Server 上，这个缺点并不重要。而当 Linux 被应用到移动终端设备的时候，启动慢就成了一个大问题。为了更快地启动，人们开始改进 sysvinit，先后出现了 upstart 和 systemd 这两个主要的新一代 init 系统。Upstart 已经开发了 8 年多，在不少系统中已经替换 sysvinit。Systemd 出现较晚，但发展更快，大有取代 upstart 的趋势。而SystemV对应的是service、UpStart对应的是chkconfig、systemd对应的是systemctl命令。</p>
<p>参考来源：</p>
<p><a href="https://www.ibm.com/developerworks/cn/linux/1407_liuming_init1/" target="_blank" rel="external">浅析 Linux 初始化 init 系统，第 1 部分: sysvinit</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fedora 24添加桌面图标]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/12/fedora-desktop-icon/</url>
      <content type="html"><![CDATA[<p>安装好了Google Chrome和Intellij Idea之后没有桌面图标，也没有快速启动图标，每次启动都要打开终端，甚是麻烦。故将图标放在桌面能够节省不少时间，同时也更加方便。首先安装gnome-tweak-tool:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnf install gnome-tweak-tool -y</div></pre></td></tr></table></figure>
<p>运行<code>gnome-tweak-tool</code>命令，在弹出的窗口的Desktop选项卡中打开Icons on Desktop.</p>
<a id="more"></a>
<h4 id="桌面图标"><a href="#桌面图标" class="headerlink" title="桌面图标"></a>桌面图标</h4><p>切换到Desktop目录。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /home/dolphin/Desktop</div></pre></td></tr></table></figure>
<p>dolphin是当前用户名。新建Google-Chrome.desktop文件。内容为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env xdg-open</span></div><div class="line"></div><div class="line">[Desktop Entry]</div><div class="line">Encoding=UTF-8</div><div class="line">Name=Google Chrome</div><div class="line">GenericName=Web Browser</div><div class="line">Exec=<span class="string">'/opt/google/chrome/google-chrome'</span></div><div class="line">Icon=/opt/google/chrome/product_logo_256.png</div><div class="line">Terminal=<span class="literal">false</span></div><div class="line">Type=Application</div><div class="line">Categories=Network;</div><div class="line">Name[en_US]=Google Chrome.desktop</div></pre></td></tr></table></figure>
<p>如下是Intellij Idea的桌面图标配置文件:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env xdg-open</span></div><div class="line"></div><div class="line">[Desktop Entry]</div><div class="line">Encoding=UTF-8</div><div class="line">Name=Intellij Idea</div><div class="line">GenericName=IDE</div><div class="line">Exec=<span class="string">'/opt/idea/idea-IC-162.2032.8/bin/idea.sh'</span></div><div class="line">Icon=/opt/idea/idea-IC-162.2032.8/bin/idea.png</div><div class="line">Terminal=<span class="literal">false</span></div><div class="line">Type=Application</div><div class="line">Categories=IDE;</div><div class="line">Name[en_US]=Intellij Idea</div></pre></td></tr></table></figure>
<p>保存之后双击打开，一定要双击打开哟，否则启动图标不会出现，会出现一个确认界面。提示需要授权启动项，选择授权即可。配置好图标后的效果如图所示。</p>

<h4 id="快速启动图标"><a href="#快速启动图标" class="headerlink" title="快速启动图标"></a>快速启动图标</h4><p>要让图标在快速启动栏里出现，直接将刚才新建Google-Chrome.desktop文件复制到<code>/usr/share/application</code>目录下即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp Google-Chrome.desktop /usr/share/application</div></pre></td></tr></table></figure>
<p>配置好快速启动图标后的效果如下如所示。</p>

<p><code>/usr/share/application</code>目录是Gnome中所有用户启动的快捷方式存放的目录。局部的快捷方式存放的目录在：<code>~/.local/share/applications</code>。desktop文件的结构如下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[Desktop Entry]</div><div class="line">Encoding=UTF-8 //字符编码</div><div class="line">Name=vim　　 //显示的名字</div><div class="line">MimeType=text/plain; //类型</div><div class="line">Exec=vim %f //运行的程序 %f表示一个参数</div><div class="line">Type=Application　 //类型</div><div class="line">Terminal=true //是否使用终端</div><div class="line">NoDisplay=true //是否显示在gnome菜单里</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Intellij Idea热部署]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/10/intellij-hot-deply/</url>
      <content type="html"><![CDATA[<p>下午遇到一个问题，在开发时，HTML修改后浏览器刷新始终不显示修改后的效果。经过朋友的指导，原来是要选择Exploded包进行部署。如图所示。</p>
<a id="more"></a>

<p>在Intellij的官方文档上如此描述：To have the application deployed as a directory, choose Web Application: Exploded.To have the application deployed in the packed form, choose Web Application: Archive.大意是如果想以目录形式部署，选择Exploded(adj. 爆炸了的；分解的；被破除的)模式,如果想以打包模式部署，则选择Archive模式。Exploded模式带来的好处是支持热部署，这样不用在开发过程中每次修改了内容后(HTML\JSP)都重新部署，重启一次大概要1-3分钟，有此可见大大提高了开发效率。缺点是多次部署后，Tomcat可能内存溢出，此时就必须重启Tomcat。</p>
<p>参考资料：</p>
<p><a href="http://stackoverflow.com/questions/1289358/what-does-exploded-development-mean-in-java" target="_blank" rel="external">What does Exploded Development mean? (In Java)</a></p>
<p><a href="https://www.jetbrains.com/help/idea/2016.2/configuring-web-application-deployment.html" target="_blank" rel="external">Configuring Web Application Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fedora 24 OpenVPN客户端配置]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/09/fedora-openvpn-client/</url>
      <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>输入如下命令安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Fedora 24安装命令</span></div><div class="line">dnf install openvpn -y</div><div class="line"><span class="comment">#CentOS 6.8安装命令(可输入lsb_release -a命令查看版本)</span></div><div class="line">yum intall openvpn -y</div></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="生成客户端文件"><a href="#生成客户端文件" class="headerlink" title="生成客户端文件"></a>生成客户端文件</h5><p>到OpenVPN服务端<code>easy-rsa</code>目录下，输入如下命令生成客户端key：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">build-key client</div></pre></td></tr></table></figure>
<p>这里介绍在Fedora中如何设置OpenVPN客户端。将生成的客户端文件拷贝到Fedora的<code>/etc/openvpn</code>配置目录中即可，生成的客户端文件有：</p>
<ul>
<li>ca.crt</li>
<li>client.crt</li>
<li>client.key</li>
<li>client.ovpn</li>
</ul>
<p>在Fedora中将client.ovpn改为client.conf即可。启动OpenVPN客户端(root权限):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openvpn client.conf</div></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h5><p>输入如下命令开启开启自动启动：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#检查OpenVPN是否在本运行级别下设置为开机启动</span></div><div class="line">chkconfig --list openvpn</div><div class="line"><span class="comment">#如果没设置启动就设置下</span></div><div class="line">chkconfig --level 2345 openvpn on</div><div class="line">chkconfig openvpn on</div><div class="line"><span class="comment">#重新启动</span></div><div class="line">service sshd restart</div><div class="line"><span class="comment">#看是否启动了1194端口.确认下</span></div><div class="line">netstat -antp |grep openvpn</div><div class="line"><span class="comment">#看看是否放行了1194口</span></div><div class="line">iptables -nL</div><div class="line"><span class="comment">#setup----&gt;防火墙设置   如果没放行就设置放行.</span></div></pre></td></tr></table></figure>
<p>chkconfig provides a simple command-line tool for maintaining the <code>/etc/rc[0-6].d</code> directory  hierarchy by relieving system administrators of the task of directly manipulating the numerous symbolic links in those directories.</p>
<p>delete from positional where vtime in ( select vtime from positional group by vtime having count(<em>)&gt;1) and id not in (select top 1 id from positional group by vtime having count(</em>)&gt;1 );</p>
<h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p>在Fedora 24中运行<code>openvpn client.conf</code>后提示如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Sat Oct  8 23:32:19 2016 Socket Buffers: R=[87380-&gt;87380] S=[16384-&gt;16384]</div><div class="line">Sat Oct  8 23:32:19 2016 Attempting to establish TCP connection with [AF_INET]114.24.5.55:1194 [nonblock]</div><div class="line">Sat Oct  8 23:32:20 2016 TCP connection established with [AF_INET]114.24.5.55:1194</div><div class="line">Sat Oct  8 23:32:20 2016 TCPv4_CLIENT link local: [undef]</div><div class="line">Sat Oct  8 23:32:20 2016 TCPv4_CLIENT link remote: [AF_INET]114.24.5.55:1194</div><div class="line">Sat Oct  8 23:32:20 2016 TLS: Initial packet from [AF_INET]114.24.5.55:1194, sid=efc00936 581068f2</div><div class="line">Sat Oct  8 23:32:20 2016 VERIFY OK: depth=1, C=US, ST=CA, L=SanFrancisco, O=OpenVPN, OU=changeme, CN=OpenVPN_CA, name=changeme, emailAddress=mail@host.domain</div><div class="line">Sat Oct  8 23:32:20 2016 VERIFY ERROR: depth=0, error=certificate signature failure: C=US, ST=CA, L=SanFrancisco, O=OpenVPN, OU=changeme, CN=server, name=changeme, emailAddress=mail@host.domain</div><div class="line">Sat Oct  8 23:32:20 2016 OpenSSL: error:14090086:SSL routines:ssl3_get_server_certificate:certificate verify failed</div><div class="line">Sat Oct  8 23:32:20 2016 TLS_ERROR: BIO read tls_read_plaintext error</div><div class="line">Sat Oct  8 23:32:20 2016 TLS Error: TLS object -&gt; incoming plaintext read error</div><div class="line">Sat Oct  8 23:32:20 2016 TLS Error: TLS handshake failed</div><div class="line">Sat Oct  8 23:32:20 2016 Fatal TLS error (check_tls_errors_co), restarting</div><div class="line">Sat Oct  8 23:32:20 2016 SIGUSR1[soft,tls-error] received, process restarting</div><div class="line">Sat Oct  8 23:32:20 2016 Restart pause, 5 second(s)</div></pre></td></tr></table></figure>
<p>发生此错误的原因是OpenSSL包中，当前使用的OpenSSL(版本：OpenSSL 1.0.0e 6 Sep 2011)默认的摘要算法为MD5。而MD5算法在目前是非常不安全的(Hash碰撞攻击等)，较大的彩虹表可以轻易的找出Hash对应值。所以在较新的操作系统(这里是Fedora 24)已经默认不使用MD5算法，所以会有此错误(Windows 7支持MD5)。解决此问题的思路不外乎2种，一种是使用sha256、sha512等摘要算法(MD)，另一种就是启用操作系统对MD5的支持,推荐前者。</p>
<h5 id="修改加密方式-推荐"><a href="#修改加密方式-推荐" class="headerlink" title="修改加密方式(推荐)"></a>修改加密方式(推荐)</h5><p>修改加密方式在OpenVPN目录的文件中(我的是在C:\Program Files (x86)\OpenVPN\easy-rsa\openssl-1.0.0.cnf)。将</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">default_md    = md5            # use public key default MD</div></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">default_md    = sha256            # use public key default MD</div></pre></td></tr></table></figure>
<h5 id="启用操作系统MD5支持"><a href="#启用操作系统MD5支持" class="headerlink" title="启用操作系统MD5支持"></a>启用操作系统MD5支持</h5><p>Temporally enable it.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> NSS_HASH_ALG_SUPPORT=+MD5</div><div class="line"><span class="built_in">export</span> OPENSSL_ENABLE_MD5_VERIFY=1</div></pre></td></tr></table></figure>
<p>Enable MD5 support through NetworkManager</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo vim /usr/lib/systemd/system/NetworkManager.service</div></pre></td></tr></table></figure>
<p>Append this.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[Service]</div><div class="line">Environment=&quot;OPENSSL_ENABLE_MD5_VERIFY=1 NSS_HASH_ALG_SUPPORT=+MD5&quot;</div></pre></td></tr></table></figure>
<p>And restart daemon</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl daemon-reload</div><div class="line">$ sudo systemctl restart NetworkManager.service</div></pre></td></tr></table></figure>
<p>提示如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Sun Oct 09 11:33:22 2016 OpenVPN 2.2.2 Win32-MSVC++ [SSL] [LZO2] [PKCS11] built on Dec 15 2011</div><div class="line">Sun Oct 09 11:33:22 2016 NOTE: OpenVPN 2.1 requires &apos;--script-security 2&apos; or higher to call user-defined scripts or executables</div><div class="line">Sun Oct 09 11:33:22 2016 LZO compression initialized</div><div class="line">Sun Oct 09 11:33:22 2016 Control Channel MTU parms [ L:1544 D:140 EF:40 EB:0 ET:0 EL:0 ]</div><div class="line">Sun Oct 09 11:33:22 2016 Socket Buffers: R=[8192-&gt;8192] S=[8192-&gt;8192]</div><div class="line">Sun Oct 09 11:33:22 2016 Data Channel MTU parms [ L:1544 D:1450 EF:44 EB:135 ET:0 EL:0 AF:3/1 ]</div><div class="line">Sun Oct 09 11:33:22 2016 Local Options hash (VER=V4): &apos;69109d17&apos;</div><div class="line">Sun Oct 09 11:33:22 2016 Expected Remote Options hash (VER=V4): &apos;c0103fa8&apos;</div><div class="line">Sun Oct 09 11:33:22 2016 Attempting to establish TCP connection with 113.204.5.58:1194</div><div class="line">Sun Oct 09 11:33:23 2016 TCP: connect to 113.204.5.58:1194 failed, will try again in 5 seconds: Connection refused (WSAECONNREFUSED)</div><div class="line">Sun Oct 09 11:33:29 2016 TCP: connect to 113.204.5.58:1194 failed, will try again in 5 seconds: Connection refused (WSAECONNREFUSED)</div><div class="line">Sun Oct 09 11:33:35 2016 TCP: connect to 113.204.5.58:1194 failed, will try again in 5 seconds: Connection refused (WSAECONNREFUSED)</div><div class="line">Sun Oct 09 11:33:41 2016 TCP: connect to 113.204.5.58:1194 failed, will try again in 5 seconds: Connection refused (WSAECONNREFUSED)</div></pre></td></tr></table></figure>
<p>首先检查服务端OpenVPN是否已经启动；其次检查服务端的配置文件无误，这里是将位数由1024改为2048后在服务端的配置文件没有修改为2048pem。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Diffie hellman parameters.</div><div class="line"># Generate your own with:</div><div class="line">#   openssl dhparam -out dh1024.pem 1024</div><div class="line"># Substitute 2048 for 1024 if you are using</div><div class="line"># 2048 bit keys.</div><div class="line">dh dh2048.pem #将此处由dh1024.pem修改为dh2048.pem即可</div></pre></td></tr></table></figure>
<p>出现如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Tue Oct 11 12:44:00 2016 Socket Buffers: R=[124928-&gt;124928] S=[124928-&gt;124928]</div><div class="line">Tue Oct 11 12:44:00 2016 UDPv4 link local: [undef]</div><div class="line">Tue Oct 11 12:44:00 2016 UDPv4 link remote: [AF_INET]192.168.24.243:1194</div><div class="line">Tue Oct 11 12:45:00 2016 TLS Error: TLS key negotiation failed to occur within 60 seconds (check your network connectivity)</div><div class="line">Tue Oct 11 12:45:00 2016 TLS Error: TLS handshake failed</div><div class="line">Tue Oct 11 12:45:00 2016 SIGUSR1[soft,tls-error] received, process restarting</div><div class="line">Tue Oct 11 12:45:00 2016 Restart pause, 2 second(s)</div></pre></td></tr></table></figure>
<p>检查防火墙是否过滤了1194端口的数据。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp --dport 1194 -j ACCEPT</div><div class="line"><span class="comment">#保存防火墙规则</span></div><div class="line">/etc/init.d/iptables save</div></pre></td></tr></table></figure>
<p>检查配置文件是否通过TCP协议而不是UDP。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Intellij IDEA推荐插件]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/08/intelli-idea-plugin/</url>
      <content type="html"><![CDATA[<h4 id="presentation-assistant"><a href="#presentation-assistant" class="headerlink" title="presentation assistant"></a>presentation assistant</h4><p>这款插件可以实时的在Intellij屏幕底部展示当前按下的快捷键，包括Windows的快捷键和Mac的快捷键，可以帮助您记忆快捷键，清楚当前的行为(Action)。效果如下图所示。</p>
<a id="more"></a>

<h4 id="Grep-Console"><a href="#Grep-Console" class="headerlink" title="Grep Console"></a>Grep Console</h4><p>允许你定义一系列将通过控制台输出或文件测试的正则表达式。匹配代码行的每个表达式将会影响整行的样式，或播放声音。例如，错误消息可以被设置在一个红色的背景中显示。例如错误(ERROR)输出为红色，报警(WARNING)输出为黄色，信息(INFO)输出为绿色。</p>
<h4 id="JRebel-for-IntelliJ-Commercial"><a href="#JRebel-for-IntelliJ-Commercial" class="headerlink" title="JRebel for IntelliJ(Commercial)"></a>JRebel for IntelliJ(Commercial)</h4><p>JRebel的热部署可以让你修改代码以后不用重新启动项目即可加载效果，即所谓的热部署，可以大大提高开发效率。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[rm命令安全]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/08/rm-command/</url>
      <content type="html"><![CDATA[<p>rm命令是一个非常危险的命令，由于这个命令引发的事故不少，最近也是深深的体会到了。在此记录下如何将rm命令变为安全的命令。对于需要在Linux下开发的朋友来说，这一步(屏蔽rm危险操作)觉得是必须的，非常、非常、非常重要。怎么强调都不为过。一定要花时间做rm命令的安全工作。</p>
<a id="more"></a>
<h4 id="建立回收站机制"><a href="#建立回收站机制" class="headerlink" title="建立回收站机制"></a>建立回收站机制</h4><h5 id="回收站机制-建立新命令"><a href="#回收站机制-建立新命令" class="headerlink" title="回收站机制-建立新命令"></a>回收站机制-建立新命令</h5><p>在/usr/bin目录下建立文件erase：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/bin</div><div class="line">touch erase</div></pre></td></tr></table></figure>
<p>拷贝如下Shell脚本到文件中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line">RecycleB<span class="keyword">in</span>=~/.temp</div><div class="line"></div><div class="line">((<span class="variable">$#</span>==0)) &amp;&amp; &#123; <span class="built_in">echo</span> <span class="string">"No paraments!"</span>;<span class="built_in">exit</span> 1; &#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ ! <span class="_">-d</span> <span class="variable">$RecycleBin</span> ]; <span class="keyword">then</span></div><div class="line">    mkdir <span class="variable">$RecycleBin</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $*</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="keyword">if</span> <span class="built_in">test</span> <span class="_">-e</span> <span class="variable">$i</span></div><div class="line">        <span class="keyword">then</span></div><div class="line">            <span class="built_in">cd</span> $(dirname <span class="variable">$i</span>)</div><div class="line">            mv <span class="_">-f</span> $(basename <span class="variable">$i</span>) <span class="variable">$RecycleBin</span>/$(find $(<span class="built_in">pwd</span>) -maxdepth 1 -name $(basename <span class="variable">$i</span>) | tr <span class="string">"/"</span> <span class="string">"="</span>)</div><div class="line">            <span class="built_in">cd</span> -</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span>:No such file or directory!"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>添加执行权限：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 777 erase</div></pre></td></tr></table></figure>
<p>此脚本会在用户目录下新建一个隐藏的temp文件夹，将删除的文件移动到此文件夹下。命名为：<code>=用户名=删除的文件名=</code>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ambari Metrics重装]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/07/ambari-metrics-reinstall/</url>
      <content type="html"><![CDATA[<h4 id="移除服务"><a href="#移除服务" class="headerlink" title="移除服务"></a>移除服务</h4><p>采用Ambari REST API移除相关服务。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#停止服务</span></div><div class="line">curl -i -H <span class="string">"X-Requested-By: ambari"</span> -u admin:admin -X PUT <span class="_">-d</span> <span class="string">'&#123;"RequestInfo":&#123;"context":"Stop Service"&#125;,"Body":&#123;"ServiceInfo":&#123;"state":"INSTALLED"&#125;&#125;&#125;'</span> http://192.168.24.226:8080/api/v1/clusters/zwlbs/services/AMBARI_METRICS</div><div class="line"><span class="comment">#查看服务状态</span></div><div class="line">curl -u admin:admin -H <span class="string">"X-Requested-by:ambari"</span> -i -k -X GET http://192.168.24.226:8080/api/v1/clusters/zwlbs/services/AMBARI_METRICS/</div><div class="line"><span class="comment">#移除服务</span></div><div class="line">curl -u admin:admin -H <span class="string">"X-Requested-By: ambari"</span> -X DELETE http://192.168.24.226:8080/api/v1/clusters/zwlbs/services/AMBARI_METRICS</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>cURL是一个命令行工具，通过不同的协议传输数据，1997年首次发布。cURL is a computer software project providing a library and command-line tool for transferring data using various protocols. The cURL project produces two products, libcurl and cURL. It was first released in 1997. The name originally stood for “see URL”.curl支持的协议有FTP, FTPS, HTTP, HTTPS, SCP, SFTP, TFTP, TELNET, DICT, LDAP, LDAPS, FILE, POP3, IMAP, SMTP and RTSP at the time of this writing. Wget支持HTTP, HTTPS and FTP三种协议.</p>
<h4 id="移除包"><a href="#移除包" class="headerlink" title="移除包"></a>移除包</h4><p>移除各个节点啊上安装的包。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#主节点</span></div><div class="line">yum remove ambari-metrics-hadoop-sink-2.2.2.0-460.x86_64 -y</div><div class="line">yum remove ambari-metrics-monitor-2.2.2.0-460.x86_64 -y</div><div class="line">yum remove ambari-metrics-grafana-2.2.2.0-460.x86_64 -y</div><div class="line">yum remove ambari-metrics-collector-2.2.2.0-460.x86_64 -y</div><div class="line"><span class="comment">#从节点</span></div><div class="line">yum remove ambari-metrics-monitor-2.2.2.0-460.x86_64 -y</div><div class="line">yum remove ambari-metrics-hadoop-sink-2.2.2.0-460.x86_64 -y</div></pre></td></tr></table></figure>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>删除与Ambari Metrics相关的文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">rm -rf</div><div class="line"><span class="comment">#Ambari Metrics</span></div><div class="line">/usr/lib/ambari-metrics-grafana</div><div class="line">/usr/lib/ambari-metrics-hadoop-sink</div><div class="line">/usr/lib/ambari-metrics-kafka-sink</div><div class="line">/var/lib/ambari-metrics-collector</div><div class="line">/var/lib/ambari-metrics-grafana</div><div class="line">/var/run/ambari-metrics-collector</div><div class="line">/var/run/ambari-metrics-monitor</div><div class="line">/var/run/ambari-metrics-grafana</div><div class="line">/var/<span class="built_in">log</span>/ambari-metrics-collector</div><div class="line">/var/<span class="built_in">log</span>/ambari-metrics-monitor</div><div class="line">/var/<span class="built_in">log</span>/ambari-metrics-grafana</div><div class="line">/etc/ambari-metrics-collector</div><div class="line">/etc/ambari-metrics-monitor</div><div class="line">/etc/ambari-metrics-grafana</div></pre></td></tr></table></figure>
<p>可将以上代码写入Shell脚本，执行即可。</p>
<h4 id="添加服务"><a href="#添加服务" class="headerlink" title="添加服务"></a>添加服务</h4><p>以上步骤完成后，重新到Ambari UI界面添加Ambari Metrics服务即可。如果哪个服务实在无法修复，最无奈的方法，重装此服务。</p>
<p>参考文章：</p>
<p><a href="http://henning.kropponline.de/2015/06/07/services-and-state-with-ambari-rest-api/" target="_blank" rel="external">Services and State with Ambari REST API</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[卸载HDP和Ambari]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/07/ambari-uninstall/</url>
      <content type="html"><![CDATA[<h4 id="移除Ambari服务"><a href="#移除Ambari服务" class="headerlink" title="移除Ambari服务"></a>移除Ambari服务</h4><p>依次运行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -qa | grep ambari</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ambari-server stop</div><div class="line">ambari-server reset</div><div class="line">ambari-agent stop</div><div class="line">rpm -qa | grep ambari</div><div class="line"><span class="comment">#移除Ambari Server安装包</span></div><div class="line">yum erase ambari-server -y</div><div class="line">rm -rf /var/lib/ambari-server</div><div class="line">rm -rf /var/run/ambari-server</div><div class="line">rm -rf /usr/lib/amrbari-server</div><div class="line">rm -rf /etc/ambari-server</div><div class="line">rm -rf /var/<span class="built_in">log</span>/ambari-server</div><div class="line">rm -rf /usr/lib/python2.6/site-packages/ambari*</div></pre></td></tr></table></figure>
<h4 id="Ambari-Agent-Cleanup-Script"><a href="#Ambari-Agent-Cleanup-Script" class="headerlink" title="Ambari Agent Cleanup Script"></a>Ambari Agent Cleanup Script</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python /usr/lib/python2.6/site-packages/ambari_agent/HostCleanup.py <span class="_">-s</span> -k users</div></pre></td></tr></table></figure>
<h4 id="Remove-Packages"><a href="#Remove-Packages" class="headerlink" title="Remove Packages"></a>Remove Packages</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum erase -y `yum list | grep @HDP-2 | awk <span class="string">'&#123; print $1 &#125;'</span>`</div><div class="line">yum erase -y `yum list | grep 2_3_ | awk <span class="string">'&#123; print $1&#125;'</span>`</div></pre></td></tr></table></figure>
<h4 id="移除文件夹-Clean-Folders"><a href="#移除文件夹-Clean-Folders" class="headerlink" title="移除文件夹(Clean Folders)"></a>移除文件夹(Clean Folders)</h4><p>移除文件夹(Clean Folders)脚本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">rm -rf</div><div class="line"><span class="comment"># Log dirs</span></div><div class="line">/var/<span class="built_in">log</span>/ambari-metrics-monitor</div><div class="line">/var/<span class="built_in">log</span>/hadoop</div><div class="line">/var/<span class="built_in">log</span>/hbase</div><div class="line">/var/<span class="built_in">log</span>/hadoop-yarn</div><div class="line">/var/<span class="built_in">log</span>/hadoop-mapreduce</div><div class="line">/var/<span class="built_in">log</span>/hive</div><div class="line">/var/<span class="built_in">log</span>/oozie</div><div class="line">/var/<span class="built_in">log</span>/zookeeper</div><div class="line">/var/<span class="built_in">log</span>/flume</div><div class="line">/var/<span class="built_in">log</span>/hive-hcatalog</div><div class="line">/var/<span class="built_in">log</span>/falcon</div><div class="line">/var/<span class="built_in">log</span>/knox</div><div class="line">/var/lib/hive</div><div class="line">/var/lib/oozie</div><div class="line"></div><div class="line"><span class="comment"># DataNode HDFS dirs</span></div><div class="line">/grid*/hadoop</div><div class="line"></div><div class="line"><span class="comment"># Hadoop dirs</span></div><div class="line">/usr/hdp</div><div class="line">/usr/bin/hadoop</div><div class="line">/tmp/hadoop</div><div class="line">/var/hadoop</div><div class="line">/hadoop/*</div><div class="line">/<span class="built_in">local</span>/opt/hadoop</div><div class="line"></div><div class="line"><span class="comment"># Config dirs</span></div><div class="line">/etc/hadoop</div><div class="line">/etc/hbase</div><div class="line">/etc/oozie</div><div class="line">/etc/phoenix</div><div class="line">/etc/hive</div><div class="line">/etc/zookeeper</div><div class="line">/etc/flume</div><div class="line">/etc/hive-hcatalog</div><div class="line">/etc/tez</div><div class="line">/etc/falcon</div><div class="line">/etc/knox</div><div class="line">/etc/hive-webhcat</div><div class="line">/etc/mahout</div><div class="line">/etc/pig</div><div class="line">/etc/hadoop-httpfs</div><div class="line"></div><div class="line"><span class="comment"># PIDs</span></div><div class="line">/var/run/hadoop</div><div class="line">/var/run/hbase</div><div class="line">/var/run/hadoop-yarn</div><div class="line">/var/run/hadoop-mapreduce</div><div class="line">/var/run/hive</div><div class="line">/var/run/oozie</div><div class="line">/var/run/zookeeper</div><div class="line">/var/run/flume</div><div class="line">/var/run/hive-hcatalog</div><div class="line">/var/run/falcon</div><div class="line">/var/run/webhcat</div><div class="line">/var/run/knox</div><div class="line"></div><div class="line"><span class="comment"># ZK db files</span></div><div class="line">/<span class="built_in">local</span>/home/zookeeper/*</div><div class="line"></div><div class="line"><span class="comment"># libs</span></div><div class="line">/usr/lib/flume</div><div class="line">/usr/lib/storm</div><div class="line">/var/lib/hadoop-hdfs</div><div class="line">/var/lib/hadoop-yarn</div><div class="line">/var/lib/hadoop-mapreduce</div><div class="line">/var/lib/flume</div><div class="line">/var/lib/knox</div><div class="line"></div><div class="line"><span class="comment">#Ambari Metrics</span></div><div class="line">/usr/lib/ambari-metrics-grafana</div><div class="line">/usr/lib/ambari-metrics-hadoop-sink</div><div class="line">/usr/lib/ambari-metrics-kafka-sink</div><div class="line">/var/lib/ambari-metrics-collector</div><div class="line">/var/lib/ambari-metrics-grafana</div><div class="line">/var/run/ambari-metrics-collector</div><div class="line">/var/run/ambari-metrics-monitor</div><div class="line">/var/run/ambari-metrics-grafana</div><div class="line">/var/<span class="built_in">log</span>/ambari-metrics-collector</div><div class="line">/var/<span class="built_in">log</span>/ambari-metrics-monitor</div><div class="line">/var/<span class="built_in">log</span>/ambari-metrics-grafana</div><div class="line">/etc/ambari-metrics-collector</div><div class="line">/etc/ambari-metrics-monitor</div><div class="line">/etc/ambari-metrics-grafana</div><div class="line"></div><div class="line"><span class="comment"># other</span></div><div class="line">/var/tmp/oozie</div></pre></td></tr></table></figure>
<h4 id="Clean-Repository"><a href="#Clean-Repository" class="headerlink" title="Clean Repository"></a>Clean Repository</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum clean all</div></pre></td></tr></table></figure>
<p>在重装之前一定要移除干净。</p>
<p>各个服务的目录位置如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/etc/&lt;service_name&gt;</div><div class="line">/usr/lib/&lt;service_name&gt;</div><div class="line">/var/lib/&lt;service_name&gt;</div><div class="line">/var/log/&lt;service_name&gt;</div><div class="line">/var/run/&lt;service_name&gt;</div><div class="line">/var/tmp/&lt;service_name&gt;</div><div class="line">/tmp/&lt;service_name&gt;</div></pre></td></tr></table></figure>
<p>参考资料来自：</p>
<p><a href="http://henning.kropponline.de/2016/04/24/uninstalling-and-cleaning-a-hdp-node/" target="_blank" rel="external">Uninstalling and Cleaning a HDP Node</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[dnf与yum]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/05/dnf-vs-yum/</url>
      <content type="html"><![CDATA[<p>Fedora 24使用yum命令时标记为过期，推荐使用dnf安装。想了解一下Fedora为什么要从yum转移到dnf。大致有如下几个原因：</p>
<a id="more"></a>
<ul>
<li>Dependency resolution of YUM is a nightmare(包依赖解析简直是噩梦–不觉得啊)</li>
<li>YUM don’t have a documented API(没有API文档-很稀奇吗，没文档才正常吧)</li>
<li>No support for extensions other than Python.</li>
<li>Lower memory reduction and less automatic synchronization of metadata – a time taking process.</li>
</ul>
<p>DNF包管理器克服了YUM包管理器的一些瓶颈，提升了包括用户体验，内存占用，依赖分析，运行速度等多方面的内容。DNF使用 RPM, libsolv 和 hawkey库进行包管理操作。DNF从Yum分支出来，使用专注于性能的C语言库hawkey进行依赖关系解析工作，大幅度提升包管理操作效率并降低内存消耗。Yum不能“Python 3 as default”，而DNF支持Python 2和Python 3。（Python 3分支自2008年发布以来积极开发了五年，已经成熟和稳定，而目前仍在维护的Python 2分支不增加新特性，只接受bug和安全修正，它最早的版本是在2000年发布的。）</p>
<p>参考资料来自：</p>
<p><a href="http://www.tecmint.com/dnf-next-generation-package-management-utility-for-linux/" target="_blank" rel="external">DNF – The Next Generation Package Management Utility for RPM Based Distributions</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ambari与HDP离线安装]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/05/ambari-offline-install/</url>
      <content type="html"><![CDATA[<p>Ambari安装包大概有400MB，HDP所包含的所有的服务(HDFS/ZooKeeper/Kafka/Flume)大概在7GB+，采用yum安装时速度在10KB以内，简直是让人绝望的速度。所以采用离线安装，为了速度，掏出无耻的迅雷(wget下载是假的，不过可以试一试，速度不理想换迅雷)，搭建本地YUM服务。</p>
<h4 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h4><p>如果不知道应该下载哪个版本，可以到Repository的配置文件中查看当前版本。路径为：<code>/etc/yum.repo.d/</code>，查看文件ambari.repo、HDP.rep和HDP-UTILS.repo即可。</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#下载HDP-UTILS包</span></div><div class="line">wget http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.20/repos/centos7/HDP-UTILS-1.1.0.20-centos7.tar.gz</div><div class="line"></div><div class="line"><span class="comment">#下载HDP包</span></div><div class="line">wget http://public-repo-1.hortonworks.com/HDP/centos7/2.x/updates/2.4.3.0/HDP-2.4.3.0-centos7-rpm.tar.gz</div></pre></td></tr></table></figure>
<p>HDP-UTILS-1.1.0.20-centos6.tar.gz包有600多MB，HDP-2.4.3.0-centos6-rpm.tar.gz包有9GB之巨。包含很多服务，瞬间理解安装的时候超时是怎么回事了。下载完毕之后将包Copy到服务器上：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scp HDP-UTILS-1.1.0.20-centos6.tar.gzip root@192.168.24.226:/data/<span class="built_in">source</span></div><div class="line">scp ambari-2.2.2.0-centos7.tar.gz root@192.168.24.226:/data/<span class="built_in">source</span></div></pre></td></tr></table></figure>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -xvf HDP-UTILS-1.1.0.20-centos6.tar.gzip -C /data/<span class="built_in">source</span>/</div></pre></td></tr></table></figure>
<p>切换到目录(/data/source)下,使用Python搭建一个简单的服务器：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -mSimpleHTTPServer &amp;</div></pre></td></tr></table></figure>
<p>解压之后，会有HDP，HDP-UTILS-1.1.0.20的目录生成。HDP目录：包含Hadoop的生态圈的组件，比如hdfs，hive，hbase，mahout等。HDP-UTILS-1.1.0.17目录：包含HDP平台所包含的工具组件等，比如nagios，ganglia，puppet等。</p>
<h4 id="修改Repo"><a href="#修改Repo" class="headerlink" title="修改Repo"></a>修改Repo</h4><p>切换到Repository配置目录下，编辑文件ambari.repo，将源地址修改为本地地址，yum将从本地地址下载安装包进行安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#VERSION_NUMBER=2.2.2.0-460</div><div class="line"></div><div class="line">[Updates-ambari-2.2.2.0]</div><div class="line">name=ambari-2.2.2.0 - Updates</div><div class="line">baseurl=http://192.168.24.226:8000/AMBARI-2.2.2.0/centos7/2.2.2.0-460/</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=http://192.168.24.226:8000/AMBARI-2.2.2.0/centos7/2.2.2.0-460/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</div><div class="line">enabled=1</div><div class="line">priority=1</div></pre></td></tr></table></figure>
<h4 id="安装Ambari-Server"><a href="#安装Ambari-Server" class="headerlink" title="安装Ambari Server"></a>安装Ambari Server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装Ambari Server</span></div><div class="line">yum install ambari-server -y</div><div class="line"><span class="comment">#启动Ambari Server</span></div><div class="line">ambari-server start</div></pre></td></tr></table></figure>
<p>下载速度40MB/s，与6.7KB/s的速度对比，幸福感油然而生。</p>
<h4 id="配置Ambari-Server"><a href="#配置Ambari-Server" class="headerlink" title="配置Ambari Server"></a>配置Ambari Server</h4><p>输入如下命令配置Ambari Server：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ambari-server setup</div></pre></td></tr></table></figure>
<p>数据库这里使用默认的内嵌数据库PostgreSQL。</p>
<h4 id="启动Ambari"><a href="#启动Ambari" class="headerlink" title="启动Ambari"></a>启动Ambari</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#启动Ambari Server</span></div><div class="line">ambari-server start</div></pre></td></tr></table></figure>
<p>注：</p>
<p><strong>etc目录解释</strong>：Host-specific system-wide configuration files There has been controversy over the meaning of the name itself. In early versions of the UNIX Implementation Document from Bell labs, /etc is referred to as the etcetera(n. 等等；附加物；附加的人；以及其它) directory, as this directory historically held everything that did not belong elsewhere (however, the FHS restricts /etc to static configuration files and may not contain binaries). Since the publication of early documentation, the directory name has been re-designated in various ways. Recent interpretations include backronyms such as “Editable Text Configuration” or “Extended Tool Chest”.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fedora 20 安装NodeJs]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/05/fedora-20-install-nodejs/</url>
      <content type="html"><![CDATA[<p>安装环境：</p>
<ul>
<li><p>Fedora 20 i386</p>
</li>
<li><p>nodejs 6.7.0</p>
</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>使用Hexo写博客需要安装NodeJs,更新系统</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum update -y</div></pre></td></tr></table></figure>
<p>安装GCC编译环境</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install g++ curl openssl openssl-devel make gcc-c++ glibc-devel -y</div></pre></td></tr></table></figure>
<p>下载NodeJS</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir /root/temp ; <span class="built_in">cd</span> /root</div><div class="line">wget http://nodejs.org/dist/node-latest.tar.gz</div><div class="line">tar -xvpzf node-latest.tar.gz</div><div class="line"><span class="built_in">cd</span> node-v*</div></pre></td></tr></table></figure>
<p>编译安装,编译安装的时间较长，需要耐心等待，编译大概在15分钟左右。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure</div><div class="line">make install</div></pre></td></tr></table></figure>
<p>安装NPM</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://npmjs.org/install.sh | sh</div></pre></td></tr></table></figure>
<p>查看安装的NodeJs版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node --version</div></pre></td></tr></table></figure>
<h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><h5 id="usr-bin-env-‘python’-No-such-file-or-directory"><a href="#usr-bin-env-‘python’-No-such-file-or-directory" class="headerlink" title="/usr/bin/env: ‘python’: No such file or directory"></a>/usr/bin/env: ‘python’: No such file or directory</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnf install python -y</div></pre></td></tr></table></figure>
<h5 id="g-Command-not-found"><a href="#g-Command-not-found" class="headerlink" title="g++: Command not found"></a>g++: Command not found</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnf install <span class="string">"gcc-c++.x86_64"</span> -y</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[删除Apache Ambari服务]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/04/delete-ambari-service/</url>
      <content type="html"><![CDATA[<p>删除删除Apache Ambari服务可调用Apache Ambari REST接口：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#移除ZooKeeper服务</span></div><div class="line">curl -u admin:admin -H <span class="string">"X-Requested-By: ambari"</span> -X DELETE http://192.168.24.226:8080/api/v1/clusters/zwlbs/services/ZooKeeper</div><div class="line"></div><div class="line"><span class="comment">#移除MapReduce服务</span></div><div class="line">curl -u admin:admin -H <span class="string">"X-Requested-By: ambari"</span> -X DELETE http://192.168.24.226:8080/api/v1/clusters/zwlbs/services/ZooKeeper/MAPREDUCE2</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>注意服务的名称要大写。有时删除服务时会提示如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;status&quot; : 500,</div><div class="line">  &quot;message&quot; : &quot;org.apache.ambari.server.controller.spi.SystemException: An internal system exception occurred: Cannot remove ZOOKEEPER. Desired state STARTED is not removable.  Service must be stopped or disabled.&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时可以先改变服务状态再执行删除命令。改变服务状态命令为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl -i -H <span class="string">"X-Requested-By: ambari"</span> -u admin:admin -X PUT <span class="_">-d</span> <span class="string">'&#123;"RequestInfo":&#123;"context":"Stop Service"&#125;,"Body":&#123;"ServiceInfo":&#123;"state":"INSTALLED"&#125;&#125;&#125;'</span> http://192.168.24.226:8080/api/v1/clusters/CLUSTER_NAME/services/SERVICE_NAME</div><div class="line"></div><div class="line"><span class="comment">#修改ZooKeeper的状态</span></div><div class="line">curl -i -H <span class="string">"X-Requested-By: ambari"</span> -u admin:admin -X PUT <span class="_">-d</span> <span class="string">'&#123;"RequestInfo":&#123;"context":"Stop Service"&#125;,"Body":&#123;"ServiceInfo":&#123;"state":"INSTALLED"&#125;&#125;&#125;'</span> http://192.168.24.226:8080/api/v1/clusters/zwlbs/services/ZOOKEEPER</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fedora 20安装中文输入法]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/03/fedora-20-install-input-method/</url>
      <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install scim -y</div><div class="line">yum install scim-pinyin -y</div></pre></td></tr></table></figure>
<p>SCIM(Smart Common Input Method)是基于GTK引擎，为GNOME/GTK环境下非英文/ASCII字符提供的输入。SCIM is a GTK-based input method engine for inputting non-English / non-ASCII characters in a GNOME/GTK environment. There is a KDE frontend called skim.它本身自带拼音、内码等输入法，同时提供简单的程序接口，方便程序员便捷的对其进行扩充。</p>
<a id="more"></a>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在系统配置中添加安装的输入法，</p>
<img src="/2016/10/03/fedora-20-install-input-method/setting-add-input-method.png" alt="配置里添加输入法" title="配置里添加输入法">
<p>选择输入法生效。</p>
<img src="/2016/10/03/fedora-20-install-input-method/choose-input-method.png" alt="选择输入法" title="选择输入法">
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[install-chrome-in-fedora]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/02/install-chrome-in-fedora/</url>
      <content type="html"><![CDATA[<p>一种方法是通过yum安装。yum（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。基於RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。yum提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p>
<h4 id="创建Repo"><a href="#创建Repo" class="headerlink" title="创建Repo"></a>创建Repo</h4><p>在目录/etc/yum.repos.d下新建google-chrome.repo文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/yum.repos.d/google-chrome.repo</div></pre></td></tr></table></figure>
<p>32位操作系统写入如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[google-chrome]</div><div class="line">name=google-chrome - 32-bit</div><div class="line">baseurl=http://dl.google.com/linux/chrome/rpm/stable/i386</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub</div></pre></td></tr></table></figure>
<p>64位操作系统写入如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[google-chrome]</div><div class="line">name=google-chrome - 64-bit</div><div class="line">baseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub</div></pre></td></tr></table></figure>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install google-chrome-stable</div></pre></td></tr></table></figure>
<p>也可以直接下载rpm包进行安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -ivh google-chrome-stable_current_i386.rpm</div></pre></td></tr></table></figure>
<p>提示错误如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">warning: google-chrome-stable_current_i386.rpm: Header V4 DSA/SHA1 Signature, key ID 7fac5991: NOKEY</div><div class="line">error: Failed dependencies:</div><div class="line">	lsb &gt;= 4.0 is needed by google-chrome-stable-19.0.1084.56-140965.i386</div><div class="line">	libXss.so.1 is needed by google-chrome-stable-19.0.1084.56-140965.i386</div></pre></td></tr></table></figure>
<p>安装依赖包。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum install redhat-lsb -y</div><div class="line">yum install wget -y</div><div class="line">yum install libXScrnSaver -y</div><div class="line">yum install libgcrypt.so.11</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Transaction check error:</div><div class="line">  file /usr/bin from install of google-chrome-stable-19.0.1084.56-140965.i386 conflicts with file from package filesystem-3.2-19.fc20.i686</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Apache-Ambari 2.2.2.0 Agent手动安装]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/02/apache-ambari-using/</url>
      <content type="html"><![CDATA[<ul>
<li><p>Apache-Ambari 2.2.2.0</p>
</li>
<li><p>CentOS 7.0</p>
</li>
</ul>
<p>Ambari是一款用于部署、管理、监控Hadoop集群的开源工具，通过Ambari用户可以更方便地管理大规模Hadoop集群。Ambari架构采用的是Server/Client的模式，主要由两部分组成：ambari-agent和ambari-server。ambari依赖其它已经成熟的工具，例如其ambari-server就依赖python，而ambari-agent还同时依赖ruby, puppet，facter等工具，还有它也依赖一些监控工具nagios和ganglia用于监控集群状况。目前能找到2种，一种是Apache Ambari，一种是Hortonworks Ambari，两者区别不大，这里安装的是Apache Ambari。</p>
<a id="more"></a>
<p>下载Ambari repository。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</div><div class="line"><span class="comment">#(Redhat/CentOS/Oracle) 6:http://public-repo-1.hortonworks.com/ambari/centos6/2.x/updates/2.2.2.0/ambari.repo</span></div><div class="line">wget &lt;ambari-repo-url&gt;</div></pre></td></tr></table></figure>
<p>安装ambari-agent。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install ambari-agent -y</div></pre></td></tr></table></figure>
<p>启动Agent：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ambari-agent start</div></pre></td></tr></table></figure>
<p>查看Agent运行状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ambari-agent status</div></pre></td></tr></table></figure>
<p>至此，Ambari Agent安装完毕。Apache Agent的日志在目录<code>/var/log/ambari-agent/</code>下，配置文件是<code>/etc/ambari-agent/conf/ambari-agent.ini</code>。</p>
<h4 id="清除"><a href="#清除" class="headerlink" title="清除"></a>清除</h4><p>停止Ambari Agent：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ambari-agent status</div></pre></td></tr></table></figure>
<h5 id="运行HostCleanup-py脚本"><a href="#运行HostCleanup-py脚本" class="headerlink" title="运行HostCleanup.py脚本"></a>运行HostCleanup.py脚本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python /usr/lib/python2.6/site-packages/ambari_agent/HostCleanup.py \</div><div class="line">--silent --skip=users \</div><div class="line">-o /tmp/cleanup.log</div></pre></td></tr></table></figure>
<h5 id="移除-Ambari-RPM、目录和符号链接"><a href="#移除-Ambari-RPM、目录和符号链接" class="headerlink" title="移除 Ambari RPM、目录和符号链接"></a>移除 Ambari RPM、目录和符号链接</h5><p>在每个 Ambari 节点上，运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum erase -y ambari-*</div></pre></td></tr></table></figure>
<p>在Ambari服务器节点上，运行以下命令：Bash<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf /usr/lib/ambari-server</div></pre></td></tr></table></figure></p>
<p>在每个 Ambari 代理程序节点上，运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf /usr/lib/python2.6/site-packages/ambari_agent</div></pre></td></tr></table></figure>
<p>可使用以下代码移除已损坏链接：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rvf /usr/lib/python2.6/site-packages/ambari* /usr/lib/python2.6/site-packages/resource-management</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hadoop 2.7.1集群部署(不断更新...)]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/01/hadoop-cluster-deploy/</url>
      <content type="html"><![CDATA[<p>所用软件版本：</p>
<ul>
<li><p>Java 1.8.0_60</p>
</li>
<li><p>Hadoop 2.7.1.2.4.3.0-227</p>
</li>
</ul>
<p>HBase集群建立在hadoop集群基础之上，所以在搭建HBase集群之前需要把Hadoop集群搭建起来，并且要考虑二者的兼容性。</p>
<p>下载JDK8u60安装包，输入如下命令进行安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -ivh jdk-8u60-linux-x64.rpm</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><p>说到可以将 Hadoop 安装目录加入 PATH 变量中，这样就可以在任意目录中直接使用 hadoo、hdfs 等命令了，如果还没有配置的，需要在 Master 节点上进行配置。首先执行 vim ~/.bashrc，加入一行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/hdp/2.4.3.0-227/hadoop/bin</div></pre></td></tr></table></figure>
<p>保存后执行<code>source ~/.bashrc</code>使配置生效。</p>
<h4 id="配置集群-分布式环境"><a href="#配置集群-分布式环境" class="headerlink" title="配置集群/分布式环境"></a>配置集群/分布式环境</h4><h5 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h4><h5 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#CentOS 6.x关闭防火墙服务</span></div><div class="line">service iptables stop</div><div class="line"><span class="comment">#CentOS 7，需通过如下命令关闭</span></div><div class="line">systemctl stop firewalld.service</div></pre></td></tr></table></figure>
<h4 id="启动服务-严格按照顺序"><a href="#启动服务-严格按照顺序" class="headerlink" title="启动服务(严格按照顺序)"></a>启动服务(严格按照顺序)</h4><h5 id="启动Zookeeper服务"><a href="#启动Zookeeper服务" class="headerlink" title="启动Zookeeper服务"></a>启动Zookeeper服务</h5><p>ZooKeeper是一个分布式开源框架，提供了协调分布式应用的基本服务，它向外部应用暴露一组通用服务——分布式同步（Distributed Synchronization）、命名服务（Naming Service）、集群维护（Group Maintenance）等，简化分布式应用协调及其管理的难度，提供高性能的分布式服务。ZooKeeper本身可以以Standalone模式安装运行，不过它的长处在于通过分布式ZooKeeper集群（一个Leader，多个Follower），基于一定的策略来保证ZooKeeper集群的稳定性和可用性，从而实现分布式应用的可靠性。如下命令启动Zookeeper服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./zkServer.sh start</div></pre></td></tr></table></figure>
<p>查看服务状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./zkServer.sh status</div></pre></td></tr></table></figure>
<p>也可以用如下命令查看：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jps | grep Quorum</div></pre></td></tr></table></figure>
<p>The jps command lists the instrumented Java HotSpot VMs on the target system. The command is limited to reporting information on JVMs for which it has the access permissions.如果服务启动失败或者遇到问题，可到相应目录查看启动日志,日志的配置在<code>zookeeper-env.sh</code>文件中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> ZOO_LOG_DIR=/var/<span class="built_in">log</span>/zookeeper</div></pre></td></tr></table></figure>
<h5 id="启动Hadoop守护进程"><a href="#启动Hadoop守护进程" class="headerlink" title="启动Hadoop守护进程"></a>启动Hadoop守护进程</h5><p>使用如下命令启动NameNode：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./hadoop-daemon.sh start namenode</div></pre></td></tr></table></figure>
<h5 id="启动Hadoop-1"><a href="#启动Hadoop-1" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h5><p>启动Hadoop集群需要启动HDFS集群和Map/Reduce集群。第一次启动先初始化namenode:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#格式化一个新的分布式文件系统</span></div><div class="line">hadoop namenode -format</div></pre></td></tr></table></figure>
<h5 id="启动HDFS"><a href="#启动HDFS" class="headerlink" title="启动HDFS"></a>启动HDFS</h5><p>命令shell脚本在hadoop的sbin目录下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#启动主NameNode、DataNode</span></div><div class="line">./start-dfs.sh</div></pre></td></tr></table></figure>
<h5 id="启动YARN"><a href="#启动YARN" class="headerlink" title="启动YARN"></a>启动YARN</h5><p>为从根本上解决旧MapReduce框架的性能瓶颈，促进Hadoop框架的更长远发展，从0.23.0版本开始，Hadoop的MapReduce框架完全重构，发生了根本的变化。新的Hadoop MapReduce框架命名为MapReduceV2或者叫Yarn(Yet Another Resource Negotiator，另一种资源协调者)。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./start-yarn.sh</div></pre></td></tr></table></figure>
<p>yarn会启动ResourceManager，此处需要注意的是：Namenode和ResourceManger如果不是同一台机器，不能在NameNode上启动 yarn，应该在ResouceManager所在的机器上启动yarn。</p>
<h4 id="查看集群运行状态"><a href="#查看集群运行状态" class="headerlink" title="查看集群运行状态"></a>查看集群运行状态</h4><p>查看集群状态验证集群是否已经成功部署。输入<code>jps</code>命令,输出如下所示即代表相应的服务部署OK：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">3884 Jps</div><div class="line">1776 ResourceManager</div><div class="line">1613 SecondaryNameNode</div><div class="line">1872 NodeManager</div><div class="line">1467 DataNode</div><div class="line">1377 NameNode</div></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="http://www.powerxing.com/install-hadoop-cluster/" target="_blank" rel="external">Hadoop集群安装配置教程</a></p>
<p><a href="http://www.jianshu.com/p/42cd4590a5cb" target="_blank" rel="external">Hadoop 2.7.2安装</a></p>
<p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-yarn/" target="_blank" rel="external">Hadoop新MapReduce框架Yarn详解</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hadoop集群SSH免密钥登录]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/30/cluster-ssh-login/</url>
      <content type="html"><![CDATA[<h4 id="免密登录原理"><a href="#免密登录原理" class="headerlink" title="免密登录原理"></a>免密登录原理</h4><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。过程如下：</p>
<ol>
<li>远程主机收到用户的登录请求，把自己的公钥发给用户；</li>
<li>用户使用这个公钥，将登录密码加密后，发送回来；</li>
<li>远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</li>
</ol>
<h4 id="配置SSH免密登陆"><a href="#配置SSH免密登陆" class="headerlink" title="配置SSH免密登陆"></a>配置SSH免密登陆</h4><p>首先，运行<code>ssh localhost</code>来产生<code>/home/用户名/.ssh</code>目录，然后执行下面命令。</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure>
<p>生成RSA公钥和私钥。将生成的”id_rsa.pub”追加（这里切记是追加，不是覆盖）到授权的key里面去。这样的效果是实现了当前用户无密SSH登陆到自己：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#将id_rsa.pub追加到authorized_keys</span></div><div class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>
<p>如果要实现无密登陆到其它的主机，只需将生成的”id_rsa.pub”追加到其它主机的”~/.ssh/authorized_keys”中去。这里我们使用的方法是先将本机的”~/.ssh/id_rsa.pub”拷贝到你想无密登陆的主机上，再在相应的主机上使用”cat”命令将”~/.ssh/id_rsa.pub”追加到该主机的 “~/.ssh/authorized_keys”中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp id_rsa.pub root@192.168.24.136:/tmp</div></pre></td></tr></table></figure>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>当再使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp id_rsa.pub root@192.168.24.136:/tmp</div></pre></td></tr></table></figure>
<p>从A服务器向192.168.24.136服务器拷贝时，不再提示输入密码时，则说明A服务器到192.168.24.136服务器可以免密钥登录,说明A服务器到192.168.24.136服务器的免密钥登录配置OK。</p>
<p>来自：</p>
<p><a href="http://www.cnblogs.com/lijingchn/p/5580263.html" target="_blank" rel="external">SSH无密码验证配置</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hashcode和equals的理解]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/28/hashcode-and-equals/</url>
      <content type="html"><![CDATA[<h4 id="hashcode作用"><a href="#hashcode作用" class="headerlink" title="hashcode作用"></a>hashcode作用</h4><p>hashcode提供了一种更加高效的寻找方式，在Set集合中的元素是无序不可重复的，要保证不重复，一种方式是在添加新数据时，逐一比较集合中已经存在的所有元素，如果当前集合的元素增多，效率是非常低的。hashcode可以解决这个问题，当向一个集合中添加某个元素，集合会首先调用hashCode方法，这样就可以直接定位它所存储的位置，若该处没有其他元素，则直接保存。若该处已经有元素存在，就调用equals方法来匹配这两个元素是否相同，相同则不存，不同则进行其他处理，比如散列到其他位置或者以链表的形式存储到当前已经存放的元素的尾部。hashcode此时作用是快速寻找处当前元素在集合中的位置，hashCode可以将集合分成若干个区域，每个对象都可以计算出他们的hash码，可以将hash码分组，每个分组对应着某个存储区域，根据一个对象的hash码就可以确定该对象所存储区域，这样就大大减少查询匹配元素的数量，提高了查询效率。</p>
<a id="more"></a>
<h4 id="hashCode与equals"><a href="#hashCode与equals" class="headerlink" title="hashCode与equals"></a>hashCode与equals</h4><p>在Java中hashCode的实现总是伴随着equals，他们是紧密配合的，你要是自己设计了其中一个，就要设计另外一个。当然在多数情况下，这两个方法是不用我们考虑的，直接使用默认方法就可以帮助我们解决很多问题。但是在有些情况，我们必须要自己动手来实现它，才能确保程序更好的运作。</p>
<p>对于equals，我们必须遵循如下规则：</p>
<p>对称性：如果x.equals(y)返回是“true”，那么y.equals(x)也应该返回是“true”。</p>
<p>反射性：x.equals(x)必须返回是“true”。</p>
<p>类推性：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。</p>
<p>一致性：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你重复x.equals(y)多少次，返回都是“true”。</p>
<p>任何情况下，x.equals(null)，永远返回是“false”；x.equals(和x不同类型的对象)永远返回是“false”。</p>
<p>对于hashCode，我们应该遵循如下规则：</p>
<ol>
<li><p>在一个应用程序执行期间，如果一个对象的equals方法做比较所用到的信息没有被修改的话，则对该对象调用hashCode方法多次，它必须始终如一地返回同一个整数。</p>
</li>
<li><p>如果两个对象根据equals(Object o)方法是相等的，则调用这两个对象中任一对象的hashCode方法必须产生相同的整数结果。</p>
</li>
<li><p>如果两个对象根据equals(Object o)方法是不相等的，则调用这两个对象中任一个对象的hashCode方法，不要求产生不同的整数结果。但如果能不同，则可能提高散列表的性能。</p>
</li>
</ol>
<p>至于两者之间的关联关系，我们只需要记住如下即可：</p>
<p>如果x.equals(y)返回“true”，那么x和y的hashCode()必须相等。</p>
<p>如果x.equals(y)返回“false”，那么x和y的hashCode()有可能相等，也有可能不等。</p>
<p>判断对象相等的整个处理流程是：</p>
<p>1、判断两个对象的hashcode是否相等，若不等，则认为两个对象不等，完毕，若相等，则比较equals。</p>
<p>2、若两个对象的equals不等，则可以认为两个对象不等，否则认为他们相等。</p>
<p>参考：</p>
<p><a href="http://www.cnblogs.com/chenssy/p/3651218.html" target="_blank" rel="external">Java提高篇（二六）—–hashCode</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring step by step(二)--持久化]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/27/spring-mybatis-integrete/</url>
      <content type="html"><![CDATA[<p>环境：</p>
<ul>
<li><p>Windows 7 X64 Ultimate</p>
</li>
<li><p>JDK 1.8</p>
</li>
<li><p>Spring-Framework 4.2.3.RELEASE</p>
</li>
<li><p>MyBatis 3.3.1</p>
</li>
<li><p>Eclipse Java EE IDE for Web Developers.Version: Neon Release (4.6.0)Build id:20160613-1800</p>
</li>
<li><p>Maven 3.3.9</p>
</li>
<li><p>MySQL 5.7</p>
</li>
</ul>
<h4 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h4><p>MyBatis是一个可以自定义SQL、存储过程和高级映射的持久层框架。MyBatis摒除了大部分的JDBC代码、手工设置参数和结果集重获。MyBatis只使用简单的XML和注解来配置和映射基本数据类型、Map 接口和POJO(Plain Ordinary Java Object)到数据库记录。相对Hibernate和Apache OJB等“一站式”ORM(Object Relational Mapping)解决方案而言，Mybatis是一种“半自动化”的ORM实现。</p>
<a id="more"></a>
<h4 id="引入MyBatis依赖包"><a href="#引入MyBatis依赖包" class="headerlink" title="引入MyBatis依赖包"></a>引入MyBatis依赖包</h4><p>在Maven项目的POM.xml中定义MyBatis和Spring相关包的版本。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mybatis.spring.version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">mybatis.spring.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.2.3.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">druid-version</span>&gt;</span>1.0.26<span class="tag">&lt;/<span class="name">druid-version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="引入Spring依赖包"><a href="#引入Spring依赖包" class="headerlink" title="引入Spring依赖包"></a>引入Spring依赖包</h4><p>在Maven项目的POM.xml中引入Spring相关的依赖包。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Spring --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="引入MySQL链接包"><a href="#引入MySQL链接包" class="headerlink" title="引入MySQL链接包"></a>引入MySQL链接包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- mysql --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Java常用的数据库连接池有DBCP、C3P0、Proxool、JBoss，此处数据库连接采用Alibaba的Druid框架，Druid是Java语言中较好的数据库连接池。Druid能够提供强大的监控和扩展功能。更加详细信息科参考<a href="http://blog.csdn.net/blogdevteam/article/details/7750513" target="_blank" rel="external"><strong>阿里巴巴开源项目Druid负责人温少访谈</strong></a>。</p>
<h4 id="引入AOP包"><a href="#引入AOP包" class="headerlink" title="引入AOP包"></a>引入AOP包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Spring基础配置"><a href="#Spring基础配置" class="headerlink" title="Spring基础配置"></a>Spring基础配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>							   <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">    http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">    http://www.springframework.org/schema/aop</div><div class="line">    http://www.springframework.org/schema/aop/spring-aop.xsd</div><div class="line">    http://www.springframework.org/schema/util</div><div class="line">    http://www.springframework.org/schema/util/spring-util.xsd</div><div class="line">    http://www.springframework.org/schema/context</div><div class="line">    http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>spring主配置文件<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"applicationProperties"</span> <span class="attr">location</span>=<span class="string">"classpath:application.properties"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">properties-ref</span>=<span class="string">"applicationProperties"</span></span></div><div class="line">		<span class="attr">ignore-resource-not-found</span>=<span class="string">"true"</span> /&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"dolphin.service.*"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--aop 注解风格支持 proxy-targer-class默认false,用jdk动态代理,true是cglib .expose-proxy当前代理是否为可暴露状态,值是"ture",则为可访问。 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span></span></div><div class="line">		<span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-mybatis.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-datasource.xml"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Spring 自 2.0 版本开始，陆续引入了一些注解用于简化 Spring 的开发。@Repository 注解便属于最先引入的一批，它用于将数据访问层 (DAO 层 ) 的类标识为 Spring Bean。具体只需将该注解标注在 DAO 类上即可。同时，为了让 Spring 能够扫描类路径中的类并识别出 @Repository 注解，需要在 XML 配置文件中启用 Bean 的自动扫描功能，这可以通过context:component-scan实现。context:component-scan定义了相关Bean的扫描路径。就不再需要在 XML 中显式使用 <bean> 进行 Bean 的配置。Spring 在容器初始化时将自动扫描 base-package 指定的包及其子包下的所有 class 文件，所有标注了 @Repository 的类都将被注册为 Spring Bean。</bean></p>
<h4 id="新建Spring-Mybatis配置文件"><a href="#新建Spring-Mybatis配置文件" class="headerlink" title="新建Spring-Mybatis配置文件"></a>新建Spring-Mybatis配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">    http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">    http://www.springframework.org/schema/tx</div><div class="line">    http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring 整合 MyBatis<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 在基本的MyBatis中，session 工厂可以使用SqlSessionFactoryBuilder.来创建。在MyBatis-Spring中，使用了SqlSessionFactoryBean来替代。 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 指定sqlMapConfig总配置文件，订制的environment在spring容器中不在生效 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- Mybatis 映射文件路径 用逗号隔开 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"dolphin.dao"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="新建MyBatis配置文件"><a href="#新建MyBatis配置文件" class="headerlink" title="新建MyBatis配置文件"></a>新建MyBatis配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.1//EN"</span></div><div class="line">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--设置--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 全局映射器启用缓存，不建议使用mybatis自己的缓存--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 查询时，关闭关联对象即时加载以提高性能 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指定)，不会加载关联表的所有字段，以提高性能 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"multipleResultSetsEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 允许使用列标签代替列名 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 给予被嵌套的resultMap以字段-属性的映射支持 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingBehavior"</span> <span class="attr">value</span>=<span class="string">"FULL"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 对于批量更新操作缓存SQL以提高性能  但是返回id有问题--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultExecutorType"</span> <span class="attr">value</span>=<span class="string">"SIMPLE"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 数据库超过36000秒仍未响应则超时 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"36000"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="数据库链接配置"><a href="#数据库链接配置" class="headerlink" title="数据库链接配置"></a>数据库链接配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#=========================================</div><div class="line"># DataSource</div><div class="line">#=========================================</div><div class="line">jdbc.driverClass = com.mysql.jdbc.Driver</div><div class="line">jdbc.url = jdbc:mysql://127.0.0.1:3306/test</div><div class="line">jdbc.username = root</div><div class="line">jdbc.password =123456</div></pre></td></tr></table></figure>
<h4 id="新建POJO"><a href="#新建POJO" class="headerlink" title="新建POJO"></a>新建POJO</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Country</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Integer id;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String countryName;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCountryName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> countryName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCountryName</span><span class="params">(String countryName)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.countryName = countryName;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="新建DAO"><a href="#新建DAO" class="headerlink" title="新建DAO"></a>新建DAO</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CountryDao</span> </span>&#123;</div><div class="line">	<span class="function">Country <span class="title">getCountry</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="新建Mapper"><a href="#新建Mapper" class="headerlink" title="新建Mapper"></a>新建Mapper</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.3//EN"</span></div><div class="line">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"dolphin.dao.CountryDao"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getCountry"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"dolphin.mode.Country"</span>&gt;</span></div><div class="line">        SELECT</div><div class="line">        *</div><div class="line">        FROM</div><div class="line">        country</div><div class="line">        WHERE id = #&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="新建Service"><a href="#新建Service" class="headerlink" title="新建Service"></a>新建Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CountryService</span> </span>&#123;</div><div class="line">	<span class="function">Country <span class="title">getCountyById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountryServiceImpl</span> <span class="keyword">implements</span> <span class="title">CountryService</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> CountryDao countryDao;</div><div class="line">	<span class="function"><span class="keyword">public</span> Country <span class="title">getCountyById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> countryDao.getCountry(id);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="新建测试类"><a href="#新建测试类" class="headerlink" title="新建测试类"></a>新建测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:spring-config/spring-base.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicTest</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageMapperTest</span> <span class="keyword">extends</span> <span class="title">BasicTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> CountryService countryService;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Country country = countryService.getCountyById(<span class="number">1</span>);</div><div class="line">			System.out.print(country.getId());</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="新建数据库表"><a href="#新建数据库表" class="headerlink" title="新建数据库表"></a>新建数据库表</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">USE `test`;</div><div class="line"></div><div class="line">#</div><div class="line"># Table structure for table country</div><div class="line">#</div><div class="line"></div><div class="line">DROP TABLE IF EXISTS `country`;</div><div class="line">CREATE TABLE `country` (</div><div class="line">  `Id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',</div><div class="line">  `countryname` varchar(255) DEFAULT NULL COMMENT '名称',</div><div class="line">  `countrycode` varchar(255) DEFAULT NULL COMMENT '代码',</div><div class="line">  PRIMARY KEY (`Id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='国家信息';</div><div class="line"></div><div class="line">INSERT INTO `country` VALUES (1,'Angola','AO');</div><div class="line">INSERT INTO `country` VALUES (2,'Afghanistan','AF');</div></pre></td></tr></table></figure>
<h4 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h4><p>结果如下如所示。</p>

<p>引用文章：</p>
<p><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-spring-iocannt/" target="_blank" rel="external">详解 Spring 3.0 基于 Annotation 的依赖注入实现</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ Idea快捷键技巧分享]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/26/intllij-idea-encoding/</url>
      <content type="html"><![CDATA[<h4 id="输入乱码"><a href="#输入乱码" class="headerlink" title="输入乱码"></a>输入乱码</h4><p>在控制台输入中文时显示的不是输入的汉字，而是显示正方形符号，此时输入的汉字显示乱码，如图所示。</p>

<a id="more"></a>
<p>解决此问题，可使用支持中文较好的字体，覆盖默认字体，在Intellig Idea中的File-Settings-Appearance&amp;Behavior-Appearance中(Ctrl + Alt + S)。如下图所示。</p>

<p>在Debug控制台中Tomcat中输出乱码，可以打开Run/Debug Configuration,选择你的tomcat。在Server &gt; VM options设置为<code>-Dfile.encoding=UTF-8</code> ，重启tomcat。</p>
<h4 id="智能提示敏感调整"><a href="#智能提示敏感调整" class="headerlink" title="智能提示敏感调整"></a>智能提示敏感调整</h4><p>在智能提示时默认大小写敏感，比如String的智能提示就必须首字母大写才能够准确定位，经常大小写切换，不是特别方便。在settings-Editor-General-Code Completion里设置后，可以省去大小写切换操作。</p>

<h4 id="Live-Templates"><a href="#Live-Templates" class="headerlink" title="Live Templates"></a>Live Templates</h4><p>Live templates帮助你快速、高效、精准的输入经常使用的或者自定义的代码片段(Live templates let you insert frequently-used or custom code constructs into your source code file quickly, efficiently, and accurately).相当于一个代码块的缩写，输入<code>Ctrl + J</code>会显示当前上下文中所有可用的模板。快速输入foreach，在方法内(一定要在方法里敲)输入iter + TAB。</p>
<h5 id="快速进行空判断"><a href="#快速进行空判断" class="headerlink" title="快速进行空判断"></a>快速进行空判断</h5><p>输入<code>ifn</code>，按TAB即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="快速输入Main方法"><a href="#快速输入Main方法" class="headerlink" title="快速输入Main方法"></a>快速输入Main方法</h5><p>输入<code>psvm</code>,按TAB键即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Surround-with"><a href="#Surround-with" class="headerlink" title="Surround with"></a>Surround with</h4><p>用于快速添加try catch等代码块，The Surround with feature allows you easily put expressions or statements within blocks or language constructs.快捷键为：<code>Ctrl + Alt + T</code>。</p>
<h4 id="重构-Reflactor"><a href="#重构-Reflactor" class="headerlink" title="重构(Reflactor)"></a>重构(Reflactor)</h4><h5 id="重命名-Rename"><a href="#重命名-Rename" class="headerlink" title="重命名(Rename)"></a>重命名(Rename)</h5><p>Shift + F6,可以重命名你的类、方法、变量等等。</p>
<h4 id="主题-Theme"><a href="#主题-Theme" class="headerlink" title="主题(Theme)"></a>主题(Theme)</h4><p>更换默认主题在settings(Ctrl + Alt + S) –&gt; editor –&gt; colors &amp; fonts –&gt; general，如下图所示，如果需要修改主题的字体等是默认是不允许的，需要复制一个新的主题，再自定义修改相应的参数。</p>

<h4 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h4><p>使用Maven最头疼的就是从中央库下载jar包超级慢，等待下载jar包的感觉用重庆话讲：肚肠子把把逗紧了。解决办法就是使用私服地址，私服可以使用本地配置的Maven(不是Intellij Idea里面的boundle Maven)，修改Intellj Maven采用本机安装Maven在设置(Ctrl + Alt + S)中输入Maven，修改地址(例如：<code>D:\Source\zwnewplatform\javasoftware\runtime\apache-maven-3.3.9</code>)即可，如下图所示。</p>

<h4 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h4><p>Intellij Idea可以完全丢掉键盘工作，有点早期Vim和Emacs编辑器的味道。善用Intellij Idea编辑器可以大幅提高工作效率，用快捷键有一种装逼的感觉，装逼人士必备。</p>
<table>
<thead>
<tr>
<th>快捷键(Short Keys)</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + Shift + F12</td>
<td style="text-align:center">编辑区全屏</td>
</tr>
<tr>
<td>Ctrl + F4</td>
<td style="text-align:center">关闭当前编辑文件</td>
</tr>
<tr>
<td>Alt + 1</td>
<td style="text-align:center">打开项目树视图,并将光标定位到当前编辑文件在项目树上的位置</td>
</tr>
<tr>
<td>Alt + Home</td>
<td style="text-align:center">定位到导航条</td>
</tr>
<tr>
<td>Ctrl + Shift + N</td>
<td style="text-align:center">定位到某一个文件(定位到指定文件)</td>
</tr>
<tr>
<td>Shift + Esc</td>
<td style="text-align:center">隐藏底部(如：Debug、TODO等)窗口</td>
</tr>
<tr>
<td>F12</td>
<td style="text-align:center">把焦点从编辑器移到最近使用的工具窗口，可用于显示底部(如：Debug、TODO等)对应窗口</td>
</tr>
<tr>
<td>Alt + 5</td>
<td style="text-align:center">激活Debug窗口</td>
</tr>
<tr>
<td>Alt + 7</td>
<td style="text-align:center">打开Structure窗口(Structure前面有一个带有下划线的5是快捷键提示)</td>
</tr>
<tr>
<td>Ctrl + N</td>
<td style="text-align:center">根据输入的类名查找类文件</td>
</tr>
<tr>
<td>Ctrl + Shift + N</td>
<td style="text-align:center">查找文件</td>
</tr>
<tr>
<td>Alt + Insert</td>
<td style="text-align:center">生成Getter、Setter</td>
</tr>
<tr>
<td>Ctrl + F12</td>
<td style="text-align:center">在当前编辑的文件中快速导航</td>
</tr>
<tr>
<td>Alt + F3(Search/Incremental Search )</td>
<td style="text-align:center">在编辑器中实现快速查查找功能</td>
</tr>
<tr>
<td>Ctrl + J</td>
<td style="text-align:center">如果记不住Live Template的缩写，使用此快捷键可以弹出所有Live Template的缩写</td>
</tr>
<tr>
<td>Ctrl + X</td>
<td style="text-align:center">删除行，剪切(Cut)</td>
</tr>
<tr>
<td>Ctrl + Alt + F12</td>
<td style="text-align:center">显示当前项目树结构文件/文件夹所在目录，可以快速打开文件夹</td>
</tr>
<tr>
<td>Ctrl + Shift + T(Test)</td>
<td style="text-align:center">选中类名，按下快捷键,创建一个新的测试Case</td>
</tr>
<tr>
<td>Ctrl + Shift + 数字键(NumPad)+</td>
<td style="text-align:center">展开所有</td>
</tr>
<tr>
<td>Ctrl + Shift + 数字键(NumPad)-</td>
<td style="text-align:center">折叠所有</td>
</tr>
<tr>
<td>Ctrl +  数字键(NumPad)-</td>
<td style="text-align:center">在项目树上应用此快捷键可以折叠所有展开的文件夹</td>
</tr>
<tr>
<td>Ctrl + F12</td>
<td style="text-align:center">打开Intellij中嵌入的终端(Terminal)</td>
</tr>
<tr>
<td>Ctrl + B</td>
<td style="text-align:center">跳转到实现处</td>
</tr>
<tr>
<td>Ctrl + F8</td>
<td style="text-align:center">设置断点和取消设置断点</td>
</tr>
<tr>
<td>Alt + Up/Down</td>
<td style="text-align:center">跳转到下一个方法或者属性</td>
</tr>
<tr>
<td>Ctrl + Tab</td>
<td style="text-align:center">编辑窗口切换(切换Debug视图、编辑区类文件等)</td>
</tr>
<tr>
<td>Shift + F2/F2</td>
<td style="text-align:center">跳到上/下一个错误处</td>
</tr>
<tr>
<td>Alt + F1</td>
<td style="text-align:center">选中目标，可以定位到文件等各种对象，Alt + F1弹出的界面中选择需要定位的对象，也可以理解成对象导航</td>
</tr>
<tr>
<td>Shift + F6</td>
<td style="text-align:center">重构、重命名</td>
</tr>
<tr>
<td>Ctrl + Shift + F10</td>
<td style="text-align:center">运行测试，注意运行测试时界面需要切换到测试类的界面</td>
</tr>
<tr>
<td>Alt + F8</td>
<td style="text-align:center">计算变量值</td>
</tr>
<tr>
<td>Alt + Left/Right</td>
<td style="text-align:center">按左/右方向切换当前已打开的文件视图</td>
</tr>
<tr>
<td>Ctrl + F10</td>
<td style="text-align:center">更新资源和类文件，热部署(需要配置，部署时选择Exploded模式)</td>
</tr>
<tr>
<td>Ctrl + Shift + T</td>
<td style="text-align:center">新建测试类，在测试类与被测试类之间跳转</td>
</tr>
<tr>
<td>Ctrl + Shift +F</td>
<td style="text-align:center">全文查找，类似于Eclipse的Ctrl + H</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + N</td>
<td style="text-align:center">全文搜索，包含Maven引用的jar包里面的内容，在搜索界面中，需要勾选Include non-project symbols</td>
</tr>
<tr>
<td>Ctrl + Alt + Left/Right</td>
<td style="text-align:center">到上一次/下一次编辑的位置</td>
</tr>
<tr>
<td>Ctrl + Y</td>
<td style="text-align:center">删除光标所在行或删除选中的行</td>
</tr>
<tr>
<td>Ctrl + P(Parameter)</td>
<td style="text-align:center">方法参数提示显示,当调用方法时未出现参数的智能提示时，可以手动显示方法的提示</td>
</tr>
<tr>
<td>Ctrl + Q</td>
<td style="text-align:center">光标所在的变量/类名/方法名等上面（也可以在提示补充的时候按），显示文档内容</td>
</tr>
<tr>
<td>Ctrl + Shift + Up/Down</td>
<td style="text-align:center">代码行上下移动</td>
</tr>
<tr>
<td>Ctrl + Shift + U</td>
<td style="text-align:center">变量转换为大写</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td style="text-align:center">选中光标所在位置的单词(Words),递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围</td>
</tr>
<tr>
<td>Ctrl + Alt + O</td>
<td style="text-align:center">优化(Optimization)类的Import</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td style="text-align:center">显示类的层次结构(Hierarchy)</td>
</tr>
</tbody>
</table>
<h5 id="进入退出全屏"><a href="#进入退出全屏" class="headerlink" title="进入退出全屏"></a>进入退出全屏</h5><p>使用快捷键<code>Alt + V</code>打开View菜单，移动上下键选择<code>Enter Full Screen</code>即可。也可以自定义快捷键。</p>
<h4 id="properties显示中文"><a href="#properties显示中文" class="headerlink" title="properties显示中文"></a>properties显示中文</h4><p>使用IntelliJ Idea打开属性文件时，如果包含中文，显示为原始的编码，正确显示中文需要做如下设置，到设置(settings)中,可以使用快捷键Ctrl + Alt + S打开设置界面，找到<code>File Encoding</code>选项卡，选中<code>Default encoding for properties file</code>即可，如下图所示.</p>

<h4 id="限制编辑器Tab页个数"><a href="#限制编辑器Tab页个数" class="headerlink" title="限制编辑器Tab页个数"></a>限制编辑器Tab页个数</h4><p>有时我们并不习惯在编辑器中打开太多的Tab页，如果不小心点开了7个以上的Tab页，在Tab页面中切换也蛮让人晕眩的，设置Tab页最大个数在Settings(Ctrl + Alt + S),Editor-General-Editor Tabs中，如下图如所示。</p>

<h4 id="注释模板"><a href="#注释模板" class="headerlink" title="注释模板"></a>注释模板</h4><p>参考：</p>
<p><a href="http://www.hollischuang.com/archives/966" target="_blank" rel="external">Java开发必装的IntelliJ IDEA插件</a></p>
<p><a href="https://www.jetbrains.com/help/idea/2016.2/surrounding-blocks-of-code-with-language-constructs.html" target="_blank" rel="external">Surrounding Blocks of Code with Language Constructs</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring step by step(一)--依赖注入(Dependency Injection)]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/25/spring-ioc/</url>
      <content type="html"><![CDATA[<h4 id="为什么要依赖注入"><a href="#为什么要依赖注入" class="headerlink" title="为什么要依赖注入"></a>为什么要依赖注入</h4><p>依赖注入(Dependency Injection)所要达到的目标是实现程序间的松耦合。将服务的调用者和服务的提供者分离。DI提供一种机制，在运行时绑定服务的提供者和调用者。</p>
<a id="more"></a>
<h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><p>新建一个Web项目，目录结构如下。</p>

<h4 id="引入包"><a href="#引入包" class="headerlink" title="引入包"></a>引入包</h4><p>引入servlet-api.jar包，目录结构如下。</p>

<p>注意引入servlet-api.jar包后，多了src/main/java目录和src/test/java目录。servlet-api.jar包中，实现了Sevlet规范，在Apache Tomcat 8.0.37中实现的是Servlet Specification 3.1，JSP Specification 2.3。版本之间详细的对应关系可以看<a href="http://tomcat.apache.org/whichversion.html" target="_blank" rel="external"><strong>Apache Tomcat Versions</strong></a>。</p>
<h4 id="添加Spring依赖包"><a href="#添加Spring依赖包" class="headerlink" title="添加Spring依赖包"></a>添加Spring依赖包</h4><p>在Maven的POM文件中添加spring-context依赖。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此处虽然只添加了一个jar包，Maven会自动下载此jar包相关的依赖包。在Maven的Dependency Hierarchy中查看包与包之间的依赖关系如下图所示。</p>

<h4 id="添加类"><a href="#添加类" class="headerlink" title="添加类"></a>添加类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageService</span> </span>&#123;</div><div class="line">   <span class="function">String <span class="title">getMessage</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessagePrinter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">private</span> MessageService service;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessagePrinter</span><span class="params">(MessageService service)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span>.service.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>带有 @Configuration 的注解类表示这个类可以使用 Spring IoC 容器作为 bean 定义的来源。@Bean 注解告诉 Spring，一个带有 @Bean 的注解方法将返回一个对象，该对象应该被注册为在 Spring 应用程序上下文中的 bean。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function">MessageService <span class="title">mockMessageService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageService() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(Application.class);</div><div class="line">        MessagePrinter printer = context.getBean(MessagePrinter.class);</div><div class="line">        printer.printMessage();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码(排除Main函数)等同于:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mockMessageService"</span> <span class="attr">class</span>=<span class="string">"dolphin.MessageService"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>带有 @Bean 注解的方法名称作为 bean 的 ID，它创建并返回实际的 bean。配置类可以声明多个 @Bean。一旦定义了配置类，你就可以使用 AnnotationConfigApplicationContext 来加载并把他们提供给 Spring 容器(Main方法中即是)。</p>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>结果如图所示。</p>

<p>来自：</p>
<ul>
<li><a href="https://projects.spring.io/spring-framework/#quick-start" target="_blank" rel="external">spring-framework-quick-start</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Eclipse断点类型]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/24/eclipse-breakpoint-type/</url>
      <content type="html"><![CDATA[<p>本文的Eclipse版本为:Eclipse Java EE IDE for Web Developers.</p>
<p>Version: Neon Release (4.6.0)<br>Build id: 20160613-1800</p>
<h4 id="Line-Breakpoint"><a href="#Line-Breakpoint" class="headerlink" title="Line Breakpoint"></a>Line Breakpoint</h4><p>Line Breakpoint是最简单的Eclipse断点，只要双击某行代码对应的左侧栏，就对该行设置上断点。断点的颜色为一个蓝色的实心点。</p>
<a id="more"></a>
<h4 id="Watchpoint"><a href="#Watchpoint" class="headerlink" title="Watchpoint"></a>Watchpoint</h4><p>关注某个关键变量的变化或使用。此时，就可以为该变量设置一种特殊的断点–Watchpoint。</p>
<img src="/2016/09/24/eclipse-breakpoint-type/watchpoint.jpg" alt="Watch Breakpoint" title="Watch Breakpoint">
<h4 id="Method-Breakpoint"><a href="#Method-Breakpoint" class="headerlink" title="Method Breakpoint"></a>Method Breakpoint</h4><p>关注程序对某个方法的调用情况，即，可以设置Method Breakpoint。</p>
<img src="/2016/09/24/eclipse-breakpoint-type/method-breakpoint.jpg" alt="Method Breakpoint" title="Method Breakpoint">
<p>断点上的左右小箭头代表进入和退出方法时命中。</p>
<h4 id="Exception-Breakpoint"><a href="#Exception-Breakpoint" class="headerlink" title="Exception Breakpoint"></a>Exception Breakpoint</h4><p>某个特定异常发生时程序能够被中断，以方便查看当时程序所处的状态。</p>
<img src="/2016/09/24/eclipse-breakpoint-type/exception-breakpoint.jpg" alt="Exception Breakpoint" title="Exception Breakpoint">
<h4 id="Class-Load-Breakpoint"><a href="#Class-Load-Breakpoint" class="headerlink" title="Class Load Breakpoint"></a>Class Load Breakpoint</h4><p>当某个类被加载时，通过该断点可以中断程序。</p>
<img src="/2016/09/24/eclipse-breakpoint-type/class-breakpoint.jpg" alt="Class Breakpoint" title="Class Breakpoint">
<p>来自：</p>
<ul>
<li><a href="http://www.blogjava.net/jiangshachina/archive/2011/11/20/364367.html" target="_blank" rel="external">详解Eclipse断点</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Phoenix常用操作]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/23/phoenix-tutorial/</url>
      <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Phoenix本意是凤凰的意思，<a href="http://phoenix.apache.org/" target="_blank" rel="external">Apache Phoenix</a>是构建在HBase之上的关系型数据库层，作为内嵌的客户端JDBC驱动用以对HBase中的数据进行低延迟访问。Apache Phoenix会将用户编写的sql查询编译为一系列的scan操作，最终产生通用的JDBC结果集返回给客户端。数据表的元数据存储在HBase的表中被会标记版本号，所以进行查询的时候会自动选择正确的schema。直接使用HBase的API，结合协处理器（coprocessor）和自定义的过滤器的话，小范围的查询在毫秒级响应，千万数据的话响应速度为秒级。</p>
<a id="more"></a>
<img src="/2016/09/23/phoenix-tutorial/phoenix-position.jpg" alt="Phoenix的定位" title="Phoenix的定位">
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>Phoenix可以用SQL语句来查询Hbase，且只能查Hbase，别的类型比如查询文本文件等都不支持！如果要查文本文件等，可以使用Hive和Impala，Phoenix在Hbase上查询的性能较Hive和Impala具有优势。</p>
<h4 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h4><p>登录。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./sqlline.py localhost</div></pre></td></tr></table></figure>
<p>查看HBase所有表。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!tables</div></pre></td></tr></table></figure>
<p>table schema为system的是系统表。</p>
<p>查看HBase中表名为test的所有列。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!columns <span class="built_in">test</span></div></pre></td></tr></table></figure>
<p>表名不用加引号。</p>
<p>查询表数据。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span>;</div><div class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">test</span>;//查询指定列</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'jiangxiaoqiang'</span>;//条件查询</div></pre></td></tr></table></figure>
<p>删除表数据。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> condition;//语法</div><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">is</span> <span class="literal">null</span>;//例子</div></pre></td></tr></table></figure>
<p>condition是过滤条件，注意结尾需要有分号，表示SQL语句已经结束，可以提交给引擎执行。</p>
<p>清除表的重复数据。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tablename <span class="keyword">where</span> vtime <span class="keyword">in</span> ( <span class="keyword">select</span> vtime <span class="keyword">from</span> tablename <span class="keyword">group</span> <span class="keyword">by</span> vtime <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span>) <span class="keyword">and</span> <span class="keyword">id</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">max</span>(<span class="keyword">id</span>) <span class="keyword">from</span> tablename <span class="keyword">group</span> <span class="keyword">by</span> vtime <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span> );</div></pre></td></tr></table></figure>
<p>清除同一时间重复的数据（同一时刻只能有1条数据）。</p>
<p>连接查询。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> P.id <span class="keyword">as</span> <span class="keyword">id</span>, vtime, A.description <span class="keyword">FROM</span> 表P P <span class="keyword">left</span> <span class="keyword">join</span> 表A A <span class="keyword">on</span> P.id=A.positional_Id <span class="keyword">WHERE</span> P.vehicle_id=<span class="string">'cae21196-cb66-4256-88a6-7cdfb23e2c78'</span> <span class="keyword">and</span> P.vtime &gt;= <span class="string">'2016-10-10 00:00:00'</span> <span class="keyword">and</span> P.vtime &lt;= <span class="string">'2016-10-13 23:59:59'</span> <span class="keyword">and</span> P.alarm <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">and</span> P.alarm != <span class="string">'0'</span> <span class="keyword">order</span> <span class="keyword">by</span> P.vtime;</div></pre></td></tr></table></figure>
<p>注意在做MyBatis映射时，P.id列需要一个别名，对应定义的实体字段。</p>
<h4 id="函数-Function"><a href="#函数-Function" class="headerlink" title="函数(Function)"></a>函数(Function)</h4><p>substr函数用于截取字符串。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(<span class="keyword">time</span>,<span class="number">0</span>,<span class="number">11</span>) <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">substr</span>(<span class="keyword">time</span>,<span class="number">0</span>,<span class="number">11</span>);</div></pre></td></tr></table></figure>
<p>time为需要截取的字符串，从第0位开始截取11位长度。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat 8.0 HTTP请求流程]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/22/tomcat-http/</url>
      <content type="html"><![CDATA[<p>假设来自浏览器的请求为：<a href="http://localhost:8080/test/index.jsp" target="_blank" rel="external">http://localhost:8080/test/index.jsp</a></p>
<h4 id="Connector获取请求"><a href="#Connector获取请求" class="headerlink" title="Connector获取请求"></a>Connector获取请求</h4><p>请求被发送到Apache Tomcat服务器端口8080，被在那里侦听的<code>Coyote HTTP/1.1 Connector(org.apache.tomcat.util.net.NioEndpoint)</code>获得。Tomcat源码中与connector相关的类位于org.apache.coyote包中，Connector分为以下几类：</p>
<ul>
<li><strong>Http Connector</strong> 基于HTTP协议，负责建立HTTP连接。它又分为BIO Http Connector与<code>NIO Http Connector(org.apache.tomcat.util.net.NioEndpoint)</code>两种。BIO(blocking I/O)，顾名思义，即阻塞式I/O操作，表示Tomcat使用的是传统的Java I/O操作(即java.io包 及其子包)。一般而言，bio模式是三种运行模式中性能最低的一种。NIO为Network IO，后者提供非阻塞IO与长连接Comet支持。NIO(new I/O)，是Java SE 1.4及后续版本提供的一种新的I/O操作方式(即java.nio包及其子包)。Java nio是一个基于缓冲区、并能提供非阻塞I/O操作的Java API，因此nio也被看成是non-blocking I/O的缩写。它拥有比传统I/O操作(bio)更好的并发运行性能。</li>
</ul>
<a id="more"></a>
<ul>
<li><p><strong>AJP Connector</strong>    基于AJP协议，AJP是专门设计用来为tomcat与http服务器之间通信专门定制的协议，能提供较高的通信速度和效率。如与Apache服务器集成时，采用这个协议。AJP(Apache JServ Protocol)协议：目前正在使用的AJP协议的版本是通过JK和JK2连接器提供支持的AJP13，它基于二进制的格式在Web服务器和Tomcat之间传输数据，而此前的版本AJP10和AJP11则使用文本格式传输数据。</p>
</li>
<li><p><strong>APR HTTP Connector</strong> org.apache.tomcat.util.net.AprEndpoint，用C实现，通过JNI(Java Native Interface)调用的。主要提升对静态资源(如HTML、图片、CSS、JS等)的访问性能。现在这个库已独立出来可用在任何项目中。Tomcat在配置APR之后性能非常强劲。APR(Apache Portable Runtime/Apache可移植运行时)，是Apache HTTP服务器的支持库。你可以简单地理解为，Tomcat将以JNI的形式调用Apache HTTP服务器的核心动态链接库来处理文件读取或网络传输操作，从而大大地提高Tomcat对静态文件的处理性能。Tomcat apr也是在Tomcat上运行高并发应用的首选模式。与配置nio运行模式一样，也需要将对应的Connector节点的protocol属性值改为org.apache.coyote.http11.Http11AprProtocol。</p>
</li>
</ul>
<p>Tomcat7和Tomcat8默认设置都是http1.1，Tomcat7默认使用BIO，Tomcat8根据情况自动选择BIO还是NIO，甚至NIO2.当前调试版本是Tomcat 8，默认进入的是NioEndpoint(其实这里已经到AbstractEndpoint的Processor了，在NioEndpoint的断点始终没有命中，不知何故)，如下图所示。</p>

<h4 id="Engine处理请求"><a href="#Engine处理请求" class="headerlink" title="Engine处理请求"></a>Engine处理请求</h4><p>Connector把该请求交给它所在的Service的Engine(StandardEngine)来处理，并等待Engine的回应。Container 是容器的父接口，所有子容器都必须实现这个接口，Container 容器的设计用的是典型的责任链的设计模式，它有四个子容器组件构成，分别是：Engine、Host、Context、Wrapper，这四个组件不是平行的，而是父子关系，Engine 包含 Host,Host 包含 Context，Context 包含 Wrapper。通常一个 Servlet class 对应一个 Wrapper，如果有多个 Servlet 就可以定义多个 Wrapper，如果有多个 Wrapper 就要定义一个更高的Container。详细的关系在server.xml可以看出来：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Server</span>&gt;</span><span class="comment">&lt;!--顶层元素，代表一个服务器--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Service</span>&gt;</span><span class="comment">&lt;!--顶层元素，是Connector的集合，只有一个Engine--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Connectior</span>/&gt;</span><span class="comment">&lt;!--连接器类元素，代表通信接口--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Engine</span>&gt;</span><span class="comment">&lt;!--容器类元素，为特定的Service组件处理所有客户请求，可包含多个Host--&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">Host</span>&gt;</span><span class="comment">&lt;!--为特定的虚拟主机处理所有客户请求--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Context</span>&gt;</span><span class="comment">&lt;!--为特定的WEB应用处理所有客户请求--&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">Context</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="匹配Host"><a href="#匹配Host" class="headerlink" title="匹配Host"></a>匹配Host</h4><p>Engine获得请求localhost:8080/test/index.jsp，匹配它所有虚拟主机Host<br>Engine匹配到名为localhost的Host（即使匹配不到也把请求交给该Host处理，因为该Host被定义为该Engine的默认主机）</p>
<h4 id="匹配Context"><a href="#匹配Context" class="headerlink" title="匹配Context"></a>匹配Context</h4><p>localhost Host获得请求/test/index.jsp，匹配它所拥有的所有Context<br>Host匹配到路径为/test的Context（如果匹配不到就把该请求交给路径名为””的Context去处理）</p>
<h4 id="匹配Servlet"><a href="#匹配Servlet" class="headerlink" title="匹配Servlet"></a>匹配Servlet</h4><p>path=”/test”的Context获得请求/index.jsp，在它的mapping table中寻找对应的servlet<br>Context匹配到URL PATTERN为*.jsp的servlet，对应于JspServlet类<br>构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用JspServlet的doGet或doPost方法</p>
<h4 id="返回响应"><a href="#返回响应" class="headerlink" title="返回响应"></a>返回响应</h4><p>Context把执行完了之后的HttpServletResponse对象返回给Host<br>Host把HttpServletResponse对象返回给Engine<br>Engine把HttpServletResponse对象返回给Connector<br>Connector把HttpServletResponse对象返回给客户browser</p>
<p>请求流程图(Graphiz绘制)：</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Eclipse中启动和调试Tomcat（二）]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/20/launching-and-debugging-tomcat-extra/</url>
      <content type="html"><![CDATA[<p>在Eclipse中启动和调试Tomcat（一）中，断点只能在自定义Servlet中命中，如果想观察详细的Tomcat运行过程，还需要从Tomcat的入口开始进行调试。详细步骤如下(未完全通过，暂勿参考)：</p>
<h4 id="引入Tomcat8-0-37jar包"><a href="#引入Tomcat8-0-37jar包" class="headerlink" title="引入Tomcat8.0.37jar包"></a>引入Tomcat8.0.37jar包</h4><p>由于Tomcat的入口类JIoEndPoint实现在tomcat-coyote.jar包中，入口org.apache.tomcat.util.net.JIoEndpoint，该类用来处理传递进来的TCP连接，它实现了一个简单的服务器模式：一个监听线程用来接收socket以及为每个进来的连接创建一个worker来处理。更加高级的功能会涉及到线程重用，如队列等。所以需要引入Tomcat8.0.37中的tomcat-coyote.jar包，在Tomcat8项目的lib目录中。</p>
<a id="more"></a>
<h4 id="附加源码"><a href="#附加源码" class="headerlink" title="附加源码"></a>附加源码</h4><p>附加源码如下图所示。</p>

<h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>在JIoEndPoint类中的processSocket方法上新建断点，在浏览器中请求<a href="http://localhost:9090/examples/demo/test" target="_blank" rel="external">地址</a>即可命中断点，单步跟踪调试即可。Tomcat中支持两种协议的连接器：HTTP/1.1与AJP/1.3。HTTP/1.1协议负责建立HTTP连接，web应用通过浏览器访问tomcat服务器用的就是这个连接器，默认监听的是8080端口；AJP/1.3协议负责和其他HTTP服务器建立连接，监听的是8009端口，比如tomcat和apache或者iis集成时需要用到这个连接器。<br>协议上有三种不同的实现方式：JIO、APR、NIO。</p>
<ul>
<li><strong>JIO(java.io)</strong>：用java.io纯JAVA编写的TCP模块，这是tomcat默认连接器实现方法；</li>
<li><strong>APR(Apache Portable Runtime)</strong>：有C语言和JAVA两种语言实现，连接Apache httpd Web服务器的类库是在C中实现的，同时用APR进行网络通信；</li>
<li><strong>NIO(java.nio)</strong>：这是用纯Java编写的连接器(Conector)的一种可选方法。该实现用java.nio核心Java网络类以提供非阻塞的TCP包特性。ProtocolHandler接口是对这些协议的抽象</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Eclipse中启动和调试Tomcat（一）]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/20/launching-and-debugging-tomcat/</url>
      <content type="html"><![CDATA[<p>在Eclipse中调试Tomcat可以分析HTTP请求从Tomcat捕获到Servlet的过程。这个是调试Tomcat的目的。调试的环境是：</p>
<ul>
<li>IDE：Eclipse Java EE IDE for Web Developers.Version: Neon Release (4.6.0) Build id: 20160613-1800</li>
</ul>
<ul>
<li>Tomcat 8.0（8.0.37）</li>
</ul>
<ul>
<li><p>JDK 1.8</p>
</li>
<li><p>OS：Windows 7 Ultimate x64</p>
</li>
</ul>
<a id="more"></a>
<h4 id="创建项目Tomcat8"><a href="#创建项目Tomcat8" class="headerlink" title="创建项目Tomcat8"></a>创建项目Tomcat8</h4><p>创建一个新的Java类型项目，项目名称为“Tomcat8”，如下如所示。</p>

<h4 id="下载Tomcat-8-0-37二进制包"><a href="#下载Tomcat-8-0-37二进制包" class="headerlink" title="下载Tomcat 8.0.37二进制包"></a>下载Tomcat 8.0.37二进制包</h4><p>下载<a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="external">Tomcat 8.0.37</a>对应的二进制文件。将之拷贝到项目Tomcat8项目的根目录。拷贝之后Tomcat项目的目录结构如下图所示。</p>

<h4 id="创建另一个项目test"><a href="#创建另一个项目test" class="headerlink" title="创建另一个项目test"></a>创建另一个项目test</h4><p>创建一个Maven的webapp项目,名字为“test”。</p>
<h4 id="新建自定义Servlet"><a href="#新建自定义Servlet" class="headerlink" title="新建自定义Servlet"></a>新建自定义Servlet</h4><p>在test项目下新建一个自定义Servlet,名字为“TestServlet”，如图所示：</p>

<p>由于TestServlet实现HttpServlet接口，HttpServlet接口的定义在servlet-api.jar包中，所以在test项目的Library中需要引用Tomcat8项目目录下的servlet-api.jar包。新建自定义Servlet完成后在Tomcat8项目中配置servlet映射(/webapps/examples/WEB-INF)：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上映射说明从/demo/test发送的请求由名为test的Servlet来处理。在Tomcat8项目中配置servlet(/webapps/examples/WEB-INF)：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>demo.TestServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上配置指明名为test的Servlet处理的类的完整路径为：demo.TestServlet。</p>
<h4 id="配置调试参数"><a href="#配置调试参数" class="headerlink" title="配置调试参数"></a>配置调试参数</h4><p>配置test项目，创建调试配置，配置Main Class为Tomcat的启动类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.apache.catalina.startup.Bootstrap</div></pre></td></tr></table></figure>
<p>配置test项目的工作空间为Tomcat8的工作空间，如图所示：</p>

<h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>在自定义的Servlet的doGet方法上打断点，打开浏览器访问<a href="http://localhost:9090/examples/demo/test" target="_blank" rel="external">链接</a>即可命中自定义Servlet。从这里可以加深理解HTTP请求到自定义Servlet处理的过程，可以理解Spring MVC和Tomcat是如何联系起来的。</p>
<p>源自：</p>
<ul>
<li><a href="http://andreas.haufler.info/2012/01/launching-and-debugging-tomcat-from.html" target="_blank" rel="external">Launching and Debugging Tomcat from Eclipse without complex plugins</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中String非空判断]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/19/java-string-not-null/</url>
      <content type="html"><![CDATA[<p>如果使用的Java运行时版本在Java SE 1.6之前，可以这样判断字符串非空：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(str != <span class="keyword">null</span> &amp;&amp; str.length() != <span class="number">0</span>)</div></pre></td></tr></table></figure>
<p>如果使用的Java运行时版本是Java SE 1.6及之后版本，可以这样判断字符串非空：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(str != <span class="keyword">null</span> &amp;&amp; !str.isEmpty())</div></pre></td></tr></table></figure>
<p>使用org.apache.commons.lang.StringUtils<a href="http://commons.apache.org/proper/commons-lang/" target="_blank" rel="external">Apache commons-lang</a>来完成：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(str)) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如下方式也可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.google.common.base.Strings;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!Strings.isNullOrEmpty(myString)) &#123;</div><div class="line">       <span class="keyword">return</span> myString;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="非空默认值"><a href="#非空默认值" class="headerlink" title="非空默认值"></a>非空默认值</h4><p>有时在值为null时，会给一个默认值，有如下方式。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String alarmType = vehicleMessageHandler.parseAlarm(kafkaRecievedLocationMessageBody.getAlarm());</div><div class="line"><span class="comment">//使用三元运算符</span></div><div class="line">positional.setAlarm(StringUtils.isBlank(alarmType) ? <span class="string">"0"</span> : alarmType);</div><div class="line"><span class="comment">//com.google.common.base</span></div><div class="line">Objects.firstNonNull(alarmType, <span class="string">"0"</span>);</div><div class="line"><span class="comment">//java.util</span></div><div class="line">Optional.ofNullable(alarmType).orElse(<span class="string">"0"</span>);</div></pre></td></tr></table></figure>
<p>源自：</p>
<ul>
<li><a href="http://stackoverflow.com/questions/3598770/java-check-whether-a-string-is-not-null-and-not-empty" target="_blank" rel="external">Java, check whether a string is not null and not empty?</a></li>
</ul>
<ul>
<li><a href="http://stackoverflow.com/questions/8039504/how-to-convert-a-possible-null-value-to-a-default-value-using-guava" target="_blank" rel="external">How to convert a possible null-value to a default value using Guava?</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC源码调试]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/17/springmvc-sourcecode-debugging/</url>
      <content type="html"><![CDATA[<p>这里调试Spring MVC的环境是：</p>
<ul>
<li><p>Windows 7</p>
</li>
<li><p>Eclipse Java EE IDE for Web Developers,Version: Neon Release (4.6.0).Build id: 20160613-1800</p>
</li>
<li><p>JDK 1.8</p>
</li>
<li><p>Spring MVC 4.2.3</p>
</li>
<li><p>Apache Tomcat 8.0</p>
</li>
</ul>
<p>想了解平时学习的理论知识在实际的代码实现中是什么情况，比较好的方式是阅读源码，如果能在阅读过程中根据疑问动手调试源码验证猜想和疑问，那就更加完美了。这里想看Spring MVC一个HTTP请求从开始到结束到底是怎么运行的，Spring MVC怎么处理，选取了4.2.3版本的源码进行调试。</p>
<a id="more"></a>
<p>首先从GitHub上下载4.2.3版本的源码，在项目的Maven Dependencies找到名为spring-webmvc-4.2.3.REALEASE的jar包，单击右键build-path–&gt;Configure build path,在Libraries中找到对应的jar包，选中source attachment–&gt;Edit.</p>

<p>在spring-webmvc-4.2.3.REALEASE.jar中找到dispatchservlet类，打断点即可进入调试。</p>
]]></content>
    </entry>
    
  
  
</search>
