<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Google Chrome总结与分享]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/19/chrome-using/</url>
      <content type="html"><![CDATA[<h4 id="禁用Google-Chrome的Javascript"><a href="#禁用Google-Chrome的Javascript" class="headerlink" title="禁用Google Chrome的Javascript"></a>禁用Google Chrome的Javascript</h4><p>禁用Javascipt可以提升浏览网页的安全性。如下图所示。</p>

<a id="more"></a>
<h4 id="打开Google-Chrome任务管理器"><a href="#打开Google-Chrome任务管理器" class="headerlink" title="打开Google Chrome任务管理器"></a>打开Google Chrome任务管理器</h4><p>可以使用快捷键<code>Shift + Esc</code>打开Google Chrome的任务管理器控制台。如下图所示:</p>
<img src="/2017/01/19/chrome-using/google-chrome-task-manage-console.jpg" alt="Google Chrome任务管理控制台" title="Google Chrome任务管理控制台">
<h4 id="快捷键-Shortcuts"><a href="#快捷键-Shortcuts" class="headerlink" title="快捷键(Shortcuts)"></a>快捷键(Shortcuts)</h4><table>
<thead>
<tr>
<th>快捷键(Short Keys)</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>打开“菜单”</td>
<td style="text-align:center">Alt + f、Alt + e 或 F10</td>
</tr>
<tr>
<td>Ctrl + Shift + B</td>
<td style="text-align:center">显示隐藏书签</td>
</tr>
<tr>
<td>G</td>
<td style="text-align:center">滑倒页面的底部</td>
</tr>
<tr>
<td>gg</td>
<td style="text-align:center">滑倒页面的顶部</td>
</tr>
</tbody>
</table>
<h4 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h4><h5 id="Vimium-装逼神器，必备"><a href="#Vimium-装逼神器，必备" class="headerlink" title="Vimium(装逼神器，必备)"></a>Vimium(装逼神器，必备)</h5><p>Vimium is an open source Google Chrome Extension[1] which provides keyboard short-cuts for navigation and control in the spirit of the Vim editor. Unlike other add-ons for web browsers such as Vimperator or Pentadactyl, it doesn’t modify the browser’s interface but instead focuses on allowing the user to navigate web pages, tabs and links using vim-like keyboard commands rather than the mouse. It also allows the user to map or customise its key bindings.</p>
<table>
<thead>
<tr>
<th>快捷键(Short Keys)</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Shift + ?</td>
<td style="text-align:center">调取出Vimium帮助页面</td>
</tr>
</tbody>
</table>
<ul>
<li><a href="https://support.google.com/chrome/answer/157179?hl=zh-Hans" target="_blank" rel="external">Chrome 键盘快捷键</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java cannot find symbol]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/17/java-cannot-find-symbol/</url>
      <content type="html"><![CDATA[<p> 在编译项目时，提示找不到符号，错误如下：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Error:(40, 20) java: cannot find symbol</div><div class="line"> symbol:   method setParams(java.lang.String)</div><div class="line"> location: variable log of type creditsystem.data.model.OperationLog</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>启用Annotation Processor即可。Annotation Processor即为注解的处理器。与运行时注解RetentionPolicy.RUNTIME不同，Annotation Processor处理RetentionPolicy.SOURCE类型的注解。在Java代码编译阶段对标注RetentionPolicy.SOURCE类型的注解进行处理。这样在编译过程中添加代码，效率就非常高了。同样，Annotation Processor也可以实现IDE编写代码时的各种代码检验，例如当你在一个并未覆写任何父类方法的函数上添加了@Override注解，IDE会红线标识出你的函数提示错误。</p>
<p>同时安装Lombok插件。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[蔡康永先生的作品]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/16/the-book-of-caikangyong/</url>
      <content type="html"><![CDATA[<p>今天看完了蔡康永先生的书《蔡康永的说话之道》。由于生活里的一些些经历，时常在反思自己，哪里做的不够好，特别是人际关系的拿捏，就像炒菜时的放盐“少许”，说难也不难，说简单，有的人做到刚刚好也蛮难。</p>
<a id="more"></a>
<p>记得在学校那阵子，比较喜欢阅读传记，还有口述历史。传记的真实性不敢恭维，口述历史相对来说保留了好多不一样的历史信息，从一个或大或小的人物里，讲出小人物看到和感受到的历史，让人觉得真实可信。不知是否这个缘故，倒让自己变得了然无趣了。读书不能太单一,为了更好的理解自己,让自己以后可以更加得体,恰好有人推荐了蔡康永的这部书.</p>
<p>一直以来对这种“时书”是敬而远之的，什么20天练就好口才，5天教你Office，5分钟成为演讲者。但是蔡康永先生的作品还是非常值得反复阅读和思考的。不管是想改善人际关系，增进朋友之间的友谊，还是和恋人相处，都会给一些中肯的思路。不管怎样,真诚为基础,逢场做戏的人生也空虚.看起来投机,段子满天飞,实则各怀心事(关于此,可以看看电影<a href="https://movie.douban.com/subject/26614893/" target="_blank" rel="external">&lt;&lt;完美陌生人(Perfetti sconosciuti)&gt;&gt;</a>).如果热衷于套路另当别论.</p>
<table>
<thead>
<tr>
<th>年份</th>
<th style="text-align:left">名称</th>
<th style="text-align:center">出版社</th>
</tr>
</thead>
<tbody>
<tr>
<td>2010年10月1日</td>
<td style="text-align:left">《蔡康永的说话之道》</td>
<td style="text-align:center">沈阳出版社</td>
</tr>
</tbody>
</table>
<p>另外，还发现了蔡康永先生的<a href="http://blog.sina.com.cn/u/1282005885" target="_blank" rel="external">新浪博客</a>。不知是不是他写的，分享给大家。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx访问]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/15/nginx-access/</url>
      <content type="html"><![CDATA[<p>部署网站时遇到了一个奇怪的问题,通过localhost和127.0.0.1可以访问,但是通过IP不能访问.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://localhost:23035//可以访问</div><div class="line">http://127.0.0.1:23035//可以访问</div><div class="line">http://192.168.1.100:23035//不能访问</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>至今未解何因.可以   先看看端口绑定有没有问题，执行<code>netstat -na | grep 80</code>，如果看到一行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN</div></pre></td></tr></table></figure>
<p>那就说明绑定的是所有端口，是正常的。如果不是0.0.0.0而是127.0.0.1就不正常了，可以看看你的nginx.conf是不是指定了ip的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《小王子》(The Little Prince)]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/13/reading-the-little-prince/</url>
      <content type="html"><![CDATA[<p>昨天晚上把《小王子》(法语：<em>Le Petit Prince</em>、英语：<em>The Little Prince</em>)阅读完毕，为了练习英语，买的是英文版，不过纸张和印刷质量都不尽如人意。想起来，薄薄的一册书，断断续续看了好几个月。完全不在看书的状态，沉寖阅读的感觉再没有了。想阅读一些英文作品，大部头的是完全看不懂的了，找了一些儿童文学类，对词汇要求比较低的书籍翻一翻，能体会那份童心吗？不能。</p>
<a id="more"></a>
<p>《小王子》（法语：<em>Le Petit Prince</em>、英语：<em>The Little Prince</em>），是法国贵族作家、诗人、飞行员先驱安托万·德·圣-埃克苏佩里创作的最著名的小说，发表于1943年。作为法语书籍中拥有最多读者和译本的小说，《小王子》曾当选为20世纪法国最佳图书。它是世界最畅销的图书之一，被翻译成250多种语言和方言，全世界迄今已售出两亿多册，年销售一百多万册。</p>
<p>前段时间打算读读人文书籍，兴冲冲买了几本。阅读后，发现还是需要到书店去试读部分，否则买回家看不懂也挺头疼。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux常用配置]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/13/linux-config/</url>
      <content type="html"><![CDATA[<p>记录Linux常见的配置。</p>
<a id="more"></a>
<h4 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h4><p>如果想通过主机名访问，那么需要在服务端和客户端的hosts文件(<code>/etc/hosts</code>)中同时配置主机名和IP地址的映射。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VirtualBox配置本地yum镜像]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/12/virtualbox-local-mirror-source/</url>
      <content type="html"><![CDATA[<p>由于安装的是中标麒麟操作系统，网上的镜像不知是否可用(不知道是否有坑)，所以在本地配置光驱中的软件源为yum镜像。</p>
<a id="more"></a>
<h4 id="添加ISO"><a href="#添加ISO" class="headerlink" title="添加ISO"></a>添加ISO</h4><p>在VirtualBox中添加ISO：</p>
<img src="/2017/01/12/virtualbox-local-mirror-source/add-iso.png" alt="添加ISO" title="添加ISO">
<p>添加完毕镜像后启动虚拟机。</p>
<h4 id="挂载镜像"><a href="#挂载镜像" class="headerlink" title="挂载镜像"></a>挂载镜像</h4><p>使用如下命令查看光驱的位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsblk</div></pre></td></tr></table></figure>
<p>创建挂载点：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /mnt/cdrom</div></pre></td></tr></table></figure>
<p>挂载镜像，将Ubuntu DVD ISO文件挂载到/mnt/cdrom下，使用–o loop参数(这里已经挂载好，所以此步骤省略)：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mount -o loop /media/NeoKylin Linux Advanced Server 6.iso /mnt/cdrom</div></pre></td></tr></table></figure>
<p>在<code>/etc/yum.repo.d/</code>目录下新建kylin.repo文件，加入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[local]</div><div class="line">baseurl=file:///media/NeoKylin\ Linux\ Advanced\ Server\ 6</div><div class="line">gpgcheck=0</div><div class="line">enable=1</div></pre></td></tr></table></figure>
<p>注意在写有空格的文件夹时，需要添加转义符号\。使用如下命令查看所有源：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum repolist all</div></pre></td></tr></table></figure>
<p>所有可用源列表如下图所示：</p>
<img src="/2017/01/12/virtualbox-local-mirror-source/repolist.jpg" alt="查看所有可用源" title="查看所有可用源">
<p>可以看到配置的local源已经enable。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sonarqube安装与使用]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/10/sonar-using/</url>
      <content type="html"><![CDATA[<p>Sonar是一个用于代码质量管理的开源平台，用于管理Java源代码的质量。</p>
<h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><p>登录MySQL数据库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>创建sonar数据库：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> sonar <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</div></pre></td></tr></table></figure>
<p>配置 sonar 用户：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'sonar'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'sonar123'</span>;  </div><div class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> sonar.* <span class="keyword">to</span> <span class="string">'sonar'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'sonar123'</span>;</div><div class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> sonar.* <span class="keyword">to</span> <span class="string">'sonar'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'sonar123'</span>;  </div><div class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</div></pre></td></tr></table></figure>
<h4 id="配置sonar"><a href="#配置sonar" class="headerlink" title="配置sonar"></a>配置sonar</h4><p>编辑 ${SONAR_HOME}/conf/sonar.properties：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># User credentials.</div><div class="line"># Permissions to create tables, indices and triggers must be granted to JDBC user.</div><div class="line"># The schema must be created first.</div><div class="line">sonar.jdbc.username=sonar</div><div class="line">sonar.jdbc.password=sonar123</div><div class="line"></div><div class="line">#----- Embedded Database (default)</div><div class="line"># H2 embedded database server listening port, defaults to 9092</div><div class="line">#sonar.embeddedDatabase.port=9092</div><div class="line">#----- MySQL 5.6 or greater</div><div class="line"># Only InnoDB storage engine is supported (not myISAM).</div><div class="line"># Only the bundled driver is supported. It can not be changed.</div><div class="line">sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance</div></pre></td></tr></table></figure>
<p>配置完毕后，启动sonar：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./sonar.sh start &amp;</div></pre></td></tr></table></figure>
<p>启动成功后，访问地址：<code>http://localhost:9000</code>，即可看到sonarqube的主界面。首次登录的用户名和密码都是admin。Sonar默认的端口是”9000”、默认的上下文路径是”/”、默认的网络接口是”0.0.0.0”，默认的管理员帐号和密码为:admin/admin.</p>
<h4 id="Sonar插件"><a href="#Sonar插件" class="headerlink" title="Sonar插件"></a>Sonar插件</h4><p>首先下载<a href="http://docs.sonarqube.org/display/SONARQUBE52/Installing+and+Configuring+SonarQube+Scanner" target="_blank" rel="external">sonar-scanner</a>.下载完毕后，将解压完成后的软件拷贝到指定目录下，在此处，拷贝到目录<code>/opt/local/tools/</code>下。打开bash_profile脚本，配置sonarqube和sonar scanner环境变量:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> SONAR_HOME=/opt/<span class="built_in">local</span>/tools/sonarqube-6.2</div><div class="line"><span class="built_in">export</span> SONAR_SCANNER=/opt/<span class="built_in">local</span>/tools/sonar-runner-2.4</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$SONAR_HOME</span>/bin:<span class="variable">$SONAR_SCANNER</span>/bin</div></pre></td></tr></table></figure>
<p>使环境变量生效：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.bash_profile</div><div class="line"></div><div class="line"><span class="comment"># 查看所有环境变量</span></div><div class="line">env</div></pre></td></tr></table></figure>
<p>在需要分析的项目的根目录下，新建文件sonar-project.properties。写入如下内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># must be unique in a given SonarQube instance</span></div><div class="line">sonar.projectKey=dolphin-1</div><div class="line"><span class="comment"># this is the name displayed in the SonarQube UI</span></div><div class="line">sonar.projectName=dolphin</div><div class="line">sonar.projectVersion=1.0</div><div class="line"></div><div class="line"><span class="comment"># Path is relative to the sonar-project.properties file. Replace "\" by "/" on Windows.</span></div><div class="line"><span class="comment"># Since SonarQube 4.2, this property is optional if sonar.modules is set. </span></div><div class="line"><span class="comment"># If not set, SonarQube starts looking for source code from the directory containing </span></div><div class="line"><span class="comment"># the sonar-project.properties file.</span></div><div class="line">sonar.sources=/home/dolphin</div><div class="line"></div><div class="line"><span class="comment"># Encoding of the source code. Default is default system encoding</span></div><div class="line">sonar.sourceEncoding=UTF-8</div></pre></td></tr></table></figure>
<p>sonar.source是项目的源码目录，project name是项目名称。在项目的根目录下执行命令<code>sonar-runner</code>即可进行分析，分析完毕后登录sonar主页面<code>http://localhost:9000</code>即可查看分析结果。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[npm使用]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/10/npm-using/</url>
      <content type="html"><![CDATA[<h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>npm 允许在package.json文件里面，使用scripts字段定义脚本命令。例如可以在Package.js里面定义如下脚本：</p>
<a id="more"></a>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"xiaoqiang"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"babel-core"</span>: <span class="string">"6.18.2"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"antd"</span>: <span class="string">"2.6.0"</span>  </div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"site-dev"</span>: <span class="string">"./node_modules/gulp/bin/gulp.js"</span>,</div><div class="line">    <span class="attr">"site-watch"</span>: <span class="string">"./node_modules/gulp/bin/gulp.js watch"</span>,</div><div class="line">    <span class="attr">"dev"</span>: <span class="string">"webpack --watch --progress --colors --display-error-details --config webpack/dev.config.js"</span>,</div><div class="line">    <span class="attr">"build"</span>: <span class="string">"webpack --verbose --display-error-details --config webpack/dev.config.js &amp;&amp; ./node_modules/gulp/bin/gulp.js"</span>,</div><div class="line">    <span class="attr">"prod"</span>: <span class="string">"webpack --progress --display-error-details --config webpack/prod.config.js &amp;&amp; ./node_modules/gulp/bin/gulp.js"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行脚本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装依赖，如果我们的项目依赖了很多package，一个一个地安装那将是个体力活。</span></div><div class="line"><span class="comment"># 可以将项目依赖的包都在package.json这个文件里声明，然后一行命令搞定</span></div><div class="line">npm install</div><div class="line"><span class="comment"># 运行脚本里的site-dev,相当于执行npm gulp.js</span></div><div class="line">npm run site-dev</div><div class="line">npm run dev</div></pre></td></tr></table></figure>
<p>gulp是一个基于流的构建系统(The streaming build system)，暂时还不理解到底是个什么鬼东西。Webpack是一款用户打包前端模块的工具。主要是用来打包在浏览器端使用的javascript的。同时也能转换、捆绑、打包其他的静态资源，包括css、image、font file、template等。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ID设计]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/10/id-design/</url>
      <content type="html"><![CDATA[<h4 id="UUID-GUID"><a href="#UUID-GUID" class="headerlink" title="UUID(GUID)"></a>UUID(GUID)</h4><ul>
<li>全球唯一</li>
<li>存储大</li>
<li>索引慢</li>
<li>不美观</li>
</ul>
<a id="more"></a>
<h4 id="ObjectId"><a href="#ObjectId" class="headerlink" title="ObjectId"></a>ObjectId</h4><p>ObjectId是MongoDB的一种ID生成机制。</p>
<ul>
<li>存储大</li>
<li>索引慢</li>
<li>不美观</li>
<li>特定集群内唯一</li>
<li>可以逆向推算出数据对应的(插入时间，插入的机器)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx使用]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/09/nginx-using/</url>
      <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在Ubuntu下，输入如下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install nginx -y</div></pre></td></tr></table></figure>
<p>安装完毕后配置文件在<code>/etc/nginx/config.d</code>。</p>
<a id="more"></a>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看Nginx的安装目录,一般在(/usr/local/nginx)下</span></div><div class="line">whereis nginx</div><div class="line"></div><div class="line"><span class="comment"># 重启Nginx</span></div><div class="line">sudo /etc/init.d/nginx restart</div></pre></td></tr></table></figure>
<h4 id="location"><a href="#location" class="headerlink" title="location"></a>location</h4><p>每个 url 请求都会对应的一个服务，nginx 进行处理转发或者是本地的一个文件路径，或者是其他服务器的一个服务路径。而这个路径的匹配是通过 location 来进行的。我们可以将 server 当做对应一个域名进行的配置，而 location 是在一个域名下对更精细的路径进行配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location /api&#123;</div><div class="line">      proxy_pass http://dn5:28080;</div><div class="line">      proxy_redirect off;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将前缀为api的请求发送到地址：<code>http://dn5:28080</code>.</p>
<h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><h5 id="the-HTTP-rewrite-module-requires-the-PCRE-library"><a href="#the-HTTP-rewrite-module-requires-the-PCRE-library" class="headerlink" title="the HTTP rewrite module requires the PCRE library"></a>the HTTP rewrite module requires the PCRE library</h5><p>在安装时提示 the HTTP rewrite module requires the PCRE library：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">./configure: error: the HTTP rewrite module requires the PCRE library.</div><div class="line">You can either disable the module by using --without-http_rewrite_module</div><div class="line">option, or install the PCRE library into the system, or build the PCRE library</div><div class="line">statically from the source with nginx by using --with-pcre=&lt;path&gt; option.</div></pre></td></tr></table></figure>
<p>安装pcre-devel与openssl-devel解决问题：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum -y install pcre-devel openssl openssl-devel</div><div class="line"> </div><div class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux Shell脚本调试]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/08/linux-shell-debug/</url>
      <content type="html"><![CDATA[<p>在Ubuntu 14.04下安装Gradle之后,提示如下错误:</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># gradle</div><div class="line"></div><div class="line">ERROR: JAVA_HOME is set to an invalid directory: /usr/lib/jvm/default-java</div><div class="line"></div><div class="line">Please set the JAVA_HOME variable in your environment to match the</div><div class="line">location of your Java installation.</div></pre></td></tr></table></figure>
<p>打开Gradle脚本:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /usr/bin/gradle</div></pre></td></tr></table></figure>
<p>修改第70行为:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/jdk1.8.0_101</div></pre></td></tr></table></figure>
<p>再次运行Gradle命令,问题已经修复.在解决的过程中,可以是用命令调试Gradle脚本:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash -x /usr/bin/gradle</div></pre></td></tr></table></figure>
<p>可以看到脚本运行过程中输出的变量.</p>
<p>参考资料:</p>
<ul>
<li><p><a href="http://stackoverflow.com/questions/22307516/gradle-finds-wrong-java-home-even-though-its-correctly-set" target="_blank" rel="external">Gradle finds wrong JAVA_HOME even though it’s correctly set</a></p>
</li>
<li><p><a href="http://coolshell.cn/articles/1379.html" target="_blank" rel="external">如何调试BASH脚本</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用命令行编译运行Java]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/08/java-command-compile/</url>
      <content type="html"><![CDATA[<p>在旧的电脑上打开IDE还是比较慢的，有时只需要运行一段很小的代码片段(Snippet),没有必要搬出IDE,所以就直接使用命令来编译,逼格高,速度快.</p>
<a id="more"></a>
<p>直接新建一个Java文件,名字叫xiaoqiang.java,输入简单的内容:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xiaoqiang</span></span>&#123;</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"My name is xiaoqiang."</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>保存后,输入如下命令编译:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Java编译器(Compiler)</span></div><div class="line">javac xiaoqiang.java</div></pre></td></tr></table></figure>
<p>编译完毕后,会生成一个xiaoqiang.class文件.输入如下命令运行程序:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java xiaoqiang</div></pre></td></tr></table></figure>
<p>输出为:My name is xiaoqiang.以后就可以直接写代码片段了,查看效果就可以简单的用命令搞定即可.研究一些代码片段非常方便.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL注入(SQL Injection)]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/06/sql-injection/</url>
      <content type="html"><![CDATA[<h4 id="MyBatis预防SQL注入"><a href="#MyBatis预防SQL注入" class="headerlink" title="MyBatis预防SQL注入"></a>MyBatis预防SQL注入</h4><p>在MyBatis中，”${xxx}”这样格式的参数会直接参与sql编译，从而不能避免注入攻击。但涉及到动态表名和列名时，只能使用“${xxx}”这样的参数格式，所以，这样的参数需要我们在代码中手工进行处理来防止注入。所以尽量用#{}这种方式传参数，如果用到了${}方式要手动过滤sql注入。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str.replaceAll(<span class="string">".*([';]+|(--)+).*"</span>,<span class="string">""</span>)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[aria2使用]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/05/aria2-using/</url>
      <content type="html"><![CDATA[<p>忽然发现uGet在Mac下又玩不转了，还是命令行包打天下啊，Mac支持aria2下载，目前看来在各种平台上都能转起来的就aria了。</p>
<a id="more"></a>
<p>aria2最简单的下载,aria2后面跟上链接的地址即可:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aria2c http://ftp.jaist.ac.jp/pub/Linux/Fedora/releases/25/Workstation/x86_64/iso/Fedora-Workstation-Live-x86_64-25-1.3.iso</div></pre></td></tr></table></figure>
<p>会将下载的文件保存到当前目录下。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Graphviz使用]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/05/graphviz-using/</url>
      <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Fedora下安装</span></div><div class="line">dnf install -y graphviz</div><div class="line"><span class="comment">#Ubuntu下安装</span></div><div class="line">sudo apt install -y graphviz</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>生成文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dot -Tjpg -Gdpi=1024 maven-lifecycle.dot -o maven-lifecycle.jpg</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java rest总结]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/04/java-rest-summarize/</url>
      <content type="html"><![CDATA[<p>以下是开发Rest接口时遇到的一些问题。</p>
<a id="more"></a>
<h4 id="HTTP信息转换"><a href="#HTTP信息转换" class="headerlink" title="HTTP信息转换"></a>HTTP信息转换</h4><p>@ResponseBody 注解能够对客户端发过来的对象进行自动转换。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"savejson"</span>,method = RequestMethod.POST,headers = <span class="string">"content-Type=application/json"</span>)</div><div class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"必须且只能传一个参数"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveXzss</span><span class="params">(@RequestBody String summaryXzssJson)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">    SummaryXzss summaryXzss = mapper.readValue(summaryXzssJson, <span class="keyword">new</span> TypeReference&lt;SummaryXzss&gt;() &#123;</div><div class="line">    &#125;);</div><div class="line">    xzssService.saveXzss(summaryXzss);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现自动转换，必须满足以下两个条件：</p>
<ol>
<li>请求的 Content-Type 头信息必须是 application/json；</li>
<li>Jackson Json 库必须包含在应用程序的类路径下。</li>
</ol>
<p>在接收客户端HTTP请求的消息时，如果客户端将请求的Json放到消息体中，那么服务端可以直接取实体，或者取相应的Json进行反序列化。2种方式都能够达到要求，一般是直接取实体，省去了反序列化的步骤，由框架进行反序列化。</p>
<h4 id="发送Post请求"><a href="#发送Post请求" class="headerlink" title="发送Post请求"></a>发送Post请求</h4><p>发送Post请求时，需要指定Content-Type和Accept请求头。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">"APPID:hlb11529c136998cb6"</span></div><div class="line">     -H <span class="string">"TIMESTAMP:2016-12-19 16:58:02"</span></div><div class="line">     -H <span class="string">"ECHOSTR:sdsaasf"</span></div><div class="line">     -H <span class="string">"TOKEN:14d45648c62a746ae9dd9b90c03c50893061222d"</span></div><div class="line">     -H <span class="string">"Accept:application/json"</span></div><div class="line">     -H <span class="string">"Accept:application/json"</span></div><div class="line">     -H <span class="string">"Content-Type:application/json"</span></div><div class="line">     -X POST <span class="_">-d</span> <span class="string">'&#123;"id":1&#125;'</span> http://localhost:28080/api/xzss/savejson</div></pre></td></tr></table></figure>
<p>否则会提示415错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;timestamp&quot;: &quot;2017-01-04T03:28:26.404+0000&quot;,</div><div class="line">    &quot;status&quot;: 415,</div><div class="line">    &quot;error&quot;: &quot;Unsupported Media Type&quot;,</div><div class="line">    &quot;exception&quot;: &quot;org.springframework.web.HttpMediaTypeNotSupportedException&quot;,</div><div class="line">    &quot;message&quot;: &quot;Content type &apos;application/x-www-form-urlencoded&apos; not supported&quot;,</div><div class="line">    &quot;path&quot;: &quot;/api/xzss/savejson&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The Content-Type header is used by @RequestBody to determine what format the data being sent from the client in the request is. The accept header is used by @ResponseBody to determine what format to sent the data back to the client in the response. That’s why you need both headers.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python入门]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/01/python-introduce/</url>
      <content type="html"><![CDATA[<h4 id="目录树结构"><a href="#目录树结构" class="headerlink" title="目录树结构"></a>目录树结构</h4><p>清晰的项目需要有清晰的目录结构。</p>
<p>—-pydolphin<br>    |—–dolphin<br>    |—–lib<br>    |—–doc<br>    |—–scripts<br>    |—–tests</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[你需要一台Mac]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/01/you-need-a-mac/</url>
      <content type="html"><![CDATA[<p>年初，给自己换了一台MacBook Air。一大早即去专卖店，从进店到提走电脑，时间不到5分钟，一千多美金就花出去了。心里暗自嘀咕，要是挣钱有这么快就好了。选购的是最低配版的，配置如下：</p>
<ul>
<li>13.3inch屏幕</li>
<li>8GB内存</li>
<li>Intel Core i5</li>
<li>128GB SSD</li>
<li>屏幕分辨率1440*900(本人觉得不够细腻，选购时对分辨率要求可以再高些)</li>
</ul>
<a id="more"></a>
<p>工作人员说此款电脑是几年前的，性价比不高，128的SSD不够用。不过即使最低配置，应付一般工作是绝对足够的了，一没有玩游戏的嗜好，也不会用它存储电影，而且一般情况下存储容量大多数都是闲置的。还有它的待机时间也是让人非常惊叹的，理论上可以达到10个小时。这样即使忘记带电源线也可以处理不少工作，应付一整天。</p>
<p>由于它的轻便，在咖啡馆或者途中也可处理手头的工作。如果是女生的话，推荐高配的11.6inch的Mac，便携性更优秀，出差或者旅行即可随身携带。如果不是长时间使用电脑，小屏比大屏更加合适。</p>
<p>迫不及待用了一个下午，因为有使用*NIX系列系统的经验，除了注册Apple ID花了一些时间之外，其他还算问题不大。Mac最直接的感受就是：快，仿佛又回到了Windows XP的时代。电脑可以跟上自己的速度，不用再苦苦等待了。使用Mac和Windows有一些不同，比如它的Command键，Option键，完全不知道什么情况下使用，习惯了Windows的用户还是需要一些时间去适应 Mac OS X操作系统。而Mac OS X是由BSD系列衍生出来的，而BSD属于*NIX系列，了解操作系统的历史就会知道。平时也有使用Ubuntu和Fedora，但是拿到Mac还是不能快速找到节奏，快捷键什么的都是不一样的。不过这些都不是大问题，这些在使用了几个小时后就已经熟练了，使用熟练后，才会感觉到它对效率的提升。</p>
<p>如果平时使用Windows电脑经常遇到卡，电脑得好久才能反应过来，那么强烈建议换一台设备，Mac应是首选。至少经常卡顿的那台电脑不要应用于平时的工作中，不是由于它不够可靠，而是经常卡顿，对工作的思路和积极性会的影响不是一点半点。当用过Mac后，再也不想摸Windows了。</p>
<p>虽然Mac相对来说价格偏高，但是当使用之后，一定会觉得物有所值，贵是有贵的道理的。所以想要入手Mac的朋友，放下你的Windows电脑，立即去买Mac，不再犹豫，在Windows下能够做的事情，在Mac下一样可以做到并且会更快速。特别是做程序开发的朋友，如果是微软阵营，买Mac可能不是很必要，其他非微软阵营的，这件事请是值得考虑的。当然，如果是要玩游戏的话，Windows还是最佳的的选择。不管是办公还是装逼，找不到任何理由不使用Mac，我想我再也不想用Windows了。</p>
<p>走，Mac带回家！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac使用总结]]></title>
      <url>http://jiangxiaoqiang.com/2017/01/01/mac-using/</url>
      <content type="html"><![CDATA[<h4 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h4><p>brew是Mac下一款包管理器，默认是没有安装的。先安装包管理工具，其他软件可以通过包管理工具方便的安装。在终端中输入如下命令安装brew。</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
<p>安装完毕brew后，可以通过brew安装其他软件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装Lantern</span></div><div class="line">brew cask install Caskroom/cask/lantern</div><div class="line"><span class="comment"># 安装Google Chrome</span></div><div class="line">brew cask install Caskroom/cask/google-chrome</div><div class="line"><span class="comment"># 安装Java</span></div><div class="line">brew cask install java</div><div class="line"><span class="comment"># 安装PyCharm</span></div><div class="line">brew cask install pycharm</div><div class="line"><span class="comment"># 安装wget</span></div><div class="line">brew cask install wget</div><div class="line"><span class="comment"># 安装gradle</span></div><div class="line">brew install gradle</div><div class="line"><span class="comment"># 列出已经安装的软件名字</span></div><div class="line">brew list</div></pre></td></tr></table></figure>
<p>有些命令安装软件是brew，而有些命令安装软件是brew cask。brew是从下载源码解压然后<code>./configure &amp;&amp; make install</code>，同时会包含相关依存库。并自动配置好各种环境变量，而且易于卸载。而brew cask是已经编译好了的应用包(.dmg[Apple Disk Image]/.pkg)，仅仅是下载解压，放在统一的目录中(/opt/homebrew-cask/Caskroom)，省掉了自己去下载、解压、拖拽（安装）等步骤，同样，卸载相当容易与干净。这个对一般用户来说会比较方便，包含很多在AppStore里没有的常用软件。</p>
<p>brew默认的安装路径在/usr/local/bin下。</p>
<h4 id="设置root"><a href="#设置root" class="headerlink" title="设置root"></a>设置root</h4><p>打开终端，键入命令<code>sudo passwd root</code>,然后提示输入当前登录用户密码，通过以后，提示输入两遍root的密码。这样就设置好root帐号密码了，可以用root来登录MacOS了。打开终端，输入命令<code>su root</code>，输入密码即可．</p>
<h4 id="显示隐藏的文件夹"><a href="#显示隐藏的文件夹" class="headerlink" title="显示隐藏的文件夹"></a>显示隐藏的文件夹</h4><p>根目录有些文件夹默认是隐藏的，但是有时候配置的时候需要查看隐藏的目录,要显示隐藏的目录，运行如下命令即可．</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.finder AppleShowAllFiles -bool <span class="literal">true</span></div><div class="line">KillAll Finder</div></pre></td></tr></table></figure>
<p>前往根目录，在Finder里按快捷键<code>Ctrl + Alt + G</code>．输入根目录符号/即可，可以看到原来没有显示的隐藏目录．</p>
<h4 id="设置Java环境变量"><a href="#设置Java环境变量" class="headerlink" title="设置Java环境变量"></a>设置Java环境变量</h4><p>在当前用户的根目录下新建.bash_profiile隐藏文件。文件中添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home <span class="comment">#jdk安装路径   </span></div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span> </div><div class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</div></pre></td></tr></table></figure>
<h4 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h4><table>
<thead>
<tr>
<th>快捷键(Short Keys)</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌃</td>
<td style="text-align:center">Control</td>
</tr>
<tr>
<td>Control(⌃) + Command(⌘) + F(Full Screen)</td>
<td style="text-align:center">终端进入(退出)全屏模式，其他程序也可以使用快捷键进行最大话(最适化)</td>
</tr>
<tr>
<td>Command + Shift + {</td>
<td style="text-align:center">在终端(Terminal)中向左切换Tab页</td>
</tr>
<tr>
<td>Command + Shift + }</td>
<td style="text-align:center">在终端(Terminal)中向右切换Tab页</td>
</tr>
<tr>
<td>Command + Space</td>
<td style="text-align:center">打开Spotlight，快速搜索应用</td>
</tr>
<tr>
<td>Command + left</td>
<td style="text-align:center">在Google Chrome中后退</td>
</tr>
<tr>
<td>Command + Enter</td>
<td style="text-align:center">在新的标签页里打开链接</td>
</tr>
<tr>
<td>Command + Tab +Q</td>
<td style="text-align:center">在按Command + Tab出现运行程序列表后，按住Command键不松手，再按下Q键即可彻底退出程序</td>
</tr>
<tr>
<td>Command + L(Location)</td>
<td style="text-align:center">在Google Chrome中，可以快读定位到浏览器的链接处</td>
</tr>
<tr>
<td>Ctrl + Up</td>
<td style="text-align:center">到程序Tab页概览视图</td>
</tr>
<tr>
<td>Ctrl + Down</td>
<td style="text-align:center">从概览视图的当前页，视图最适化</td>
</tr>
<tr>
<td>Ctrl + Left/Right</td>
<td style="text-align:center">不同程序视图之间切换</td>
</tr>
<tr>
<td>Command + Tab + Option</td>
<td style="text-align:center">先按住Command + Tab，切换到需要最大化的程序,接着松开Tab，Command键不松，按住Option键，松开Command即可</td>
</tr>
<tr>
<td>Command + O/Down</td>
<td style="text-align:center">在Finder中打开文件</td>
</tr>
<tr>
<td>Ctrl + Space</td>
<td style="text-align:center">输入法切换(用苹果的输入法即可)</td>
</tr>
<tr>
<td>Command + Option + Shift + Esc</td>
<td style="text-align:center">强制关闭当前活动的程序</td>
</tr>
<tr>
<td>Command + Option + Esc</td>
<td style="text-align:center">打开强制关闭程序对话框</td>
</tr>
<tr>
<td>触摸板双指上下滑动</td>
<td style="text-align:center">上下滚动当前屏幕的页面</td>
</tr>
<tr>
<td>触摸板三指上下滑动</td>
<td style="text-align:center">最小化和最大化当前窗口</td>
</tr>
<tr>
<td>Ctrl + A(Ahead)</td>
<td style="text-align:center">在终端中将光标跳到行头</td>
</tr>
<tr>
<td>Ctrl + E(End)</td>
<td style="text-align:center">在终端中将光标跳到行尾</td>
</tr>
<tr>
<td>Ctrl + R</td>
<td style="text-align:center">在终端中搜索已经使用过的命令</td>
</tr>
<tr>
<td>Ctrl + Click</td>
<td style="text-align:center">相当于点击右键</td>
</tr>
</tbody>
</table>
<h4 id="设置Terminal颜色显示"><a href="#设置Terminal颜色显示" class="headerlink" title="设置Terminal颜色显示"></a>设置Terminal颜色显示</h4><p>Mac的终端下默认时没有颜色的，比如可执行文件和文件夹应该以不同的颜色表示。必须以命令<code>ls -G</code>才可以显示颜色。可以在bash_profile文件中添加如下内容即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> ls=<span class="string">"ls -G"</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spring-boot-app-management]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/31/spring-boot-app-management/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ComponentScan</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication app = <span class="keyword">new</span> SpringApplication(Application.class);</div><div class="line">        app.addListeners(<span class="keyword">new</span> ApplicationPidFileWriter(<span class="string">"app.pid"</span>));</div><div class="line">        app.run(args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>when we already have our PID file we need bash script providing standard operations like stop, start, restart and status checking. Below you can find simple script solving that challenge. </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我的背包]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/31/backpack/</url>
      <content type="html"><![CDATA[<p>是时候换一个高逼格的背包了，包里装电脑、书、笔记本，可以随时翻一翻，想想还蛮惬意的。上一个背包是大二去学校的时候老爸在镇上买的，结实耐用，到如今已经5年有余了。对背包的几点要求：</p>
<ul>
<li>要有逼格，不能太土，太Low，不能让背包和我一样</li>
<li>结实、耐用，持久是必须的</li>
<li>可以放一些小物件(数据线、U盘、充电器、水杯)</li>
<li>价格不能太贵(500以内)，毕竟现在还挣扎在温饱线上</li>
</ul>
<p>作为一个下流码农，包就如同剑客的剑鞘，电脑如同剑一样，包在人在，包亡人亡，虽然是玩笑话，也不禁热血沸腾。经过最终的比对，选择了<a href="https://www.incase.com/shop/backpacks/incase-city-compact-backpack/" target="_blank" rel="external">City Compact Backpack</a>，官网上是100美金左右。浏览了一下介绍的页面，不得不称赞，网页的字体非常漂亮。某宝上下单，748RMB。另外一款黑色的要便宜100多，在金钱面前总是那么容易丧失原则。最后还是选择了逼格满满的石楠黑，卖家声称石楠黑是新型环保面料，防水的效果也很好。天天吸霾的我，终于找到机会为祖国的环保事业贡献自己的一份力量了，默默的选择了石楠黑。</p>
<img src="/2016/12/31/backpack/city-compact-backpack.jpg" alt="City Compact Backpack" title="City Compact Backpack">
<p>City Compact Backpack是Incase旗下的产品。Incase创立于1997年美国加州，是专门以Apple产品为基础，用精品水准生产Apple周边产品的一个品牌。与 Apple 相同，Incase品牌风格主打的是高级简约的路线。</p>
<p>买回来后看了一下它的铭牌，是采用一种叫做Ecoya的材料，这种材料在生产上色过程中采用了节水和低二氧化碳排放的工艺，既能保持原先的耐用性，也比传统材料更环保。不过还是跟自己预想的环保材料有差异，本以为是那种可以自然降解对环境无害的材料。不管只是商家的噱头也好，还是真正的减少了能量的消耗和碳的排放，也算是进步吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中synchronized、reentrantlock、lock区别]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/30/synchronized-reentrantlock-lock/</url>
      <content type="html"><![CDATA[<h4 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h4><h4 id="reentrantlock"><a href="#reentrantlock" class="headerlink" title="reentrantlock"></a>reentrantlock</h4><p>与目前的 synchronized 实现相比，争用下的 ReentrantLock 实现更具可伸缩性。（在未来的 JVM 版本中，synchronized 的争用性能很有可能会获得提高。）这意味着当许多线程都在争用同一个锁时，使用 ReentrantLock 的总体开支通常要比 synchronized 少得多。eentrantLock 构造器的一个参数是 boolean 值，它允许您选择想要一个 公平（fair）锁，还是一个 不公平（unfair）锁。公平锁使线程按照请求锁的顺序依次获得锁；而不公平锁则允许讨价还价，在这种情况下，线程有时可以比先请求锁的其他线程先得到锁。为什么我们不让所有的锁都公平呢？毕竟，公平是好事，不公平是不好的，不是吗？（当孩子们想要一个决定时，总会叫嚷“这不公平”。我们认为公平非常重要，孩子们也知道。）在现实中，公平保证了锁是非常健壮的锁，有很大的性能成本。要确保公平所需要的记帐（bookkeeping）和同步，就意味着被争夺的公平锁要比不公平锁的吞吐率更低。作为默认设置，应当把公平设置为 false ，除非公平对您的算法至关重要，需要严格按照线程排队的顺序对其进行服务。</p>
<h4 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h4><p>Lock 和 synchronized 有一点明显的区别 —— lock 必须在 finally 块中释放。否则，如果受保护的代码将抛出异常，锁就有可能永远得不到释放！这一点区别看起来可能没什么，但是实际上，它极为重要。忘记在 finally 块中释放锁，可能会在程序中留下一个定时炸弹，当有一天炸弹爆炸时，您要花费很大力气才有找到源头在哪。而使用同步，JVM 将确保锁会获得自动释放。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ElasticSearch使用]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/30/elasticsearch-using/</url>
      <content type="html"><![CDATA[<h4 id="什么是索引-Index"><a href="#什么是索引-Index" class="headerlink" title="什么是索引(Index)"></a>什么是索引(Index)</h4><p>索引只是一个用来指向一个或多个分片(shards)的“逻辑命名空间(logical namespace)”.一个分片(shard)是一个最小级别“工作单元(worker unit)”,它只是保存了索引中所有数据的一部分。分片就是一个Lucene实例，并且它本身就是一个完整的搜索引擎。我们的文档存储在分片中，并且在分片中被索引，但是我们的应用程序不会直接与它们通信，取而代之的是，直接与索引通信。当索引创建完成的时候，主分片的数量就固定了，但是复制分片的数量可以随时调整。Cluster包含多个node，Indices不应该理解成动词索引，Indices可理解成关系数据库中的databases，Indices可包含多个Index，Index对应关系数据库中的database，它是用来存储相关文档的。Elasticsearch与关系数据的类比对应关系可以做如下理解：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Relational DB ⇒ Databases ⇒ Tables ⇒ Rows ⇒ Columns</div><div class="line"></div><div class="line">Elasticsearch ⇒ Indices ⇒ Types ⇒ Documents ⇒ Fields</div></pre></td></tr></table></figure>
<h4 id="什么是分片-Shard"><a href="#什么是分片-Shard" class="headerlink" title="什么是分片(Shard)"></a>什么是分片(Shard)</h4><p>分片(Shard)是Elasticsearch在集群中分发数据的关键。文档存储在分片中，然后分片分配到集群中的节点上。当集群扩容或缩小，lasticsearch将会自动在你的节点间迁移分片，以使集群保持平衡。分片可以是主分片(primary shard)或者是复制分片(replica shard)。索引中的每个文档属于一个单独的主分片，所以主分片的数量决定了索引最多能存储多少数据。理论上主分片能存储的数据大小是没有限制的，限制取决于你实际的使用情况。分片的最大容量完全取决于你的使用状况：硬件存储的大小、文档的大小和复杂度、如何索引和查询你的文档，以及你期望的响应时间。复制分片只是主分片的一个副本，它可以防止硬件故障导致的数据丢失，同时可以提供读请求，比如搜索或者从别的shard取回文档。</p>
<h4 id="创建索引-Index"><a href="#创建索引-Index" class="headerlink" title="创建索引(Index)"></a>创建索引(Index)</h4><p>如下curl命令，创建一个名字为jiangxiaoqiang的索引(Index)：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">curl -XPUT <span class="string">'localhost:9200/jiangxiaoqiang?pretty'</span> <span class="_">-d</span><span class="string">'</span></div><div class="line">&#123;</div><div class="line">    "settings" : &#123;</div><div class="line">        "index" : &#123;</div><div class="line">            "number_of_shards" : 3,</div><div class="line">            "number_of_replicas" : 2</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;'</div></pre></td></tr></table></figure>
<p>url里面的pretty是pretty format的含义，指代参数的json是良好格式化的。</p>
<h4 id="创建Type"><a href="#创建Type" class="headerlink" title="创建Type"></a>创建Type</h4><p>ElasticSearch中每个文档必须有一个类型定义。这里的类型相当于数据库当中的表，类型定义了字段映射（类似数据库表结构），这样一来，每个索引可以包含多种文档类型，而每种文档类型定义一种映射关系。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">curl -XPUT <span class="string">'localhost:9200/jiangxiaoqiang/typejxq/_mapping'</span> <span class="_">-d</span><span class="string">'&#123;</span></div><div class="line">   "typejxq": &#123;</div><div class="line">      "properties": &#123;</div><div class="line">         "name": &#123;</div><div class="line">            "type": "string"</div><div class="line">         &#125;,</div><div class="line">         "desc": &#123;</div><div class="line">            "type": "string"</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;'</div></pre></td></tr></table></figure>
<h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl -XPUT <span class="string">'localhost:9200/jiangxiaoqiang/typejxq/1'</span> <span class="_">-d</span><span class="string">'&#123;</span></div><div class="line">   "name":"jiangxiaoqiang",</div><div class="line">   "desc":"dfaewgrehrehr"</div><div class="line">&#125;'</div></pre></td></tr></table></figure>
<h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">curl -XPOST <span class="string">'localhost:9200/jiangxiaoqiang/_search'</span> <span class="_">-d</span><span class="string">'&#123;</span></div><div class="line">    "query": &#123;</div><div class="line">        "bool": &#123;</div><div class="line">            "must": [</div><div class="line">                &#123;</div><div class="line">                    "prefix": &#123;</div><div class="line">                        "name": "jiang"</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            ],</div><div class="line">            "must_not": [],</div><div class="line">            "should": []</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    "from": 0,</div><div class="line">    "size": 10,</div><div class="line">    "sort": [],</div><div class="line">    "aggs": &#123;&#125;</div><div class="line">&#125;'</div></pre></td></tr></table></figure>
<p>参考资料：</p>
<ul>
<li><a href="https://www.zhihu.com/question/26446020" target="_blank" rel="external">在ElasticSearch中，集群(Cluster),节点(Node),分片(Shard),Indices(索引),replicas(备份)之间是什么关系？</a></li>
<li><a href="https://www.elastic.co/guide/index.html" target="_blank" rel="external">Elastic Stack and Product Documentation</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中的时间]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/28/java-date/</url>
      <content type="html"><![CDATA[<p>如果单纯以Date类型定义时间字段，定义时间的格式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ApiModelProperty</span>(value = <span class="string">"数据更新时间戳"</span>)</div><div class="line"><span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</div><div class="line"><span class="keyword">private</span> LocalDateTime sjc;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>那么返回的时间值如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;jdrq&quot;:&quot;2016-06-26T00:23:15.000+0000&quot;</div></pre></td></tr></table></figure>
<p>如果想返回类似<code>2016-06-26 00:00:00</code>格式的时间，那么需要定义日期类型为LocalDateTime。返回的时间里，日期和时间中始终有一个大写T，原来是LocalDateTime的toString方法在转化时添加了一个T字符：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//-----------------------------------------------------------------------</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Outputs this date-time as a &#123;<span class="doctag">@code</span> String&#125;, such as &#123;<span class="doctag">@code</span> 2007-12-03T10:15:30&#125;.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * The output will be one of the following ISO-8601 formats:</div><div class="line"> * &lt;ul&gt;</div><div class="line"> * &lt;li&gt;&#123;<span class="doctag">@code</span> uuuu-MM-dd'T'HH:mm&#125;&lt;/li&gt;</div><div class="line"> * &lt;li&gt;&#123;<span class="doctag">@code</span> uuuu-MM-dd'T'HH:mm:ss&#125;&lt;/li&gt;</div><div class="line"> * &lt;li&gt;&#123;<span class="doctag">@code</span> uuuu-MM-dd'T'HH:mm:ss.SSS&#125;&lt;/li&gt;</div><div class="line"> * &lt;li&gt;&#123;<span class="doctag">@code</span> uuuu-MM-dd'T'HH:mm:ss.SSSSSS&#125;&lt;/li&gt;</div><div class="line"> * &lt;li&gt;&#123;<span class="doctag">@code</span> uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSS&#125;&lt;/li&gt;</div><div class="line"> * &lt;/ul&gt;</div><div class="line"> * The format used will be the shortest that outputs the full value of</div><div class="line"> * the time where the omitted parts are implied to be zero.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> a string representation of this date-time, not null</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> date.toString() + <span class="string">'T'</span> + time.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu使用Latex]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/28/ubuntu-using-latex/</url>
      <content type="html"><![CDATA[<p>LaTeX（ LATEX，音译“拉泰赫”）是一种基于TeX的排版系统，由美国计算机学家莱斯利·兰伯特（Leslie Lamport）在20世纪80年代初期开发。</p>
<a id="more"></a>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在Ubuntu 16.04中，输入如下命令安装TeX Live：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install texlive-full -y</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ElasticSearch入门]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/27/elasticsearch-introduce/</url>
      <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>ElasticSearch是一个基于Lucene开发的搜索服务器，具有分布式多用户的能力，ElasticSearch是用Java开发的开源项目，基于Restful Web接口，能够达到实时搜索、稳定、可靠、快速、高性能、安装使用方便，同时它的横向扩展能力非常强，不需要重启服务。ElasticSearch是一个非常好用的实时分布式搜索和分析引擎，可以帮助我们快速的处理大规模数据，也可以用于全文检索，结构化搜索以及分析等。目前很多网站都在使用ElasticSearch进行全文检索，例如：GitHub、StackOverflow、Wiki等。ElasticSearch式建立在全文检索引擎Lucene基础上的，而Lucene是最先进、高效的开元搜索引擎框架，但是Lucene只是一个框架，要充分利用它的功能，需要很高的学习成本，而ElasticSearch使用Lucene作为内部引擎，在其基础上封装了功能强大的Restful API，让开发人员可以在不需要了解背后复杂的逻辑，即可实现比较高效的搜索。</p>
<a id="more"></a>
<h5 id="倒排索引-Inverted-Index"><a href="#倒排索引-Inverted-Index" class="headerlink" title="倒排索引(Inverted Index)"></a>倒排索引(Inverted Index)</h5><p>关系型数据库为了提高查询效率会添加索引，比如MySQL就是B-Tree索引(B+树)，还有文件系统也是采用B+树。搜索引擎的基础数据结构倒排索引(Inverted Index)。在平时，会经常使用各种各样的索引，如根据链接，可以找到链接里的具体文本，这就是索引。反过来，如果，如果我们能根据具体文本，找到文本存在的具体链接，这就是倒排索引，可简单理解为从文本到链接的映射。平时在使用Google、百度时，就是根据具体文本去找链接，这就是以倒排索引为基础的。ElasticSearch也是使用的是倒排索引(Inverted Index)，也是为了提高查询速度。</p>
<h4 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h4><ul>
<li>GitHub searches 20TB of data using Elasticsearch, including 1.3 billion files and 130 billion lines of code.</li>
<li>Foursquare:”实时搜索5千万地理位置信息”</li>
<li>SoundCloud使用ElasticSearch为1.8亿用户提供即时而精准的音乐搜索服务</li>
<li>Elasticsearch使Fog Creek可以在400亿行代码中进行一个月3千万次的查询</li>
</ul>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>Open Source（开源）</li>
<li>Apache Lucene（基于 Lucene）</li>
<li>Schema Free(模式自由)</li>
<li>Document Oriented(面向文档型的设计)</li>
<li>Real Time Data &amp; Analytics（实时索引数据）</li>
<li>Distributed（分布式）</li>
<li>High Availability（高可靠性）</li>
<li>其他特性：RESTful API；JSON format；multi-tenancy；full text search；conflict management；per-operation persistence</li>
</ul>
<h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><p><strong>Gateway</strong>：代表ElasticSearch索引快照的存储方式，ElasticSearch默认是先把索引存放到内存中，当内存满了时再持久化(Persist)到本地硬盘。gateway对索引快照进行存储，当这个ElasticSearch集群关闭再重新启动时就会从gateway中读取索引备份数据。ElasticSearch支持多种类型的gateway，有本地文件系统（默认），分布式文件系统，Hadoop的HDFS和Amazon的s3云存储服务。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>输入如下命令下载ElasticSearch：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.1.1.tar.gz</div></pre></td></tr></table></figure>
<p>-L参数表示–location，因为有些下载链接有重定向操作，L操作告诉curl如果返回的是重定向30X，那么就直接再次发起请求，请求重定向到的网址。O参数表示output，–remote-name，表示写入到本地磁盘的文件名称和远程文件名称(remote name)一样。下载完毕后，将文件拷贝到需要安装的目录下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv elasticsearch-5.1.1.tar.gz /opt/<span class="built_in">local</span>/tools/</div></pre></td></tr></table></figure>
<p>将文件解压：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -xzvf elasticsearch-5.1.1.tar.gz</div></pre></td></tr></table></figure>
<p>启动ElasticSearch:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./elasticsearch <span class="_">-d</span></div></pre></td></tr></table></figure>
<p>输入如下命令判断是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://localhost:9200/?pretty</div></pre></td></tr></table></figure>
<p>返回内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot; : &quot;eS0_ZDL&quot;,</div><div class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</div><div class="line">  &quot;cluster_uuid&quot; : &quot;DU2WJNtbRmOHXF9HFFs5LQ&quot;,</div><div class="line">  &quot;version&quot; : &#123;</div><div class="line">    &quot;number&quot; : &quot;5.1.1&quot;,</div><div class="line">    &quot;build_hash&quot; : &quot;5395e21&quot;,</div><div class="line">    &quot;build_date&quot; : &quot;2016-12-06T12:36:15.409Z&quot;,</div><div class="line">    &quot;build_snapshot&quot; : false,</div><div class="line">    &quot;lucene_version&quot; : &quot;6.3.0&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><h5 id="Head插件"><a href="#Head插件" class="headerlink" title="Head插件"></a>Head插件</h5><p>ElasticSearch从版本5+即不支持site plugin(site plugins are not supported). Run elasticsearch-head as a standalone server。安装Grunt：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g grunt-cli</div><div class="line">sudo npm install grunt --save-dev</div></pre></td></tr></table></figure>
<p>Grunt安装完毕后，接着安装elasticsearch-head：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/mobz/elasticsearch-head.git</div><div class="line">cd elasticsearch-head</div><div class="line">npm install</div><div class="line">grunt server</div></pre></td></tr></table></figure>
<p>安装完毕后，访问地址：<code>http://localhost:9100/</code>。由于有同源策略，暂时还无法连接。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">XMLHttpRequest cannot load http://localhost:9200/_cluster/state. No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. Origin &apos;http://localhost:9100&apos; is therefore not allowed access.</div></pre></td></tr></table></figure>
<p>在ElasticSearch配置文件中(<code>/opt/local/tools/elasticsearch-5.1.1/config/elasticsearch.yml</code>)添加如下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http.cors.enabled: true</div><div class="line">http.cors.allow-origin: &quot;*&quot;</div></pre></td></tr></table></figure>
<p>最后成功连接集群，如下图所示：</p>
<img src="/2016/12/27/elasticsearch-introduce/head-connect-elasticsearch.jpg" alt="连接ElasticSearch集群效果" title="连接ElasticSearch集群效果">
<ul>
<li><p><a href="http://lxwei.github.io/posts/Elasticsearch-%E7%AE%80%E4%BB%8B.html" target="_blank" rel="external">Elasticsearch 简介</a></p>
</li>
<li><p><a href="http://1.droppdf.com/files/FOeNs/elasticsearch-the-definitive-guide-clinton-gormley-zachary-tong.pdf" target="_blank" rel="external">elasticsearch-the-definitive-guide-clinton-gormley-zachary-tong</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gradle使用]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/27/gradle-using/</url>
      <content type="html"><![CDATA[<p>使用以下配置文件对Gradle的构建进行配置：</p>
<ul>
<li>Gradle构建脚本（build.gradle）指定了一个项目和它的任务。</li>
<li>Gradle属性文件（gradle.properties）用来配置构建属性。</li>
<li>Gradle设置文件（gradle.settings）对于只有一个项目的构建而言是可选的，如果我们的构建中包含多于一个项目，那么它就是必须的，因为它描述了哪一个项目参与构建。每一个多项目的构建都必须在项目结构的根目录中加入一个设置文件。</li>
</ul>
<a id="more"></a>
<h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>在Ubuntu 16.04 LTS中安装Gradle:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt install gradle -y</div><div class="line"><span class="comment"># 安装指定版本的Gradle</span></div><div class="line">sudo apt install -y gradle=2.12</div></pre></td></tr></table></figure>
<p>如下列出了Gradle常用的命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看所有任务</span></div><div class="line">gradle task</div><div class="line"><span class="comment"># 查看所有的任务(会列出task之间的依赖关系)</span></div><div class="line">gradle task --all</div><div class="line"></div><div class="line"><span class="comment"># 查看所有项目(查看所有项目要切换到项目的根目录执行命令)</span></div><div class="line">gradle projects</div><div class="line"></div><div class="line"><span class="comment"># 清楚app目录下的build文件夹</span></div><div class="line">gradle clean</div><div class="line"></div><div class="line"><span class="comment"># 检查依赖并编译打包 （正式和测试）</span></div><div class="line">gradle build</div><div class="line"></div><div class="line"><span class="comment"># 编译并打Debug包</span></div><div class="line">gradle assembleDebug</div><div class="line"></div><div class="line"><span class="comment"># 编译并打Release包</span></div><div class="line">gradle assembleRelease</div></pre></td></tr></table></figure>
<p>定义一个依赖通常需要三个元素：</p>
<ul>
<li>group:创建该library的组织名，通常也会是包名，</li>
<li>name :是该library的唯一标识</li>
<li>version:该library的版本号</li>
</ul>
<p>一个简单的打包命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle -p cc-web-boot bootRun</div></pre></td></tr></table></figure>
<p>-p参数指定项目(project directory)的目录，如果不指定就是当前目录(-p, –project-dir,Specifies the start directory for Gradle. Defaults to current directory)。bootRun指代的是当前项目下的任务名称。打包完成后，生成的包文件在对应项目文件的build/libs目录下。使用命令查看当前property：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看当前所有的Property</span></div><div class="line">gradle properties</div></pre></td></tr></table></figure>
<p>其中allprojects表示所有的Project，在多项目构建中，它将包含多个Project；buildDir表示构建结果的输出目录。</p>
<h4 id="插件-Plugin"><a href="#插件-Plugin" class="headerlink" title="插件(Plugin)"></a>插件(Plugin)</h4><p>插件就是Gradle的扩展，简而言之就是为你添加一些非常有用的默认配置。Gradle 自带了很多插件，并且你也可以很容易的编写和分享自己的插件。Java plugin 作为其中之一，为你提供了诸如编译，测试，打包等一些功能。插件配置示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;java&apos;</div><div class="line">apply plugin: &apos;propdeps&apos;</div><div class="line">apply plugin: &apos;org.springframework.boot&apos;</div></pre></td></tr></table></figure>
<h4 id="Wrapper"><a href="#Wrapper" class="headerlink" title="Wrapper"></a>Wrapper</h4><p>Wrapper主要是考虑在没有安装Gradle的电脑上使用Gradle命令。当执行gradlew(Gradle Wrapper)命令时，首先会检查电脑是否安装了Gradle，如果没有安装，会自动从gradle repository下载安装。注意安装不会真的在计算机中安装Gradle的发行版本，它会下载Gradle，存放在目录<code>$USER_HOME/.gradle/wrapper/dists</code>下，构建时使用命令调用而不是直接添加到当前计算机(试想如果不同的Gradle版本，如果添加到系统的环境变量了，构建时到底是以调用哪一个版本的Gradle呢)。需要查看Gradle Wrapper帮助，在命令行中输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle Wrapper --help</div></pre></td></tr></table></figure>
<p>会打印出所有Gradle Wrapper.</p>
<h4 id="Gradle界面-GUI"><a href="#Gradle界面-GUI" class="headerlink" title="Gradle界面(GUI)"></a>Gradle界面(GUI)</h4><p>在终端中输入如下命令可以查看Gradle的GUI：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle --gui</div></pre></td></tr></table></figure>
<h4 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h4><p>安装指定版本的软件可以使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install gradle=2.12</div></pre></td></tr></table></figure>
<p>其中gradle是软件包的名称，2.12是软件包的版本。</p>
<h4 id="运行特定项目的任务"><a href="#运行特定项目的任务" class="headerlink" title="运行特定项目的任务"></a>运行特定项目的任务</h4><p>此处运行项目cc-web-boot下的bootRepackage任务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew build -p cc-web-boot/ bootRepackage -x <span class="built_in">test</span></div></pre></td></tr></table></figure>
<p>如上命令在项目文件夹cc-web-boot下执行构建，并排除test任务，生成对应的jar包。bootRepackage任务依赖于Gradle assemble任务，assemble任务会编译程序中的源代码，并打包生成Jar文件，这个任务不执行单元测试。不使用spring-boot插件，主程序jar包，与依赖的jar包是分开的，需要分别打包，这在云环境中，上传部署比较麻烦，得传多个文件（或者上传前，先压缩成一个包，再传到服务器上解压），服务器节点多时，操作起来太累又重复。而使用spring-boot插件，会自动将依赖的包集成到主包里，非常方便。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Restful API文档编写]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/27/rest-api-doc/</url>
      <content type="html"><![CDATA[<p>在写Restful(Representational state transfer)接口时，文档是必不可少的，文档采用Springfox自动生成。Swagger是用来描述和文档化RESTful API的一个项目。Swagger Spec是一套规范，定义了该如何去描述一个RESTful API。类似的项目还有RAML、API Blueprint。 根据Swagger Spec来描述RESTful API的文件称之为Swagger specification file，它使用JSON来表述，也支持作为JSON支持的YAML(YAML Ain’t Markup Language)。swagger-core是一个Java的实现，现在支持JAX-RS。swagger-annotation定义了一套注解给用户用来描述API。spring-fox也是一个Java的实现，它支持Spring MVC， 它也支持swagger-annotation定义的部分注解。</p>
<a id="more"></a>
<p>对接口文档的要求有如下几点：</p>
<ul>
<li>要实时更新，代码变动，参数变动后，文档要相应更新</li>
<li>需要显示请求/返回数据类型、请求/返回数据示例</li>
</ul>
<h4 id="支持泛型返回值"><a href="#支持泛型返回值" class="headerlink" title="支持泛型返回值"></a>支持泛型返回值</h4><p>接口的返回值是通过泛型来动态定义的，Springfox生成接口文档时，由于未指定具体的返回类型，所以无法生成返回实体对应的注释。可以通过手动定义返回实体，手动在接口返回时指定的方式来解决此问题。例如，返回的数据定义成泛型：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@lombok</span>.Data</div><div class="line"><span class="meta">@io</span>.swagger.annotations.ApiModel(value = <span class="string">"ApiResult"</span>, description = <span class="string">"Api返回结果"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiResult</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"错误码"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> errCode = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"错误消息"</span>)</div><div class="line">    <span class="keyword">private</span> String errMsg = <span class="string">""</span>;</div><div class="line"></div><div class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"返回数据"</span>)</div><div class="line">    <span class="keyword">private</span> T data = <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>手动定义一个具体的实体消除泛型：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleBlacklistResult</span> <span class="keyword">extends</span> <span class="title">AbstractApiResult</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> SummaryBlacklist data;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SummaryBlacklist就是编译时具体的泛型类型。在接口中指定返回类型：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span></div><div class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"必须且只能传一个参数"</span>, response = BlackListApiResult.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ApiResult <span class="title">getBlackList</span><span class="params">(@RequestParam(required = <span class="keyword">false</span>)</span> @<span class="title">ApiParam</span><span class="params">(<span class="string">"主体名（模糊）"</span>)</span> String xdr</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在接口文档页面即可看到返回的具体的实体了，如下图所示。</p>
<img src="/2016/12/27/rest-api-doc/springfox-return-entity.jpg" alt="返回泛型实体" title="返回泛型实体">
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Rest-Assured做Restful接口自动化测试]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/26/restful-api-auto-test/</url>
      <content type="html"><![CDATA[<h4 id="使用Python脚本测试"><a href="#使用Python脚本测试" class="headerlink" title="使用Python脚本测试"></a>使用Python脚本测试</h4><p>安装pycurl包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pycurl</div></pre></td></tr></table></figure>
<p>安装时可能会出现如下问题：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Command &quot;python setup.py egg_info&quot; failed with error code 1 in /tmp/pip-build-jzTgwZ/pycurl</div></pre></td></tr></table></figure>
<p>使用如下命令安装依赖包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install libcurl4-openssl-dev</div></pre></td></tr></table></figure>
<h4 id="使用rest-assured框架测试"><a href="#使用rest-assured框架测试" class="headerlink" title="使用rest-assured框架测试"></a>使用rest-assured框架测试</h4><p>rest-assured框架用于测试REST方式的接口，使用JSON schema验证返回体，大大的简化了测试代码。esting and validation of REST services in Java is harder than in dynamic languages such as Ruby and Groovy. REST Assured brings the simplicity of using these languages into the Java domain.</p>
<h5 id="引入依赖包"><a href="#引入依赖包" class="headerlink" title="引入依赖包"></a>引入依赖包</h5><p>在Gradle中，引入<a href="http://rest-assured.io/" target="_blank" rel="external">rest-assured</a>框架的依赖包和TestNG的依赖包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">project(&apos;:cc-api&apos;) &#123;</div><div class="line">    apply from: ccCommonBuildScript</div><div class="line">    description = &apos;credit-system-api&apos;</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        compile &apos;io.rest-assured:json-path:3.0.1&apos;</div><div class="line">        compile &apos;org.testng:testng:6.8.17&apos;//TestNG依赖包</div><div class="line">        testCompile &apos;io.rest-assured:rest-assured:3.0.1&apos;</div><div class="line">        compile(&apos;com.jayway.restassured:rest-assured:2.3.1&apos;)//rest-assured框架依赖包</div><div class="line">        compile project(&apos;:cc-business&apos;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="添加测试方法"><a href="#添加测试方法" class="headerlink" title="添加测试方法"></a>添加测试方法</h5><p>测试方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> common.TestPublicVariable;</div><div class="line"><span class="keyword">import</span> org.testng.annotations.Test;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> io.restassured.RestAssured.given;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiXysjControllerTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCountTotal</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        given().header(TestPublicVariable.APPID, TestPublicVariable.APPID_VALUE)</div><div class="line">                .header(<span class="string">"TIMESTAMP"</span>, <span class="string">"2016-12-19 16:58:02"</span>)</div><div class="line">                .header(<span class="string">"ECHOSTR"</span>, <span class="string">"sdsaasf"</span>)</div><div class="line">                .header(<span class="string">"TOKEN"</span>, <span class="string">"14d45648c62a746ae9dd9b90c03c50893061222d"</span>)</div><div class="line">                .get(<span class="string">"http://192.168.32.105:28080/api/xysj/counttotal"</span>)</div><div class="line">                .then()</div><div class="line">                .body(<span class="string">"errCode"</span>, equalTo(<span class="number">0</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述方法在请求头中加入认证信息，get中为请求的地址，根据返回的error code为0判断服务端成功处理了此次请求。测试结果如下图：</p>

]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[meld使用]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/25/meld-using/</url>
      <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Meld is a visual diff and merge tool targeted at developers. Meld helps you compare files, directories, and version controlled projects. It provides two- and three-way comparison of both files and directories, and has support for many popular version control systems.</p>
<p>Meld helps you review code changes and understand patches. It might even help you to figure out what is going on in that merge you keep avoiding.</p>
<a id="more"></a>
<h4 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h4><p>输入如下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在Fedora 24中安装</span></div><div class="line">dnf install meld -y</div><div class="line"><span class="comment">#在Ubuntu 16.04中安装</span></div><div class="line">sudo apt install meld -y</div></pre></td></tr></table></figure>
<p>配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#配置meld为默认的合并工具(Merge Tool)</span></div><div class="line">git config --global merge.tool meld</div></pre></td></tr></table></figure>
<p>使用合并工具：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#使用merge tool合并</span></div><div class="line">git mergetool</div></pre></td></tr></table></figure>
<p>可以直接键入meld命令打开meld的GUI。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[uget使用]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/25/uget-using/</url>
      <content type="html"><![CDATA[<p>uGet是一款Linux下的下载工具，uGet is the #1 Open Source Download Manager app.uGet is a multi-platform app for Linux, BSD, Android &amp; Windows (XP - 8)。uGet下载最大的体会比较稳定，直观的感受是，用Google Chrome（中途可能变为速度为0的状态）和Wget(可能失去下载连接)无法下载的文件，使用uGet可以下载。</p>
<a id="more"></a>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在Ubuntu 16.04中，输入如下命令安装uGet。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install uget -y</div></pre></td></tr></table></figure>
<p>打开uGet即可使用，如下图所示：</p>
<img src="/2016/12/25/uget-using/uget-ui.jpg" alt="uGet界面" title="uGet界面">
<h4 id="插件-Plugin"><a href="#插件-Plugin" class="headerlink" title="插件(Plugin)"></a>插件(Plugin)</h4><p>uGet可以作为aria2的UI，aria2下载工具特点：</p>
<ul>
<li>支持http/https/ftp/bt协议</li>
<li>支持metalink3.0，metalink是一种可以将不同协议下载的同一文件集合到一起以达到最大下载稳定性和速度</li>
<li>支持分段下载和续传</li>
<li>支持通过http代理的ftp下载</li>
<li>可以作为守护进程(Deamon)运行</li>
</ul>
<p>在Ubuntu 16.04中，输入如下命令安装aria2：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install aria2 -y</div></pre></td></tr></table></figure>
<p>安装完毕后在uGet中(uget→编辑(Edit)→设置(Settings))进行设置即可，如下图所示：</p>
<img src="/2016/12/25/uget-using/uget-aria2-plugin-settings.jpg" alt="uGet aria2插件设置" title="uGet aria2插件设置">
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lombok精简Java代码]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/25/lombok/</url>
      <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://projectlombok.org/" target="_blank" rel="external">lombok</a>提供了简单的注解的形式来帮助我们简化消除一些必须有但显得很臃肿的java代码,特别是相对于POJO(Plain Ordinary Java Object)。安装Lombok Plugin和引入Jar包之后方可使用。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装完毕lombok插件之后，添加如下包：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>常用的 lombok 注解：</p>
<ul>
<li><strong>@Data</strong>：注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法</li>
<li><strong>@Setter</strong>：注解在属性上；为属性提供 setting 方法</li>
<li><strong>@Getter</strong>：注解在属性上；为属性提供 getting 方法</li>
<li><strong>@Log4j</strong>：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象</li>
<li><strong>@NoArgsConstructor</strong>：注解在类上；为类提供一个无参的构造方法</li>
<li><strong>@AllArgsConstructor</strong>：注解在类上；为类提供一个全参的构造方法</li>
</ul>
<p>如果不使用lombok注解，代码是这样：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(Person.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用lombok注解，代码是这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="meta">@Log</span>4j</div><div class="line"><span class="meta">@NoArgsConstructor</span></div><div class="line"><span class="meta">@AllArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一旦POJO字段较多时精简的代码就很明显了，而且使用Lombok的代码更加干净、易读，添加<strong>@Data</strong>注解之后，按Ctrl + O(Outline)可以看到生成了get和set方法。</p>
<h4 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h4><p>@EqualsAndHashCode注解实现equals()方法和hashCode()方法。hashcode是用于散列数据的快速存取，如利用HashSet/HashMap/Hashtable类来存储数据时，都是根据存储对象的hashcode值来进行判断是否相同的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Web开发--log4j]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/25/log4j/</url>
      <content type="html"><![CDATA[<h2 id="isDebugEnabled"><a href="#isDebugEnabled" class="headerlink" title="isDebugEnabled"></a>isDebugEnabled</h2><p>在输出日志时，判断输出级别：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(logger.isDebugEnabled()) &#123;</div><div class="line">    logger.debug(<span class="string">"通用处理，信息为："</span> + JSON.toJSONString(vehicleLocationData));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当输出级别是debug，即需要进行日志信息输出时，加不加这句if判断，在效率上几乎没有差别；当输出级别高于debug，即不需要进行日志信息输出时：</p>
<p>①假如debug方法中的参数比较简单时（比如直接就是写好的字符串），加不加这句if判断，在效率上也几乎没有什么差别；</p>
<p>②假如debug方法中的参数比较复杂时（比如还要使用别的函数进行计算、或者还要进行字符串的拼接等等,如上代码片段所示，输出的内容需要序列化），在前面就加上这句if判断，会让效率提高（否则，开始大动干戈做了很多事情（比如字符串的拼接，序列化），后来才发现不需要进行输出日志信息），白白浪费了CPU资源，影响程序的运行效率。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring框架搭建]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/25/spring/</url>
      <content type="html"><![CDATA[<p>Spring的不足：</p>
<ul>
<li>配置太多</li>
</ul>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Could-not-open-ServletContext-resource-WEB-INF-applicationContext-xml"><a href="#Could-not-open-ServletContext-resource-WEB-INF-applicationContext-xml" class="headerlink" title="Could not open ServletContext resource [/WEB-INF/applicationContext.xml]"></a>Could not open ServletContext resource [/WEB-INF/applicationContext.xml]</h3><p>ContextLoaderListener has its own context which is shared by all servlets and filters. By default it will search /WEB-INF/applicationContext.xml。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/somewhere-else/root-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Missing-artifact-org-aspectj-aspectjweaver-jar-1-8-0-M1"><a href="#Missing-artifact-org-aspectj-aspectjweaver-jar-1-8-0-M1" class="headerlink" title="Missing artifact org.aspectj:aspectjweaver:jar:1.8.0.M1"></a>Missing artifact org.aspectj:aspectjweaver:jar:1.8.0.M1</h3><p>According to a reported issue at springsource, aspectjweaver is “basically identical to AspectJ 1.7” except that it has early support for Java 8.As I don’t need Java 8 support, I basically added a compile dependency to the latest release version of aspectweaver:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>This ensures that the 1.7.4 is used instead of the milestone release, and is an acceptable workaround for me, for the time being.</p>
<h5 id="Exception-java-lang-ClassNotFoundException-org-apache-commons-dbcp-BasicDataSource"><a href="#Exception-java-lang-ClassNotFoundException-org-apache-commons-dbcp-BasicDataSource" class="headerlink" title="Exception java.lang.ClassNotFoundException: org.apache.commons.dbcp.BasicDataSource"></a>Exception java.lang.ClassNotFoundException: org.apache.commons.dbcp.BasicDataSource</h5><p>在POM.xml中引入jar包。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="java-lang-NoClassDefFoundError-org-apache-ibatis-session-SqlSessionFactory"><a href="#java-lang-NoClassDefFoundError-org-apache-ibatis-session-SqlSessionFactory" class="headerlink" title="java.lang.NoClassDefFoundError: org/apache/ibatis/session/SqlSessionFactory"></a>java.lang.NoClassDefFoundError: org/apache/ibatis/session/SqlSessionFactory</h5><p>引入jar包。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.ibatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ibatis-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC-DispatcherServlet处理请求过程]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/25/springmvc-dispatcherservlet/</url>
      <content type="html"><![CDATA[<p>Spring MVC基于模型-视图-控制器(Model-View-Controller,MVC)模式，它能够帮助我们建立灵活和松耦合的Web程序.Spring MVC中用户请求如下图所示：</p>
<a id="more"></a>
<img src="/2016/12/25/springmvc-dispatcherservlet/example.jpg" alt="DispatcherServlet处理请求过程" title="DispatcherServlet处理请求过程">
<h6 id="请求发出-HTTP-Resquest"><a href="#请求发出-HTTP-Resquest" class="headerlink" title="请求发出(HTTP Resquest)"></a>请求发出(HTTP Resquest)</h6><p>一个请求携带信息进入Spring MVC程序时，第一站是Spring的DispatcherServlet(在web.xml中配置)，它是接收所有用户请求的前端控制器Servlet。DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）。然后根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain对象的形式返回；DispatcherServlet的任务是将请求转发给Spring MVC控制器(Controller)，控制器是用于处理用户请求的Spring Bean。DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。（如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler()方法）</p>
<h6 id="处理器映射-Handler-Mapping"><a href="#处理器映射-Handler-Mapping" class="headerlink" title="处理器映射(Handler Mapping)"></a>处理器映射(Handler Mapping)</h6><p>一般程序中会有不止一个控制器，那么DispatcherServlet需要知道将请求发送给哪个控制器，所以DispatcherServlet将会查询处理器映射(handler mapping)来确定请求的下一站，处理器映射会根据用户请求的URL来决定是哪个控制器。提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p>
<ul>
<li>HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</li>
<li>数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</li>
<li>数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</li>
<li>数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</li>
</ul>
<h6 id="控制器-Controller"><a href="#控制器-Controller" class="headerlink" title="控制器(Controller)"></a>控制器(Controller)</h6><p>DispatcherServlet选择了控制器之后，就会将请求发送给该控制器并等待控制器处理用户请求。控制器在完成了逻辑处理后，通常会返回处理结果并将这些结果在浏览器上显示，这些信息在Spring MVC中成为模型(Model)。Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p>
<h6 id="模型以及逻辑视图名称-Model"><a href="#模型以及逻辑视图名称-Model" class="headerlink" title="模型以及逻辑视图名称(Model)"></a>模型以及逻辑视图名称(Model)</h6><p>控制器仅仅返回模型信息往往是不够的，需要对模型信息进行格式化，生成用户友好的方式如html进行显示。所以模型信息将会被发送给一个视图(View，例如jsp视图。事实上，控制器同时产生了模型以及视图名称，将这些信息发送回DispatcherServlet。</p>
<h6 id="视图解析器-View-Parser"><a href="#视图解析器-View-Parser" class="headerlink" title="视图解析器(View Parser)"></a>视图解析器(View Parser)</h6><p>DispatcherServlet收到控制器的视图名称并不直接表示某个特定的JSP，这个视图名称仅仅是个逻辑值，DispatcherServlet为了找到真正的视图，会使用视图解析器(view resolver)将视图名称匹配成一个具体的视图。根据返回的ModelAndView，选择一个适合的ViewResolver（必须是已经注册到Spring容器中的ViewResolver)返回给DispatcherServlet。</p>
<h6 id="视图-View"><a href="#视图-View" class="headerlink" title="视图(View)"></a>视图(View)</h6><p>目前为止，DispatcherServlet知道了具体由哪个视图来显示模型信息，那么它就会将模型信息交付给视图，请求的任务到这里就完成了。ViewResolver 结合Model和View，来渲染视图。</p>
<h6 id="响应-HTTP-Response"><a href="#响应-HTTP-Response" class="headerlink" title="响应(HTTP Response)"></a>响应(HTTP Response)</h6><p>视图渲染模型信息并输出，该输出最后会传递给用户端，展示给用户查看。从以上步骤可以看到，Spring MVC要处理很多过程，但是大部分过程是Spring框架内部处理的，事实上，我们可以十分方便利用Spring MVC框架的编写功能强大的Web应用程序，下一章我们将搭建一个基础的Spring MVC实例程序。</p>
<p>原始地址：</p>
<ul>
<li><a href="http://wiki.jikexueyuan.com/project/spring/mvc-framework/spring-mvc-form-handling-example.html" target="_blank" rel="external">Spring MVC入门-DispatcherServlet处理请求过程</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows下用Nexus搭建Maven私服]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/25/maven-private-service/</url>
      <content type="html"><![CDATA[<h4 id="Nexus简介"><a href="#Nexus简介" class="headerlink" title="Nexus简介"></a>Nexus简介</h4><p>使用Maven的中央仓库存在如下问题：</p>
<ul>
<li>Maven自己的中央库访问速度非常慢，外加GFW，基本没法用。</li>
<li>有些jar包由于版权原因，maven中央仓库没有，比如oracle JDBC驱动。另外也会有一些项目中用到的比较老的开源jar包， 中央仓库也没有。这种情况我们需要把jar包手动上传到私服。</li>
<li>公司自己开发的jar包并不开源，不能上传到maven中央仓库，只能部署到私服上面。</li>
</ul>
<a id="more"></a>
<p>Nexus 是Maven仓库管理器，如果你使用Maven，你可以从Maven中央仓库下载所需要的构件（artifact），但这通常不是一个好的做法，你应该在本地架设一个Maven仓库服务器，在代理远程仓库的同时维护本地仓库，以节省带宽和时间，Nexus就可以满足这样的需要。此外，他还提供了强大的仓库管理功能，构件搜索功能，它基于REST，友好的UI是一个extjs的REST客户端，它占用较少的内存，基于简单文件系统而非数据库。这些优点使其日趋成为最流行的Maven仓库管理器。下载Nexus（nexus-3.0.1-01-win64.exe），安装完毕后访问<a href="http://192.168.1.102:8081/" target="_blank" rel="external">本地Maven私服主页</a>。</p>
<h4 id="配置单个项目"><a href="#配置单个项目" class="headerlink" title="配置单个项目"></a>配置单个项目</h4><p>安装完毕后需要登录，默认的用户名密码是：<code>admin/admin123</code>。登录之后才会显示设置图标，才能添加repositories。将<a href="http://192.168.1.102:8081/repository/maven-public/" target="_blank" rel="external">本地Maven私服路径</a>配置到项目的pom.xml中即可。如下代码片段所示。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>my-nexus-repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.102:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>my-nexus-repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.102:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果在本地私服没有的jar包，会自动从中心服务器下载。至此，最简单的Maven私服搭建完毕。</p>
<h4 id="配置全局应用"><a href="#配置全局应用" class="headerlink" title="配置全局应用"></a>配置全局应用</h4><p>在Maven的settings.xml中配置profile元素，这样就能让本机所有的Maven项目都使用自己的Maven私服。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">		  <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">		  <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Websocket发送消息长度设置]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/25/websocket-sending-config/</url>
      <content type="html"><![CDATA[<p>项目中用到WebSocket技术，发送文本字节比较多时出现异常，立即断开了连接。项目在Tomcat上运行，Tomcat默认的文本大小为8192。</p>
<a id="more"></a>
<img src="/2016/12/25/websocket-sending-config/websocket-disconnect-exception.png" alt="WebSocket异常断开连接" title="WebSocket异常断开连接">
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">If the application does not define a MessageHandler.Partial for incoming text messages, any incoming text messages must be buffered so the entire message can be delivered in a single call to the registered MessageHandler.Whole for text messages. The default buffer size for text messages is 8192 bytes. This may be changed for a web application by setting the servlet context initialization parameter org.apache.tomcat.websocket.textBufferSize to the desired value in bytes.</div></pre></td></tr></table></figure>
<p>在项目Tomcat的web.xml(<code>D:\Source\zwnewplatform\javasoftware\runtime\apache-tomcat-8.0.36\apache-tomcat-8.0.36\conf\web.xml</code>)中添加如下配置（注意单位为byte）。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>org.apache.tomcat.websocket.textBufferSize<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>327680<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>org.apache.tomcat.websocket.binaryBufferSize<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>327680<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果是Eclipse，则直接在Eclipse中配置，如下图所示：</p>
<img src="/2016/12/25/websocket-sending-config/eclipse-websocket-message.png" alt="Eclipse配置WebSocket消息大小" title="Eclipse配置WebSocket消息大小">
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim使用]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/24/vim-using/</url>
      <content type="html"><![CDATA[<p>title: vim使用</p>
<h4 id="替換（substitute）"><a href="#替換（substitute）" class="headerlink" title="替換（substitute）"></a>替換（substitute）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:[range]s/pattern/string/[c,e,g,i]</div></pre></td></tr></table></figure>
<a id="more"></a>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>range</td>
<td>指的是範圍，1,7 指從第一行至第七行，1,$ 指從第一行至最後一行，也就是整篇文章，也可以 % 代表。還記得嗎？ % 是目前編輯的文章，# 是前一次編輯的文章。</td>
</tr>
<tr>
<td>pattern</td>
<td>就是要被替換掉的字串，可以用 regexp 來表示。</td>
</tr>
<tr>
<td>tring</td>
<td>將pattern 由 string 所取代。</td>
</tr>
<tr>
<td>c</td>
<td>confirm，每次替換前會詢問。</td>
</tr>
<tr>
<td>e</td>
<td>不顯示 error。</td>
</tr>
<tr>
<td>g</td>
<td>globe，不詢問，整行替換。</td>
</tr>
<tr>
<td>i</td>
<td>ignore 不分大小寫。</td>
</tr>
</tbody>
</table>
<p>g 大概都是要加的，否則只會替換每一行的第一個符合字串。可以合起來用，如 cgi，表示不分大小寫，整行替換，替換前要詢問是否替換。</p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>shift + g(G)</td>
<td>跳转到文件末尾</td>
</tr>
<tr>
<td>:行号</td>
<td>在命令行模式下，冒号后输入数字，即可跳转到指定行中</td>
</tr>
<tr>
<td>yy</td>
<td>拷贝当前行</td>
</tr>
<tr>
<td>P/p(paste)</td>
<td>粘贴</td>
</tr>
<tr>
<td>$</td>
<td>到一行的行尾</td>
</tr>
<tr>
<td>0</td>
<td>到一行的行首</td>
</tr>
<tr>
<td>%d</td>
<td>删除全部内容(在命令行模式下)</td>
</tr>
<tr>
<td>ggdG</td>
<td>删除全部内容(在插入模式下)</td>
</tr>
<tr>
<td>d$</td>
<td>从当前位置开始删除，直到行尾</td>
</tr>
</tbody>
</table>
<p>在命令行模式下，输入斜杠，输入需要搜索的单词。匹配的单词会自动高亮，按n继续搜索下一个匹配结果，按#搜索上一个匹配结果。<br>/pattern 向下搜索 n继续搜索下一个<br>?pattern 向上搜索 #继续搜索上一个</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu常用软件一键安装]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/24/ubuntu-install-software-batch/</url>
      <content type="html"><![CDATA[<p>进公司时同事帮助安装Ubuntu操作系统时，使用脚本安装软件，非常之快。2小时之内，包括操作系统和开发环境皆搭建完毕。或许我们都有搭建开发环境的经历，半天能够搞定还算是比较顺利的。中间还不能出什么幺蛾子，要是再遇到点奇奇怪怪的问题，耗费的时间更长了。这里也见识到了Linux的高效和方便。</p>
<a id="more"></a>
<p>仔细观察，他是许多软件用几行简单的命令皆搞定了，所以我想编写一个简单的Bash脚本，争取一个脚本搞定大部分软件安装工作。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux压缩包管理]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/24/linux-compress-package-management/</url>
      <content type="html"><![CDATA[<h4 id="tar-bz2"><a href="#tar-bz2" class="headerlink" title="tar.bz2"></a>tar.bz2</h4><p>解压tar.bz2的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -jxvf xx.tar.bz2</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="tar-gz"><a href="#tar-gz" class="headerlink" title="tar.gz"></a>tar.gz</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -xzvf example.tar.gz</div></pre></td></tr></table></figure>
<h4 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h4><p>在Ubuntu中处理rar(WinRAR Compressed Archive)文件类型，安装相应包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install -y unrar</div></pre></td></tr></table></figure>
<p>输入如下命令解压缩：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unrar x -r simple.rar</div></pre></td></tr></table></figure>
<h4 id="tar-xz"><a href="#tar-xz" class="headerlink" title="tar.xz"></a>tar.xz</h4><p>xz是一个使用LZMA压缩算法的无损数据压缩文件格式。和gzip与bzip2一样，同样支持多文件压缩，但是约定不能将多于一个的目标文件压缩进同一个档案文件。相反，xz通常作为一种归档文件自身的压缩格式，例如使用tar或cpioUnix程序创建的归档。xz 在GNU coreutils（版本 7.1 或更新）中被使用。xz 作为压缩软件包被收录在 Fedora (自Fedora 12起), Arch Linux, FreeBSD、 Slackware Linux、CRUX 和 Funtoo中。由于 xz 文件格式的压缩率更高，已在 Linux 各发行版中广泛使用。最典型的就是Linux内核，3.12版本的xz压缩包仅72.85MB，解压后能达到518.77MB。</p>
<p>方法1(推荐)：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -Jxf sqlitestudio-3.1.1.tar.xz</div></pre></td></tr></table></figure>
<p>方法2：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xz <span class="_">-d</span> sqlitestudio-3.1.1.tar.xz</div><div class="line">tar -xf sqlitestudio-3.1.1.tar</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[初识React]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/23/react-using/</url>
      <content type="html"><![CDATA[<p>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设Instagram的网站。</p>
<a id="more"></a>
<p>React 的设计思想极其独特，属于革命性创新，性能出众，代码逻辑却非常简单。从最早的UI引擎变成了一整套前后端通吃的 Web App 解决方案。衍生的 React Native 项目，目标更是宏伟，希望用写 Web App 的方式去写 Native App。如果能够实现，整个互联网行业都会被颠覆，因为同一组人只需要写一次 UI ，就能同时运行在服务器、浏览器和手机。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wget使用]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/23/wget-using/</url>
      <content type="html"><![CDATA[<p>GNU Wget is a free software package for retrieving files using HTTP, HTTPS and FTP, the most widely-used Internet protocols. Wget是直接在命令行中使用的，可以很容易的以脚本的方式调用。</p>
<a id="more"></a>
<p>下载文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget url</div></pre></td></tr></table></figure>
<p>下载文件(断点续传)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -c url</div></pre></td></tr></table></figure>
<p>抓取整站：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#抓取整站</div><div class="line">wget -r -p -np -k http://www.xxx.com</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我的疑问]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/22/question/</url>
      <content type="html"><![CDATA[<ul>
<li>在接口返回的Json中，在Eclipse调试查看返回的Json带小数点，使用curl请求不带小数点</li>
<li>循环引用(Cycle Reference)对象的序列化问题</li>
<li>Spring MVC中数据转对象的过程</li>
<li>MyBatis中使用#时，如何将参数也显示的显示在日志中</li>
<li>Java中注解实现原理</li>
<li>Swagger中如何添加请求头</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据库切分]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/22/database-sharding/</url>
      <content type="html"><![CDATA[<h4 id="垂直切分-Vertical-Sharding"><a href="#垂直切分-Vertical-Sharding" class="headerlink" title="垂直切分(Vertical Sharding)"></a>垂直切分(Vertical Sharding)</h4><p>Sharding的基本思想就要把一个数据库切分成多个部分放到不同的数据库(server)上，从而缓解单一数据库的性能问题。不太严格的讲，对于海量数据的数据库，如果是因为表多而数据多，这时候适合使用垂直切分，即把关系紧密（比如同一模块）的表切分出来放在一个server上。如果表并不多，但每张表的数据非常多，这时候适合水平切分，即把表的数据按某种规则（比如按ID散列）切分到多个数据库(server)上。当然，现实中更多是这两种情况混杂在一起，这时候需要根据实际情况做出选择，也可能会综合使用垂直与水平切分，从而将原有数据库切分成类似矩阵一样可以无限扩充的数据库(server)阵列。</p>
<a id="more"></a>
<p>垂直切分的最大特点就是规则简单，实施也更为方便，尤其适合各业务之间的耦合度非<br>常低，相互影响很小，业务逻辑非常清晰的系统。在这种系统中，可以很容易做到将不同业<br>务模块所使用的表分拆到不同的数据库中。根据不同的表来进行拆分，对应用程序的影响也<br>更小，拆分规则也会比较简单清晰。</p>
<h4 id="水平切分-Herizonal-Sharding"><a href="#水平切分-Herizonal-Sharding" class="headerlink" title="水平切分(Herizonal Sharding)"></a>水平切分(Herizonal Sharding)</h4><p>水平切分于垂直切分相比，相对来说稍微复杂一些。因为要将同一个表中的不同数据拆<br>分到不同的数据库中，对于应用程序来说，拆分规则本身就较根据表名来拆分更为复杂，后<br>期的数据维护也会更为复杂一些。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java泛型实现原理]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/21/java-generate-implement/</url>
      <content type="html"><![CDATA[<p>泛型编程是一种通过参数化的方式将数据处理与数据类型解耦的技术，通过对数据类型施加约束（比如Java中的有界类型）来保证数据处理的正确性，又称参数类型或参数多态性。泛型最著名的应用就是容器，C++的STL、Java的Collection Framework。</p>
<a id="more"></a>
<p>不同的语言在实现泛型时采用的方式不同，C++的模板会在编译时根据参数类型的不同生成不同的代码，而Java的泛型是一种违反型，编译为字节码时参数类型会在代码中被擦除，单独记录在Class文件的attributes域内，而在使用泛型处做类型检查与类型转换。假设参数类型的占位符为T，擦除规则如下：</p>
<ul>
<li>泛型<t>擦除后变为Obecjt</t></li>
<li>&lt;? extends A&gt;擦除后变为A</li>
<li>&lt;？ super A&gt;擦除后变为Object</li>
</ul>
<p>上述擦除规则叫做保留上界。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu使用快捷键与技巧总结]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/20/ubuntu-using/</url>
      <content type="html"><![CDATA[<p>使用的Ubuntu版本为14.04 LTS和16.04 LTS版本。</p>
<h4 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h4><p>在Ubuntu下，常用的软件安装一条命令即搞定,跟上常用的软件名称即可，真的是一条命令安装所有软件,特别是重装系统之后，一条命令将原来的软件都安装完毕，节省了时间和精力，非常方便：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装常用软件(16.04 LTS及以后使用apt命令)</span></div><div class="line">sudo apt install -y wget curl aria2 keepass2 putty vim tree unzip git</div><div class="line">openssh-server uget maven gradle shutter nginx mysql-server nodejs </div><div class="line">texstudio virtualbox synaptic terminator</div></pre></td></tr></table></figure>
<p>synaptic是一款图形化的apt(Advance Package Tool)包管理器，可以轻松查看已经安装的包，未安装的包。terminator它支持分割终端,并可以在终端中快速切换.</p>
<h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>在Ubuntu下一些漂亮的字体记录。</p>
<table>
<thead>
<tr>
<th>字体名字</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Latin Modern Mono 10  Regular</td>
<td>目前终端采用的这种字体</td>
</tr>
<tr>
<td>Courier</td>
<td>Courier是一个等宽的粗衬线字体，主要是依据打字机所打印出来的字形来设计，于1955年由Howard “Bud” Kettler设计完成。原来的Courier字体是IBM公司在1950年代设计给打印机使用的字体，但是并未维护他们的专利，使得这个字型成为整个打字机制造业的标准。</td>
</tr>
<tr>
<td>Monospace</td>
<td>等宽字体（英语：Monospaced Font）是指字符宽度相同的电脑字体。与此相对，字符宽度不尽相同的电脑字体称为比例字体。</td>
</tr>
</tbody>
</table>
<h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><ul>
<li>长按Windows键会出现全局快捷键页面</li>
</ul>
<h4 id="设置截屏快捷键"><a href="#设置截屏快捷键" class="headerlink" title="设置截屏快捷键"></a>设置截屏快捷键</h4><p>在安装好了Shutter之后，每次截取屏幕都需要打开Shutter，点击Selection按钮。其实可以配置截屏的快捷键，就像QQ的<code>Ctrl + Alt + A</code>一样。如下图所示：</p>
<img src="/2016/12/20/ubuntu-using/shutter-selection-shortkey.png" alt="Ubuntu截图设置快捷键" title="Ubuntu截图设置快捷键">
<h5 id="设置Terminal默认路径"><a href="#设置Terminal默认路径" class="headerlink" title="设置Terminal默认路径"></a>设置Terminal默认路径</h5><p>一般情况下，在终端里有一个最高频的使用目录，希望打开终端时默认切换到此目录下。在Ubuntu里可以在Home目录下的bashrc<code>~/.bashrc</code>脚本里添加如下代码即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ <span class="_">-d</span> ~/document/blogs/jiangxiaoqiang/xiaoqiang-blog-source ];<span class="keyword">then</span></div><div class="line">    <span class="built_in">cd</span> ~/document/blogs/jiangxiaoqiang/xiaoqiang-blog-source</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>代码的含义是，如果当前目录不在<code>~/document/blogs/jiangxiaoqiang/xiaoqiang-blog-source</code>目录下，那么就切换到此目录。下一次打开终端时默认路径即为：<code>~/document/blogs/jiangxiaoqiang/xiaoqiang-blog-source</code></p>
<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><table>
<thead>
<tr>
<th>快捷键</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + Alt + +</td>
<td style="text-align:center">放大终端</td>
</tr>
<tr>
<td>Ctrl + -</td>
<td style="text-align:center">缩小终端</td>
</tr>
<tr>
<td>Ctrl + Window + Up</td>
<td style="text-align:center">最大化窗口，注意按下时按顺序按下相应键</td>
</tr>
<tr>
<td>Ctrl + Window + Down</td>
<td style="text-align:center">最小化窗口，注意按下时按顺序按下相应键</td>
</tr>
<tr>
<td>Alt + F1</td>
<td style="text-align:center">调出侧边栏(如果有设置自动隐藏的话)</td>
</tr>
<tr>
<td>Ctrl + Window + D(Desktop)</td>
<td style="text-align:center">显示桌面快捷键</td>
</tr>
<tr>
<td>Alt + F7</td>
<td style="text-align:center">激活窗口移动功能</td>
</tr>
<tr>
<td>Alt(长按)</td>
<td style="text-align:center">激活程序的菜单，即可使用程序的Alt快捷键组合了</td>
</tr>
<tr>
<td>Alt(短按)</td>
<td style="text-align:center">激活本应用程序的搜索菜单，即可在当前应用程序中搜索了</td>
</tr>
<tr>
<td>Alt + E</td>
<td style="text-align:center">在Google Chrome浏览器中，可以打开浏览器右侧的菜单</td>
</tr>
<tr>
<td>　Window + 1　</td>
<td style="text-align:center">打开Home目录(还可以用Window组合键打开其他目录)</td>
</tr>
<tr>
<td>Window + M</td>
<td style="text-align:center">搜索音乐(Music)</td>
</tr>
<tr>
<td>Window + A</td>
<td style="text-align:center">搜索或浏览程序（Application）</td>
</tr>
<tr>
<td>Window + F</td>
<td style="text-align:center">搜索或浏览文件（File）</td>
</tr>
<tr>
<td>Ctrl + PageUp</td>
<td style="text-align:center">切换到终端的上一个Tab页</td>
</tr>
<tr>
<td>Ctrl + PageDown</td>
<td style="text-align:center">切换到终端的下一个Tab页</td>
</tr>
<tr>
<td>Ctrl + Shift + W</td>
<td style="text-align:center">关闭终端当前Tab标签</td>
</tr>
<tr>
<td>Ctrl + Shift + Q</td>
<td style="text-align:center">关闭终端所有Tab标签</td>
</tr>
</tbody>
</table>
<p>参考资料：</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/Courier" target="_blank" rel="external">维基百科Courier条目</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MyBatis使用]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/20/mybatis-using/</url>
      <content type="html"><![CDATA[<ul>
<li>Java的实体属性中，属性赋值时是区分大小写的，比如adog不能成功映射到aDog</li>
</ul>
<h4 id="获取新增数据的ID"><a href="#获取新增数据的ID" class="headerlink" title="获取新增数据的ID"></a>获取新增数据的ID</h4><p>有时在添加一条记录后，需要获取添加记录的ID，进行其他业务逻辑。那么只需要在MyBatis中进行如下配置即可：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 新增--&gt;</div><div class="line">&lt;insert id="saveXzss" useGeneratedKeys="true" keyProperty="id"</div><div class="line">        parameterType="system.data.model.CreditDissent"&gt;</div><div class="line">    INSERT INTO TS_B_XYSS(</div><div class="line">    APPLAYER_NAME)</div><div class="line">    VALUES(</div><div class="line">    #&#123;applayerName&#125;);</div><div class="line">&lt;/insert&gt;</div></pre></td></tr></table></figure>
<p><code>useGeneratedKeys=&quot;true&quot;</code>表示开启返回自增ID。<code>keyProperty=&quot;id&quot;</code>表示返回主键的名字。在业务代码中接收：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">workflowMapper.create(autoGenerateFlow);</div><div class="line"><span class="keyword">int</span> id=creditDissent.getId();</div></pre></td></tr></table></figure>
<h4 id="Mapper文件中遍历集合参数"><a href="#Mapper文件中遍历集合参数" class="headerlink" title="Mapper文件中遍历集合参数"></a>Mapper文件中遍历集合参数</h4><p>在遍历List<integer>时，直接使用如下的语句即可：</integer></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">select * from table</div><div class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">    id in <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span></span></div><div class="line"><span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;#&#123;item&#125;<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果是遍历List<string>，可以采用如下写法：</string></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">**</span>"<span class="attr">countByXdrShxym</span>" **<span class="attr">resultType</span>=<span class="string">**</span>"<span class="attr">java.util.HashMap</span>"**&gt;</span>    </div><div class="line">    select XDR_SHXYM, count(*) AS total from TS_B_BLACKLIST where XDR_SHXYM in</div><div class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">**</span>"<span class="attr">item</span>" **<span class="attr">index</span>=<span class="string">**</span>"<span class="attr">index</span>" **<span class="attr">collection</span>=<span class="string">**</span>"<span class="attr">list</span>" **<span class="attr">open</span>=<span class="string">**</span>"('" **<span class="attr">separator</span>=<span class="string">**</span>"','" **<span class="attr">close</span>=<span class="string">**</span>"')"**&gt;</span>$&#123;item&#125;<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span>    </div><div class="line">    group by XDR_SHXYM</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中open和close需要单独加上单引号，链接分隔符(separator)也需要添加引号。另外遍历的item会出现解析出来是？的情况，将字符#替换为$，不过有SQL注入的风险。Mybatis如果采用#{xxx}的形式设置参数，Mybatis会进行sql注入的过滤。如果采用的是${xxx}，Mybatis不会进行sql注入过滤，而是直接将参入的内容输出为sql语句。</p>
<h4 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h4><p>优势想在SQL中添加特殊符号，比如在字符串变量中添加一个单引号，如下语句所示。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findList"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultMap</span>=<span class="string">"SummaryXzxk"</span>&gt;</span>    </div><div class="line">    SELECT *</div><div class="line">    FROM TS_B_XZXK</div><div class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"WHERE"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND|OR"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span> = <span class="string">"xdr != null"</span>&gt;</span>            </div><div class="line">        AND XDR like CONCAT('%', $&#123;xdr&#125;, '%')</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在变量xdr上添加单引号，可以写成如下语句：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></div><div class="line">    SELECT *</div><div class="line">    FROM TS_B_XZXK</div><div class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"WHERE"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND|OR"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span> = <span class="string">"xdr != null"</span>&gt;</span>            </div><div class="line">        AND XDR like CONCAT('%', &amp;apos;$&#123;xdr&#125;&amp;apos;, '%')</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="传入参数"><a href="#传入参数" class="headerlink" title="传入参数"></a>传入参数</h4><p>ＭyBatis的传入参数可以是各种Java的基本数据类型：包含int,String,Date等。基本数据类型作为传参，只能传入一个。通过#{参数名}即可获取传入的值，复杂数据类型：包含Java实体类、Map。通过#{属性名}或#{map的KeyName}即可获取传入的值，但是如果想传入一个collection时，可以使用mapper配置文件中的foreach语句。</p>
<h4 id="MyBatis中-与-的区别"><a href="#MyBatis中-与-的区别" class="headerlink" title="MyBatis中${}与#{}的区别"></a>MyBatis中${}与#{}的区别</h4><p>当使用#{parameterName}引入参数的时候，Mybatis会把这个参数认为是一个字符串，在拼接SQL的时候其实首先是一个问号（？），然后查询的时候，将参数引入到问号（？）之中。比如<br>    <code>select * from emp where name = #{name}</code>，这样的一个SQL，解析以后是<code>select * from emp where name = ?</code>，由于是#{name}的方式引入，那么就将问号（？）替换成#{name}的值，比如传进一个字符串”yedward”，那么最终的查询SQL是<code>select * from emp where name = &#39;yedward&#39;</code>。可以理解为#可以进行预编译，进行类型匹配，而$不进行数据类型匹配。</p>
<p>当使用${parameterName}引入参数的时候，Mybatis会将这个参数直接拼到SQL中去，就没有上面那种问号（？）。</p>
<ol>
<li><p>#将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。如：order by #user_id#，如果传入的值是111,那么解析成sql时的值为order by “111”, 如果传入的值是id，则解析成的sql为order by “id”</p>
</li>
<li><p>$将传入的数据直接显示生成在sql中。如：order by $user_id$，如果传入的值是111,那么解析成sql时的值为order by user_id,  如果传入的值是id，则解析成的sql为order by id.
　　</p>
</li>
<li>#方式能够很大程度防止sql注入。
　　</li>
<li><p>$方式无法防止Sql注入。</p>
</li>
<li><p>$方式一般用于传入数据库对象，例如传入表名.<br> 注：MyBatis排序时使用order by 动态参数时用$而不是#</p>
</li>
<li><p>有时你只是想直接在SQL语句中插入一个不改变的字符串。比如，像ORDER BY，你可以这样来使用：<br> ORDER BY ${columnName}</p>
</li>
</ol>
<p>这里MyBatis不会修改或转义字符串。</p>
<p>总结：<br>写一句SQL-例如：<code>select * from user_role where user_code = &quot;100&quot;;</code><br>这句话而言，需要写成 <code>select * from ${tableName} where user_code = #{userCode}</code><br>所以，$符是直接拼成sql的 ，#符则会以字符串的形式 与sql进行拼接。在直接拼接规则的时候可以用$，规则已经有了，只是传递参数进去，那么可以用#。</p>
<h4 id="parameter参数"><a href="#parameter参数" class="headerlink" title="_parameter参数"></a>_parameter参数</h4><p>错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">There is no getter for property named &apos;moduleCode&apos; in &apos;class java.lang.String</div></pre></td></tr></table></figure>
<p>将映射语句由：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUUID"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span> <span class="attr">resultMap</span>=<span class="string">"Corporation"</span>&gt;</span></div><div class="line">     SELECT *</div><div class="line">     FROM TS_F_CORPORATION</div><div class="line">     WHERE ID = &amp;apos;$&#123;id&#125;&amp;apos;;</div><div class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>改为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUUID"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span> <span class="attr">resultMap</span>=<span class="string">"Corporation"</span>&gt;</span></div><div class="line">     SELECT *</div><div class="line">     FROM TS_F_CORPORATION</div><div class="line">     WHERE ID = &amp;apos;$&#123;_parameter&#125;&amp;apos;;</div><div class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="分页-Page"><a href="#分页-Page" class="headerlink" title="分页(Page)"></a>分页(Page)</h4><h4 id="拦截器实现分页-Implement-by-Interceptor"><a href="#拦截器实现分页-Implement-by-Interceptor" class="headerlink" title="拦截器实现分页(Implement by Interceptor)"></a>拦截器实现分页(Implement by Interceptor)</h4><p>由于不同的数据库厂商所提供的分页不同，例如ORACLE是子查询实现，MySQL是limit语句实现，所以在Mybatis中，默认的实现是基于逻辑分页(Logical Page)的。但是Mybatis支持拦截器(Interceptor),所以，我们可以根据不同的数据库，定制自己的数据库物理分页(Physical Page)逻辑。改变mybatis内部的分页行为，理论上只要把最终要执行的sql转变成对应的分页语句就行了。</p>
<h5 id="Mybatis-PageHelper"><a href="#Mybatis-PageHelper" class="headerlink" title="Mybatis-PageHelper"></a>Mybatis-PageHelper</h5>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux安装输入法]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/19/linux-install-input-method/</url>
      <content type="html"><![CDATA[<h4 id="Ubuntu安装搜狗中文输入法"><a href="#Ubuntu安装搜狗中文输入法" class="headerlink" title="Ubuntu安装搜狗中文输入法"></a>Ubuntu安装搜狗中文输入法</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git使用]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/19/git-using/</url>
      <content type="html"><![CDATA[<p>Git是目前世界上最先进的分布式版本控制系统，没有之一。Git有什么特点？简单来说就是：高端大气上档次！逼格那是相当高，装逼必备神器。当你说用Git管理源码的时候，逼格瞬间高好几个档次。最近项目中在用，结合以前使用的经验，简单的总结记录在此。</p>
<a id="more"></a>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>列出当前的Git配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --list</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#列出分支</span></div><div class="line">git branch</div></pre></td></tr></table></figure>
<p>查看提交历史：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span> --graph --all</div></pre></td></tr></table></figure>
<p>Git保存用户名和密码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 是否保存认证信息</span></div><div class="line">git config credential.helper store</div></pre></td></tr></table></figure>
<p>注意是否保存认证信息仅仅是规定在当前库(repository)是否保存认证信息，不是git全局设置，其他库如果需要保存认证信息，需要单独执行此命令。使用<code>git config --list</code>命令查看当前库所有的配置。</p>
<p>Git查看Url：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote -v</div></pre></td></tr></table></figure>
<h4 id="添加-Add"><a href="#添加-Add" class="headerlink" title="添加(Add)"></a>添加(Add)</h4><p>在使用Git的过程中，使用命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></div><div class="line">git add .</div></pre></td></tr></table></figure>
<p>没有添加某一部分子目录的文件，让我有点郁闷，最后切换到那个目录下手动添加修改后(Modified)的文件。按理说应该是添加当前目录下所有的文件和子文件夹啊，百思不得其解。原来是由于子目录下的远程库的地址与当前库不一致所导致,子目录下还是next主题的URL,而不是当前库的URL,将子目录下的远程库的地址修改为当前库的地址即可:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote <span class="built_in">set</span>-url --add origin https://github.com/jiangxiaoqiang/xiaoqiang-blog-source.git</div></pre></td></tr></table></figure>
<p>其中,origin是远程库的名字.添加了新地址后，原来的地址还存在，可使用<code>git config --list</code>命令查看，同时，使用如下命令删除原来的旧的远程地址：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote <span class="built_in">set</span>-url --delete origin https://github.com/iissnan/hexo-theme-next</div></pre></td></tr></table></figure>
<h4 id="发起pull-request"><a href="#发起pull-request" class="headerlink" title="发起pull request"></a>发起pull request</h4><p>新建(check out)分支v1_xiaoqiang：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b v1_xiaoqiang</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-b <branch></branch></td>
<td>create and checkout a new branch</td>
</tr>
<tr>
<td>-B <branch></branch></td>
<td>create/reset and checkout a branch</td>
</tr>
</tbody>
</table>
<p>将新的分之push到origin分支中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin v1_xiaoqiang</div></pre></td></tr></table></figure>
<p>到GitLab页面里创建一个pull request即可。</p>
<h4 id="关于Commit的建议"><a href="#关于Commit的建议" class="headerlink" title="关于Commit的建议"></a>关于Commit的建议</h4><ul>
<li><strong>one thing one commit</strong>:在提交commit的时候尽量保证这个commit只做一件事情，比如实现某个功能或者修改了配置文件。</li>
<li><strong>easy to read</strong>:清楚的表达这个commit做了什么。</li>
<li><strong>cherry-pick</strong>:cherry-pick将Commit从一个分之拷贝到另一个分支，如果每个Commit包含的特性太多，那么就不能完美的pick出想要的特性。</li>
<li><strong>code review</strong>:易于别人做code review。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 50-character subject line</div><div class="line">#</div><div class="line"># 72-character wrapped longer description. This should answer:</div><div class="line">#</div><div class="line"># * Why was this change necessary?</div><div class="line"># * How does it address the problem?</div><div class="line"># * Are there any side effects?</div><div class="line">#</div><div class="line"># Include a link to the ticket, if any.</div></pre></td></tr></table></figure>
<p>常见的修改类型如下：</p>
<ul>
<li>feat (feature)</li>
<li>fix (bug fix)</li>
<li>docs (documentation)</li>
<li>style (formating, missing semi colons, …)</li>
<li>refactor</li>
<li>test (when adding missing tests)</li>
<li>chore (maintain)</li>
</ul>
<h4 id="更新-update"><a href="#更新-update" class="headerlink" title="更新(update)"></a>更新(update)</h4><p>采用git pull时，提示如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">hldev@hldev-100:~/hldata/backend/credit-system$ git pull</div><div class="line">Username for &apos;http://dn6&apos;: xiaoqiang.jiang</div><div class="line">Password for &apos;http://xiaoqiang.jiang@dn6&apos;:</div><div class="line">There is no tracking information for the current branch.</div><div class="line">Please specify which branch you want to merge with.</div><div class="line">See git-pull(1) for details.</div><div class="line"></div><div class="line">    git pull &lt;remote&gt; &lt;branch&gt;</div><div class="line"></div><div class="line">If you wish to set tracking information for this branch you can do so with:</div><div class="line"></div><div class="line">    git branch --set-upstream-to=origin/&lt;branch&gt; v1_xiaoqiang</div></pre></td></tr></table></figure>
<p>指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch --set-upstream-to origin/v1 v1_xiaoqiang</div></pre></td></tr></table></figure>
<h4 id="合并-merge"><a href="#合并-merge" class="headerlink" title="合并(merge)"></a>合并(merge)</h4><p>下面是使用过的一个合并步骤,切换到v1分支，v1分支是开发的主分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout v1</div></pre></td></tr></table></figure>
<p>将远程分支更新获取并合并到v1分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin v1</div></pre></td></tr></table></figure>
<p>查看当前分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch</div></pre></td></tr></table></figure>
<p>假如当前分支为名称：v1_xiaoqiang,将v1分支合并到当前分支：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#切换到v1_xiaoqiang分支</span></div><div class="line">git checkout v1_xiaoqiang</div><div class="line"><span class="comment">#将v1分支合并到当前分支（v1_xiaoqiang）</span></div><div class="line">git merge v1</div></pre></td></tr></table></figure>
<p>关闭文件对比(合并)工具后，辅助文件都会自动删除，但同时会生成一个test.txt.orig的文件，orig是original的缩写，内容是解决冲突前的冲突现场。默认该.orig文件可能不会自动删除，需要手动删除。</p>
<h4 id="撤销合并"><a href="#撤销合并" class="headerlink" title="撤销合并"></a>撤销合并</h4><p>使用git show命令查看父编号(parent number):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show s868dfa3e5267578eeec73947f334320740885f56</div></pre></td></tr></table></figure>
<p>显示的内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">commit 868dfa3e5267578eeec73947f334320740885f56</div><div class="line">Merge: 0995c73 6d3ef06</div><div class="line">Author: jiangxiaoqiang &lt;jiangtingqiang@gmail.com&gt;</div><div class="line">Date:   Fri Jan 6 09:30:15 2017 +0800</div><div class="line"></div><div class="line">    Merge branch &apos;v1&apos; of http://dn6/backend/credit-system into v1</div></pre></td></tr></table></figure>
<p>The first one is the first parent, the second one is the second parent。取消合并：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git revert -m 1 HEAD</div></pre></td></tr></table></figure>
<p>1就是1，表示0995c73对应的父来源，2表示6d3ef06对应的父来源。要撤销的那条merge线的编号,HEAD表示merge前的版本号。</p>
<h4 id="拉取（Pull）"><a href="#拉取（Pull）" class="headerlink" title="拉取（Pull）"></a>拉取（Pull）</h4><p>git pull的作用是取回远程主机某个分支的更新，再与本地指定分之合并。实际包含2步操作，git fetch和git merge。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull &lt;远程主机名&gt;　&lt;远程分支名&gt;：&lt;本地分支名&gt;</div></pre></td></tr></table></figure>
<p>比如取回origin主机的next分支，与本地的master分支合并，写成下面这样：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin next:master</div></pre></td></tr></table></figure>
<p>远程分支与当前分支合并，冒号后的内容可以省略：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin next</div></pre></td></tr></table></figure>
<p>等同于先做fetch，再做merge。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git fetch origin</div><div class="line">git merge origin/next</div></pre></td></tr></table></figure>
<p>有时，当前仓库不止包含一个远程分支，比如一份代码存放在公司内网的git仓库中，一份代码存放在外网的仓库中。使用<code>git config --list</code>命令可查看。此时拉取时，指定不同的主机即可，例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull osc v1</div></pre></td></tr></table></figure>
<p>其中osc为远程主机的主机名，v1为本地分支。</p>
<p>TS_B_PJZC_T_SP_SXRMD</p>
<h4 id="储藏-Stash"><a href="#储藏-Stash" class="headerlink" title="储藏(Stash)"></a>储藏(Stash)</h4><p>“‘储藏”“可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。往堆栈推送一个新的储藏，只要运行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash</div></pre></td></tr></table></figure>
<p>查看所有储藏：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash list</div></pre></td></tr></table></figure>
<p>输出的内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hldev@hldev-100:~/hldata/backend/credit-system$ git stash list</div><div class="line">stash@&#123;0&#125;: WIP on v1_xiaoqiang: ac284e4 refactor:根据属性名获取属性值优化</div></pre></td></tr></table></figure>
<p>其中WIP代表:Work In Progress，应用储藏：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash apply</div></pre></td></tr></table></figure>
<p>丢弃储藏：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash drop</div></pre></td></tr></table></figure>
<p>drop后可以跟储藏的编号，如果没有指定，默认丢弃最新一次储藏。</p>
<h4 id="远程仓库-remote"><a href="#远程仓库-remote" class="headerlink" title="远程仓库(remote)"></a>远程仓库(remote)</h4><p>添加远程仓库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add osc https://github.com/jiangxiaoqiang/xiaoqiang-blog-source.git</div></pre></td></tr></table></figure>
<p>其中osc为远程仓库的名称，<a href="https://github.com/jiangxiaoqiang/xiaoqiang-blog-source.git为远程仓库的地址。" target="_blank" rel="external">https://github.com/jiangxiaoqiang/xiaoqiang-blog-source.git为远程仓库的地址。</a></p>
<h4 id="Your-branch-and-‘origin-master’-have-diverged"><a href="#Your-branch-and-‘origin-master’-have-diverged" class="headerlink" title="Your branch and ‘origin/master’ have diverged"></a>Your branch and ‘origin/master’ have diverged</h4><p>If you absolutely sure this is your case then you can force Git to push your changes:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#force push changes</span></div><div class="line">git push origin master <span class="_">-f</span></div></pre></td></tr></table></figure>
<h5 id="Changes-not-staged-for-commit"><a href="#Changes-not-staged-for-commit" class="headerlink" title="Changes not staged for commit"></a>Changes not staged for commit</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash</div></pre></td></tr></table></figure>
<h4 id="Please-commit-your-changes-or-stash-them-before-you-can-merge"><a href="#Please-commit-your-changes-or-stash-them-before-you-can-merge" class="headerlink" title="Please, commit your changes or stash them before you can merge"></a>Please, commit your changes or stash them before you can merge</h4><p>出现这个问题的原因是其他人修改了文件并提交到版本库中去了，而你本地也修改了xxx.php，这时候你进行git pull操作就好出现冲突了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot特点]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/19/spring-boot/</url>
      <content type="html"><![CDATA[<h4 id="Spring-Boot特点"><a href="#Spring-Boot特点" class="headerlink" title="Spring Boot特点"></a>Spring Boot特点</h4><p>2013年12月12日，Spring发布了4.0版本。Spring的4.0版本可以说是一个重大的更新，其全面支持Java8，并且对Groovy语言也有良好的支持。另外引入了非常多的新项目，比如Spring boot，Spring Cloud，Spring WebSocket等。Spring由于其繁琐的配置，一度被人成为“配置地狱”，各种XML、Annotation配置，让人眼花缭乱，而且如果出错了也很难找出原因。Spring Boot项目就是为了解决配置繁琐的问题，最大化的实现convention over configuration(约定大于配置)。熟悉Ruby On Rails（ROR框架的程序员都知道，借助于ROR的脚手架工具只需简单的几步即可建立起一个Web应用程序。而Spring Boot就相当于Java平台上的ROR。</p>
<a id="more"></a>
<p>Spring Boot的特性有以下几条：</p>
<ul>
<li><p>创建独立Spring应用程序</p>
</li>
<li><p>嵌入式Tomcat，Jetty容器，无需部署WAR包</p>
</li>
<li><p>简化Maven及Gradle配置</p>
</li>
<li><p>尽可能的自动化配置Spring</p>
</li>
<li><p>直接植入产品环境下的实用功能，比如度量指标、健康检查及扩展配置等</p>
</li>
<li><p>无需代码生成及XML配置</p>
</li>
</ul>
<p>Spring Boot是这几年微服务概念流行后，Spring开发的一套快速开发Spring应用的框架。它本身并不提供Spring框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于Spring框架的应用程序。也就是说，它并不是用来替代Spring的解决方案，而是和Spring框架紧密结合用于提升Spring开发者体验的工具。同时它集成了大量常用的第三方库配置（例如Jackson, JDBC, Mongo, Redis, Mail等等），Spring Boot应用中这些第三方库几乎可以零配置的开箱即用（out-of-the-box），大部分的Spring Boot应用都只需要非常少量的配置代码，开发者能够更加专注于业务逻辑。</p>
<h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><p>@EnableAutoConfiguration这个注解告诉Spring Boot根据添加的jar依赖猜测你想如何配置Spring。spring-boot-starter-web添加了Tomcat和Spring MVC，所以auto-configuration将假定你正在开发一个web应用并相应地对Spring进行默认设置。</p>
<p>参考资料：</p>
<ul>
<li><p><a href="https://www.tianmaying.com/qa/205" target="_blank" rel="external">spring -boot和spring-mvc是两个平行的框架么?</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/huang0925/p/4347690.html" target="_blank" rel="external">值得使用的Spring Boot</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java concurrent包]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/18/java-concurrent-package/</url>
      <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p> java.util.concurrent 包含许多线程安全、测试良好、高性能的并发构建块。不客气地说，创建 java.util.concurrent 的目的就是要实现 Collection 框架对数据结构所执行的并发操作。通过提供一组可靠的、高性能并发构建块，开发人员可以提高并发类的线程安全、可伸缩性、性能、可读性和可靠性。</p>
<a id="more"></a>
<p>通常所说的concurrent包基本有3个package组成  </p>
<ul>
<li>java.util.concurrent：提供大部分关于并发的接口和类，如BlockingQueue,Callable,ConcurrentHashMap,ExecutorService, Semaphore等  </li>
<li>java.util.concurrent.atomic：提供所有原子操作的类， 如AtomicInteger, AtomicLong等；  </li>
<li>java.util.concurrent.locks:提供锁相关的类, 如Lock, ReentrantLock, ReadWriteLock, Condition等；</li>
</ul>
<p>参考文章：</p>
<ul>
<li><a href="https://my.oschina.net/yu120/blog/689204" target="_blank" rel="external">Java concurrent包介绍及使用</a></li>
<li><a href="http://www.cnblogs.com/sarafill/archive/2011/05/18/2049461.html" target="_blank" rel="external">java.util.concurrent介绍</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java并发编程：Callable、Future和FutureTask]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/18/java-concurrent-program/</url>
      <content type="html"><![CDATA[<p>创建线程的2种方式，一种是直接继承Thread，另外一种就是实现Runnable接口。这2种方式都有一个缺陷就是：在执行完任务之后无法获取执行结果。如果需要获取执行结果，就必须通过共享变量或者使用线程通信的方式来达到效果，这样使用起来就比较麻烦。而自从Java 1.5开始，就提供了Callable和Future，通过它们可以在任务执行完毕之后得到任务执行结果。</p>
<a id="more"></a>
<h4 id="Callable与Runnable"><a href="#Callable与Runnable" class="headerlink" title="Callable与Runnable"></a>Callable与Runnable</h4><h4 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h4><p>多线程开发中有几个痛点：</p>
<ul>
<li>主线程如何正确的关闭异步线程？</li>
<li>主线程怎么知道异步线程是否执行完成？</li>
</ul>
<p>Future提供了三种功能：</p>
<p>　　1）判断任务是否完成；</p>
<p>　　2）能够中断任务；</p>
<p>　　3）能够获取任务执行结果。</p>
<h4 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h4><p>参考文章：</p>
<ul>
<li><p><a href="http://gavinliu.cn/2015/12/14/Java-%E4%BD%BF%E7%94%A8Future%E8%BF%9B%E8%A1%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/" target="_blank" rel="external">Java - 使用Future模式进行多线程编程</a></p>
</li>
<li><p><a href="http://blog.csdn.net/ghsau/article/details/7451464" target="_blank" rel="external">Java线程(七)：Callable和Future</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo使用总结]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/18/hexo-using/</url>
      <content type="html"><![CDATA[<p>Hexo是一个简洁、高效的博客框架。使用Markdown编写文章，快速渲染成博客静态网页。</p>
<a id="more"></a>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装Hexo：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo --save</div></pre></td></tr></table></figure>
<p>安装hexo-cli:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure>
<p>仅仅安装了Hexo还不可以在浏览器中查看效果，还需要安装Hexo Server模块：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-server --save</div></pre></td></tr></table></figure>
<p>安装之后就可以使用hexo server命令了。在Ubuntu下安装会出现获取文件失败的错误，可能需要多次尝试。提示：WARN  No layout: index.html时，一般是由于主题文件不存在导致，安装相应的主题即可。切换到源码目录下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<p>访问<code>http://localhost:4000</code>页面空白，提示<code>can not get /</code>，此时需要在源码目录下运行一下npm install命令即可。</p>
<h4 id="安装搜索模块"><a href="#安装搜索模块" class="headerlink" title="安装搜索模块"></a>安装搜索模块</h4><p>安装搜索模块可自定义站内搜索，在源码目录下执行如下命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-searchdb --save</div></pre></td></tr></table></figure>
<p>在使用搜索模块时，有时会出现如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">hldev@hldev-100:~/summerize/xiaoqiang-blog-source$ hexo s</div><div class="line">ERROR Plugin load failed: hexo-generator-searchdb</div><div class="line">Error: Cannot find module &apos;../highlight_alias.json&apos;</div><div class="line">    at Function.Module._resolveFilename (module.js:455:15)</div><div class="line">    at Function.Module._load (module.js:403:25)</div><div class="line">    at Module.require (module.js:483:17)</div><div class="line">    at require (internal/module.js:20:19)</div><div class="line">    at Object.&lt;anonymous&gt; (/home/hldev/summerize/xiaoqiang-blog-source/node_modules/hexo-generator-searchdb/node_modules/hexo-util/lib/highlight.js:6:13)</div><div class="line">    at Module._compile (module.js:556:32)</div><div class="line">    at Object.Module._extensions..js (module.js:565:10)</div><div class="line">    at Module.load (module.js:473:32)</div><div class="line">    at tryModuleLoad (module.js:432:12)</div><div class="line">    at Function.Module._load (module.js:424:3)</div><div class="line">    at Module.require (module.js:483:17)</div><div class="line">    at require (internal/module.js:20:19)</div><div class="line">    at Object.&lt;anonymous&gt; (/home/hldev/summerize/xiaoqiang-blog-source/node_modules/hexo-generator-searchdb/node_modules/hexo-util/lib/index.js:8:21)</div><div class="line">    at Module._compile (module.js:556:32)</div><div class="line">    at Object.Module._extensions..js (module.js:565:10)</div><div class="line">    at Module.load (module.js:473:32)</div><div class="line">    at tryModuleLoad (module.js:432:12)</div><div class="line">    at Function.Module._load (module.js:424:3)</div><div class="line">    at Module.require (module.js:483:17)</div><div class="line">    at require (internal/module.js:20:19)</div><div class="line">    at Object.&lt;anonymous&gt; (/home/hldev/summerize/xiaoqiang-blog-source/node_modules/hexo-generator-searchdb/lib/generator.js:4:12)</div><div class="line">    at Module._compile (module.js:556:32)</div></pre></td></tr></table></figure>
<p>解决此问题，切换到node_modules目录下，删除hexo-generator-searchdb模块，重新安装hexo-generator-searchdb模块即可。</p>
<h4 id="安装Next主题"><a href="#安装Next主题" class="headerlink" title="安装Next主题"></a>安装Next主题</h4><p>next主题是Hexo下一款非常简洁美观的主题，切换到themes目录下，执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<h4 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h4><p>可以自己添加相应菜单，可以在一级菜单上添加一个书(Book)或者其他模块。</p>
<h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR Local hexo not found in ~/source/blogs/xiaoqiang-blog-source</div><div class="line">ERROR Try running: &apos;npm install hexo --save&apos;</div></pre></td></tr></table></figure>
<p>使用命令安装了还是不见好。删除项目文件夹下的node_module模块，使用<code>npm instal hexo --save</code>重新安装Hexo即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ArrayList线程安全]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/17/arraylist-thread-safe/</url>
      <content type="html"><![CDATA[<ol>
<li>Using Collections.synchronizedList() method</li>
<li>Using thread-safe variant of ArrayList: CopyOnWriteArrayList</li>
</ol>
<a id="more"></a>
<h4 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h4><p>CopyOnWriteArrayList是java.util.concurrent包中的一个List的实现类。CopyOnWrite的意思是在写时拷贝，也就是如果需要对CopyOnWriteArrayList的内容进行改变，首先会拷贝一份新的List并且在新的List上进行修改，最后将原List的引用指向新的List。使用CopyOnWriteArrayList可以线程安全地遍历，因为如果另外一个线程在遍历的时候修改List的话，实际上会拷贝出一个新的List上修改，而不影响当前正在被遍历的List。</p>
<p><a href="http://stackoverflow.com/questions/2444005/how-do-i-make-my-arraylist-thread-safe-another-approach-to-problem-in-java" target="_blank" rel="external">How do I make my ArrayList Thread-Safe? Another approach to problem in Java?</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java异常分类]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/17/java-exception/</url>
      <content type="html"><![CDATA[<h4 id="Java异常关系"><a href="#Java异常关系" class="headerlink" title="Java异常关系"></a>Java异常关系</h4><ul>
<li>Throwable是所有异常的根，java.lang.Throwable</li>
<li>Error是错误，java.lang.Error</li>
<li>Exception是异常，java.lang.Exception</li>
</ul>
<a id="more"></a>
<p>Java异常的分类如下图所示：</p>
<img src="/2016/12/17/java-exception/java-exception.jpg" alt="Java异常关系" title="Java异常关系">
<p>图形绘制(graphviz)源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">digraph&#123;</div><div class="line">size=&quot;8,8&quot;;</div><div class="line">        edge[fontname=&quot;FangSong&quot;];</div><div class="line">        node[shape=&quot;Mrecord&quot;,fontname=&quot;FangSong&quot;,size=&quot;20,20&quot;,fontsize=12,color=&quot;skyblue&quot;,style=&quot;filled&quot;]</div><div class="line">        Throwable -&gt; Error;</div><div class="line">        Throwable -&gt; Exception;</div><div class="line">        Exception -&gt; RuntimeException;</div><div class="line">        Exception -&gt; CheckedException;</div><div class="line">        Error -&gt; VirtualMachineError;</div><div class="line">        Error -&gt; AWTError;</div><div class="line">        VirtualMachineError -&gt; StackOverFlowError;</div><div class="line">        VirtualMachineError -&gt; OutOfMemoryError;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dot -Tjpg -Gdpi=1024 java-exception.dot -o java-exception.jpg</div></pre></td></tr></table></figure>
<p>RuntimeException是那些可能在 Java 虚拟机正常运行期间抛出的异常的超类。可能在执行方法期间抛出但未被捕获的RuntimeException的任何子类都无需在throws子句中进行声明。除了runtimeException以外的异常，都属于checkedException，它们都在java.lang库内部定义。Java编译器要求程序必须捕获或声明抛出这种异常。一个方法必须通过throws语句在方法的声明部分说明它可能抛出但并未捕获的所有checkedException。</p>
<ul>
<li>Java.lang.ClassNotFoundException</li>
<li>Java.lang.CloneNotSupportedException</li>
<li>Java.lang.IllegalAccessException</li>
<li>Java.lang.InterruptedException</li>
<li>Java.lang.NoSuchFieldException</li>
<li>Java.lang.NoSuchMetodException</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fedora常用软件集合]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/16/fedora-software/</url>
      <content type="html"><![CDATA[<p>使用Fedora 24有一段时间了，这里列出了平时总结的在Fedora上可以使用的一些软件，完成平时的任务。如果您也要尝试使用Fedora，或许可以节省不少时间。列出的软件大多数是跨平台(Crossplatform)的，可以运行在其他Linux发行版上，以及Mac OS和Windows上。</p>
<a id="more"></a>
<h3 id="网络-Network"><a href="#网络-Network" class="headerlink" title="网络(Network)"></a>网络(Network)</h3><h4 id="geary-邮件客户端"><a href="#geary-邮件客户端" class="headerlink" title="geary(邮件客户端)"></a>geary(邮件客户端)</h4><p><a href="https://wiki.gnome.org/Apps/Geary" target="_blank" rel="external">Geary</a> is an email application built around conversations, for the GNOME 3 desktop. It allows you to read, find and send email with a straightforward, modern interface.</p>
<p>Conversations allow you to read a complete discussion without having to find and click from message to message.</p>
<h4 id="httrack"><a href="#httrack" class="headerlink" title="httrack"></a>httrack</h4><p>网页下载与缓存。</p>
<h4 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -c http://dl.zeroturnaround.com/idea/jr-ide-intellij-6.5.0_13-16.zip</div></pre></td></tr></table></figure>
<p>-c参数表示断点续传。–continue： Continue getting a partially-downloaded file.  This is useful when you want to finish up a download started by a previous instance of Wget, or by another program.</p>
<h4 id="uGet"><a href="#uGet" class="headerlink" title="uGet"></a>uGet</h4><p>uGet is the #1 Open Source Download Manager app.uGet is a multi-platform app for Linux, BSD, Android &amp; Windows (XP - 8)</p>
<h3 id="编程开发（Development）"><a href="#编程开发（Development）" class="headerlink" title="编程开发（Development）"></a>编程开发（Development）</h3><h4 id="PyCharm-EDU"><a href="#PyCharm-EDU" class="headerlink" title="PyCharm(EDU)"></a>PyCharm(EDU)</h4><p>PyCharm的教育版是开源免费的，学习Python。</p>
<h4 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h4><p>本博客就是基于NodeJS生成，虽然不是很懂NodeJS，但是感觉很牛逼的样子。</p>
<h4 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h4><p>端口扫描。</p>
<h4 id="Fiddler-for-Linux"><a href="#Fiddler-for-Linux" class="headerlink" title="Fiddler for Linux"></a>Fiddler for Linux</h4><h4 id="Apache-Tomcat"><a href="#Apache-Tomcat" class="headerlink" title="Apache Tomcat"></a>Apache Tomcat</h4><h4 id="OpenVPN"><a href="#OpenVPN" class="headerlink" title="OpenVPN"></a>OpenVPN</h4><h4 id="StarDict"><a href="#StarDict" class="headerlink" title="StarDict"></a>StarDict</h4><h4 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h4><p>htop是实时显示当前系统运行情况的，不同于ps、pstree、pidof、vmsta等这些快照工具，快照工具只能显示命令执行前一秒系统的情况。htop 对关键信息实行高亮显示，对于我们用肉眼查看进程信息的情况相当友好。</p>
<table>
<thead>
<tr>
<th>列名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>PID</td>
<td style="text-align:center">进程id</td>
</tr>
<tr>
<td>PPID</td>
<td style="text-align:center">父进程id</td>
</tr>
<tr>
<td>RUSER</td>
<td style="text-align:center">Real user name</td>
</tr>
<tr>
<td>UID</td>
<td style="text-align:center">进程所有者的用户id</td>
</tr>
<tr>
<td>TTY</td>
<td style="text-align:center">启动进程的终端名。不是从终端启动的进程则显示为 ?</td>
</tr>
<tr>
<td>PR</td>
<td style="text-align:center">优先级</td>
</tr>
<tr>
<td>NI</td>
<td style="text-align:center">nice值。负值表示高优先级，正值表示低优先级</td>
</tr>
<tr>
<td>P</td>
<td style="text-align:center">最后使用的CPU，仅在多CPU环境下有意义</td>
</tr>
<tr>
<td>%CPU</td>
<td style="text-align:center">上次更新到现在的CPU时间占用百分比</td>
</tr>
<tr>
<td>VIRT(Virtual)</td>
<td style="text-align:center">进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</td>
</tr>
<tr>
<td>TIME</td>
<td style="text-align:center">进程使用的CPU时间总计，单位秒</td>
</tr>
<tr>
<td>SHR(Share)</td>
<td style="text-align:center">共享内存大小，单位kb</td>
</tr>
<tr>
<td>TIME+</td>
<td style="text-align:center">进程使用的CPU时间总计，单位1/100秒</td>
</tr>
<tr>
<td>%MEM</td>
<td style="text-align:center">进程使用的物理内存百分比</td>
</tr>
<tr>
<td>SWAP</td>
<td style="text-align:center">进程使用的虚拟内存中，被换出的大小，单位kb</td>
</tr>
<tr>
<td>S(Status)</td>
<td style="text-align:center">进程状态（D=不可中断的睡眠状态，R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）</td>
</tr>
<tr>
<td>RES</td>
<td style="text-align:center">进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</td>
</tr>
<tr>
<td>CODE</td>
<td style="text-align:center">可执行代码占用的物理内存大小，单位kb</td>
</tr>
<tr>
<td>DATA</td>
<td style="text-align:center">可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb</td>
</tr>
<tr>
<td>nFLT</td>
<td style="text-align:center">页面错误次数</td>
</tr>
<tr>
<td>nDRT</td>
<td style="text-align:center">最后一次写入到现在，被修改过的页面数</td>
</tr>
<tr>
<td>WCHAN</td>
<td style="text-align:center">若该进程在睡眠，则显示睡眠中的系统函数名</td>
</tr>
<tr>
<td>Flags</td>
<td style="text-align:center">任务标志，参考 sched.h</td>
</tr>
</tbody>
</table>
<p>默认情况下仅显示比较重要的 PID、USER、PR、NI、VIRT、RES、SHR、S、%CPU、%MEM、TIME+、COMMAND 列。可以通过下面的快捷键来更改显示内容</p>
<img src="/2016/12/16/fedora-software/htop-ui.jpg" alt="htop界面" title="htop界面">
<p>上图说明计算机有8个内核，8GB的内存，8GB的交换空间(Swap Space)。</p>
<h4 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h4><p>跨平台文本编辑器。</p>
<h4 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h4><p>Java开发IDE。</p>
<h4 id="7zip"><a href="#7zip" class="headerlink" title="7zip"></a>7zip</h4><p>7-Zip is open source software. Most of the source code is under the GNU LGPL license. The unRAR code is under a mixed license: GNU LGPL + unRAR restrictions.7-Zip works in Windows 10 / 8 / 7 / Vista / XP / 2012 / 2008 / 2003 / 2000 / NT. There is a port of the command line version to Linux/Unix.安装7zip用于解压.7z结尾的文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnf install -y p7zip-plugins</div></pre></td></tr></table></figure>
<p>使用如下命令解压文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">7z e Netty权威指南\ PDF完整版带目录书签.7z</div></pre></td></tr></table></figure>
<p>输出的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">7-Zip [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21</div><div class="line">p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,8 CPUs Intel(R) Core(TM) i7-3632QM CPU @ 2.20GHz (306A9),ASM,AES-NI)</div><div class="line"></div><div class="line">Scanning the drive for archives:</div><div class="line">1 file, 61246559 bytes (59 MiB)</div><div class="line"></div><div class="line">Extracting archive: Netty权威指南 PDF完整版带目录书签.7z</div><div class="line">--</div><div class="line">Path = Netty权威指南 PDF完整版带目录书签.7z</div><div class="line">Type = 7z</div><div class="line">Physical Size = 61246559</div><div class="line">Headers Size = 306</div><div class="line">Method = LZMA2:24</div><div class="line">Solid = +</div><div class="line">Blocks = 1</div><div class="line"></div><div class="line">Everything is Ok                                                           </div><div class="line"></div><div class="line">Files: 3</div><div class="line">Size:       86833121</div><div class="line">Compressed: 61246559</div></pre></td></tr></table></figure>
<h3 id="影音娱乐-Media-amp-Entertainment"><a href="#影音娱乐-Media-amp-Entertainment" class="headerlink" title="影音娱乐(Media&amp;Entertainment)"></a>影音娱乐(Media&amp;Entertainment)</h3><h4 id="VLC-Media-Player"><a href="#VLC-Media-Player" class="headerlink" title="VLC Media Player"></a>VLC Media Player</h4><h4 id="Electronic-Wechat"><a href="#Electronic-Wechat" class="headerlink" title="Electronic-Wechat"></a>Electronic-Wechat</h4><p>基于微信网页版微信，结合Electron开发的基于Linux的微信客户端。</p>
<h4 id="Shutter"><a href="#Shutter" class="headerlink" title="Shutter"></a>Shutter</h4><p>Linux下的截图工具。</p>
<h4 id="Intellij-Idea"><a href="#Intellij-Idea" class="headerlink" title="Intellij Idea"></a>Intellij Idea</h4><p>Linux下Java开发必备工具。</p>
<h4 id="FileZilla"><a href="#FileZilla" class="headerlink" title="FileZilla"></a>FileZilla</h4><h4 id="Slack"><a href="#Slack" class="headerlink" title="Slack"></a>Slack</h4><h4 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h4><h4 id="Transmission"><a href="#Transmission" class="headerlink" title="Transmission"></a>Transmission</h4><p>Linux下torrent下载工具。</p>
<h4 id="Deluge"><a href="#Deluge" class="headerlink" title="Deluge"></a>Deluge</h4><p>Linux下下载工具，支持磁力链接(Magnic Link)下载。</p>
<h4 id="MPlayer"><a href="#MPlayer" class="headerlink" title="MPlayer"></a>MPlayer</h4><h4 id="Graphiz"><a href="#Graphiz" class="headerlink" title="Graphiz"></a>Graphiz</h4><h4 id="Putty"><a href="#Putty" class="headerlink" title="Putty"></a>Putty</h4><h4 id="Google-Chrome"><a href="#Google-Chrome" class="headerlink" title="Google Chrome"></a>Google Chrome</h4><p>Google Chrome浏览器的好处之一就是，只要登陆Google的账号后，它会把你的搜索记录、插件、Cookie等同步到云端，这样回家之后可以接着处理工作上遗留的问题。比如在办公室研究某个问题到一半，回家打开浏览器搜索关键字会快速出现办公时研究的关键字，相当方便。还有你的历史浏览记录，在不同的设备上使用即时同步，不同设备（PC、Laptop）、平台（Windows和Fedora）使用习惯无缝对接。</p>
<h4 id="FireFox"><a href="#FireFox" class="headerlink" title="FireFox"></a>FireFox</h4><h4 id="Google-Earth"><a href="#Google-Earth" class="headerlink" title="Google Earth"></a>Google Earth</h4><h4 id="Lantern"><a href="#Lantern" class="headerlink" title="Lantern"></a>Lantern</h4><p>如果平时需要用Google搜索一些资料，Lantern是一款必不可少的工具。</p>
<h4 id="xx-net"><a href="#xx-net" class="headerlink" title="xx-net"></a>xx-net</h4><p>如果平时需要用Google搜索一些资料，xx-net是一款必不可少的工具。</p>
<h4 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h4><h4 id="aMule"><a href="#aMule" class="headerlink" title="aMule"></a>aMule</h4><h4 id="TexStudio"><a href="#TexStudio" class="headerlink" title="TexStudio"></a>TexStudio</h4><h4 id="Nutstore"><a href="#Nutstore" class="headerlink" title="Nutstore"></a>Nutstore</h4><p>跨平台的云同步软件。</p>
<h4 id="Haroopad"><a href="#Haroopad" class="headerlink" title="Haroopad"></a>Haroopad</h4><p>跨平台Markdown编辑器。</p>
<h3 id="工具-Tools"><a href="#工具-Tools" class="headerlink" title="工具(Tools)"></a>工具(Tools)</h3><h4 id="KeePass"><a href="#KeePass" class="headerlink" title="KeePass"></a>KeePass</h4><p>KeePass是一款密码管理软件，我的密码有100多个。平时没法全部都记住的，所以只需要记住一个KeePass密码即可。KeePass可以同时安装在Windows、Linux上。</p>
<h4 id="albert"><a href="#albert" class="headerlink" title="albert"></a>albert</h4><p>Albert is a desktop agnostic launcher, inspired by the ease of use of OSX’ Alfred launcher. Its goals are usability and beauty, performance and extensability. It is written in C++ and based on the Qt framework.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[zookeeper总结]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/16/zookeeper-using/</url>
      <content type="html"><![CDATA[<h4 id="Zookeeper工作原理"><a href="#Zookeeper工作原理" class="headerlink" title="Zookeeper工作原理"></a>Zookeeper工作原理</h4><p>Zookeeper的核心是原子广播（Atomic Broadcast），这个机制保证了各个Server之间的同步。实现这个机制的协议叫做Zab(Zookeeper Atomic Broadcast)协议。Zab协议有两种模式，它们分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和leader的状态同步以后，恢复模式就结束了。状态同步保证了leader和Server具有相同的系统状态。</p>
<a id="more"></a>
<p>为了保证事务的顺序一致性，zookeeper采用了递增的事务id号（zxid）来标识事务。所有的提议（proposal）都在被提出的时候加上了zxid(ZooKeeper transaction id)。实现中zxid是一个64位的数字，它高32位是epoch用来标识leader关系是否改变，每次一个leader被选出来，它都会有一个新的epoch，标识当前属于那个leader的统治时期。低32位用于递增计数。</p>
<p>每个Server在工作过程中有三种状态：</p>
<ul>
<li><p>LOOKING：当前Server不知道leader是谁，正在搜寻</p>
</li>
<li><p>LEADING：当前Server即为选举出来的leader</p>
</li>
<li><p>FOLLOWING：leader已经选举出来，当前Server与之同步</p>
</li>
</ul>
<p>参考文章：</p>
<p><a href="http://blog.csdn.net/xlgen157387/article/details/53572760" target="_blank" rel="external">简要分析ZooKeeper基本原理及安装部署</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Maven使用]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/15/maven-using/</url>
      <content type="html"><![CDATA[<h4 id="Maven生命周期"><a href="#Maven生命周期" class="headerlink" title="Maven生命周期"></a>Maven生命周期</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">process-resources, compile, process-test-resources, <span class="built_in">test</span>-compile, <span class="built_in">test</span> and package</div></pre></td></tr></table></figure>
<h4 id="Maven发布包"><a href="#Maven发布包" class="headerlink" title="Maven发布包"></a>Maven发布包</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring JPA]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/14/spring-jpa/</url>
      <content type="html"><![CDATA[<p>JPA(Java Persistant API)。Spring Data JPA, part of the larger Spring Data family, makes it easy to easily implement JPA based repositories. This module deals with enhanced support for JPA based data access layers. It makes it easier to build Spring-powered applications that use data access technologies.</p>
<a id="more"></a>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring注入方式]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/14/spring-injection-type/</url>
      <content type="html"><![CDATA[<h4 id="Set注入"><a href="#Set注入" class="headerlink" title="Set注入"></a>Set注入</h4><p>这是最简单的注入方式，假设有一个SpringAction，类中需要实例化一个SpringDao对象，那么就可以定义一个private的SpringDao成员变量，然后创建SpringDao的set方法（这是ioc的注入入口）。</p>
<a id="more"></a>
<h4 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h4><p>这种方式的注入是指带有参数的构造函数注入，看下面的例子，我创建了两个成员变量SpringDao和User，但是并未设置对象的set方法，所以就不能支持第一种注入方式，这里的注入方式是在SpringAction的构造函数中注入，也就是说在创建SpringAction对象时要将SpringDao和User两个参数值传进来。</p>
<h4 id="静态工厂的方法注入"><a href="#静态工厂的方法注入" class="headerlink" title="静态工厂的方法注入"></a>静态工厂的方法注入</h4><h4 id="实例工厂的方法注入"><a href="#实例工厂的方法注入" class="headerlink" title="实例工厂的方法注入"></a>实例工厂的方法注入</h4><p><a href="http://blessht.iteye.com/blog/1162131" target="_blank" rel="external">Spring四种依赖注入方式</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC数据绑定流程]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/14/spring-mvc-databinding/</url>
      <content type="html"><![CDATA[<p>SpringMVC主框架将ServletRequest对象及目标方法的入参实例传递给WebDataBinderFactory实例，以创建DataBinder实例对象。DataBinder调用装配在SpringMVC上下文中的ConversionService组件进行数据类型转换、数据格式化工作。将Servlet中的请求信息填充到入参对象中。调用Validator组件对已经绑定了请求消息的入参对象进行数据合法性校验，并最终生成数据绑定结果。</p>
<a id="more"></a>

<h4 id="到DispatcherServlet"><a href="#到DispatcherServlet" class="headerlink" title="到DispatcherServlet"></a>到DispatcherServlet</h4><p>客户端的请求到达服务端，首先到DispatcherServlet(org.springframework.web.servlet)的doService方法中。DispatcherServlet通过HandlerMapping获得HandlerExecutionChain，然后获得HandlerAdapter。请求方法参数的处理、响应返回值的处理，分别是HandlerMethodArgumentResolver和HandlerMethodReturnValueHandler，这两个接口都是Spring3.1版本之后加入的。</p>
<h4 id="执行请求"><a href="#执行请求" class="headerlink" title="执行请求"></a>执行请求</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invokeForRequest</span><span class="params">(NativeWebRequest request, ModelAndViewContainer mavContainer,</span></span></div><div class="line">			Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</div><div class="line">	Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</div><div class="line">	<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">		logger.trace(<span class="string">"Invoking '"</span> + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +</div><div class="line">				<span class="string">"' with arguments "</span> + Arrays.toString(args));</div><div class="line">	&#125;</div><div class="line">	Object returnValue = doInvoke(args);</div><div class="line">	<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">		logger.trace(<span class="string">"Method ["</span> + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +</div><div class="line">				<span class="string">"] returned ["</span> + returnValue + <span class="string">"]"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> returnValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC返回Json]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/14/spring-mvc-return-json/</url>
      <content type="html"><![CDATA[<p>Spring MVC返回 json字符串的方式有很多种方法:</p>
<ul>
<li>直接 PrintWriter 输出</li>
<li>使用 JSP 视图</li>
<li>使用Spring内置的支持</li>
</ul>
<a id="more"></a>
<h4 id="PrintWriter输出"><a href="#PrintWriter输出" class="headerlink" title="PrintWriter输出"></a>PrintWriter输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回给前台一个字符串</span></div><div class="line"> <span class="meta">@RequestMapping</span>(params = <span class="string">"method=getJson1"</span>)</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getJson</span><span class="params">(@RequestParam(<span class="string">"userid"</span>)</span> String userid,@<span class="title">RequestHeader</span><span class="params">(<span class="string">"Accept-Encoding"</span>)</span> String encoding,HttpServletRequest request,PrintWriter printWriter) </span>&#123;</div><div class="line">  System.out.println(<span class="string">"通过注解在参数中取值 "</span>+userid);</div><div class="line">  System.out.println(<span class="string">"通过@RequestHeader获得的encoding "</span>+encoding);</div><div class="line">        printWriter.write(<span class="string">"&#123;key,1&#125;"</span>);</div><div class="line">        printWriter.flush();</div><div class="line">        printWriter.close();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h4><p>通过@ResponseBody直接返回对象,Spring MVC会自动把对象转化成Json,需要其他配置支持。@ResponseBody这个注解就是使用消息转换机制，最终通过json的转换器转换成json数据的。SpringMVC使用消息转换器实现请求报文和对象、对象和响应报文之间的自动转换。可以使用@RequestBody和@ResponseBody两个注解，分别完成请求报文到对象和对象到响应报文的转换，底层这种灵活的消息转换机制，就是Spring3.x中新引入的HttpMessageConverter即消息转换器机制。<br>    1、开启  <mvc:annotation-driven><br>    2、Jackson library 对应的jar必须加入到工程中<br>             3、方法的返回值必须添加 @ResponseBody</mvc:annotation-driven></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//把返回结果解析成json串返回到前台</span></div><div class="line"> <span class="meta">@RequestMapping</span>(params = <span class="string">"method=json"</span>)</div><div class="line"> <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">User <span class="title">passValue</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">  User user = <span class="keyword">new</span> User();</div><div class="line">  user.setUser(<span class="string">"aaaa"</span>);</div><div class="line">  user.setPass(<span class="string">"asfd"</span>);</div><div class="line">  <span class="keyword">return</span> user;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p> 注意：在使用@ResponseBody 返回json的时候，方法参数中一定不能他添加   PrintWriter printWriter。从流中，只能读取到原始的字符串报文，同样，我们往输出流中，也只能写原始的字符。而在java世界中，处理业务逻辑，都是以一个个有业务意义的对象为处理维度的，那么在报文到达SpringMVC和从SpringMVC出去，都存在一个字符串到java对象的阻抗问题。这一过程，不可能由开发者手工转换。我们知道，在Struts2中，采用了OGNL（Object-Graph Navigation Language）来应对这个问题，而在SpringMVC中，它是HttpMessageConverter机制。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Interview面试题]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/14/interview-question/</url>
      <content type="html"><![CDATA[<p>平时并未注意许多细节和实质性的东西，许多原理的方面非常欠缺，面试后总结如下。</p>
<a id="more"></a>
<h4 id="Java中如何确保不再使用的资源被正确的关闭"><a href="#Java中如何确保不再使用的资源被正确的关闭" class="headerlink" title="Java中如何确保不再使用的资源被正确的关闭"></a>Java中如何确保不再使用的资源被正确的关闭</h4><p>在jdk1.6之前，应该把close()放在finally块中，以确保资源的正确释放。如果使用jdk1.7以上的版本，推荐使用try-with-resources语句。</p>
<h4 id="类的构造顺序"><a href="#类的构造顺序" class="headerlink" title="类的构造顺序"></a>类的构造顺序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @Author: jiangxiaoqiang</div><div class="line"> * Created by 12/17/16 on 8:26 PM.</div><div class="line"> */</div><div class="line">public class ClassConstructSquence &#123;</div><div class="line"></div><div class="line">    &#123;</div><div class="line">        System.out.println(&quot;Class ClassConstructSquence code block&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static &#123;</div><div class="line">        System.out.println(&quot;class ClassConstructSquence static code block&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ClassConstructSquence()&#123;</div><div class="line">        this(null);</div><div class="line">        System.out.println(&quot;class ClassConstructSquence non-param code block&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ClassConstructSquence(String a)&#123;</div><div class="line">        System.out.println(&quot;class ClassConstructSquence param code block&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class ClassConstructSquenceB extends ClassConstructSquence &#123;</div><div class="line">    &#123;</div><div class="line">        System.out.println(&quot;Class ClassConstructSquenceB code block&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static &#123;</div><div class="line">        System.out.println(&quot;class ClassConstructSquenceB static code block&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ClassConstructSquenceB() &#123;</div><div class="line">        this(null);</div><div class="line">        System.out.println(&quot;class ClassConstructSquenceB non-param code block&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ClassConstructSquenceB(String a) &#123;</div><div class="line">        System.out.println(&quot;class ClassConstructSquenceB param code block&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ClassConstructSquenceB b = new ClassConstructSquenceB();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class ClassConstructSquence static code block</div><div class="line">class ClassConstructSquenceB static code block</div><div class="line">Class ClassConstructSquence code block</div><div class="line">class ClassConstructSquence param code block</div><div class="line">class ClassConstructSquence non-param code block</div><div class="line">Class ClassConstructSquenceB code block</div><div class="line">class ClassConstructSquenceB param code block</div><div class="line">class ClassConstructSquenceB non-param code block</div></pre></td></tr></table></figure>
<p>可以总结Java类中的构造顺序如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">父类--静态变量</div><div class="line">父类--静态初始化块</div><div class="line">子类--静态变量</div><div class="line">子类--静态初始化块</div><div class="line">父类--变量</div><div class="line">父类--初始化块</div><div class="line">父类--构造器</div><div class="line">子类--变量</div><div class="line">子类--初始化块</div><div class="line">子类--构造器</div></pre></td></tr></table></figure>
<h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">12</span>;</div><div class="line">        <span class="comment">//输出为-120</span></div><div class="line">        System.out.print(i += i -= i *= i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>计算过程参考这里：</p>
<p><a href="http://stackoverflow.com/questions/41144042/why-the-output-is-120/41144150#41144150" target="_blank" rel="external">Why the output is -120?</a></p>
<p>#### </p>
<p>synchronized是对类的当前实例进行加锁，防止其他线程同时访问该类的该实例的所有synchronized块，注意这里是“类的当前实例”，类的两个不同实例就没有这种约束了。那么static synchronized恰好就是要控制类的所有实例的访问了，static synchronized是限制线程同时访问jvm中该类的所有实例同时访问对应的代码快。实际上，在类中某方法或某代码块中有synchronized，那么在生成一个该类实例后，该类也就有一个监视快，放置线程并发访问改实例synchronized保护快，而static synchronized则是所有该类的实例公用一个监视快了，也就是两个的区别了,也就是synchronized相当于this.synchronized，而static synchronized相当于Something.synchronized。</p>
<p>synchronized针对同一个实例不能访问，针对不同的实例可以同时访问。static synchronized针对所有的实例均不能同时访问。synchronized本来就是修饰方法的，后来引申出synchronized修饰代码块，只是为了可以更精确的控制冲突限制的访问区域，使得表现更加高效率。synchronized方法只能锁定现阶段的对象，而synchronized区块可以锁定指定的对象，指定的对象直接跟在synchronized()括号之后。此外，synchronized关键字是不能继承的，也就是说，基类的方法synchronized f(){} 在继承类中并不自动是synchronized f(){}，而是变成了f(){}。继承类需要你显式的指定它的某个方法为synchronized方法。还有synchronized不能被继承，继承时子类的覆盖方法必须显示定义成synchronized。</p>
<p>除了方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。用法是: synchronized(object){/<em>区块</em>/}，它的作用域是object对象。当一个线程执行时，将object对象锁住，另一个线程就不能执行对应的块。synchronized方法实际上等同于用一个synchronized块包住方法中的所有语句，然后在synchronized块的括号中传入this关键字。当然，如果是静态方法，需要锁定的则是class对象。可能一个方法中只有几行代码会涉及到线程同步问题，所以synchronized块比synchronized方法更加细粒度地控制了多个线程的访问，只有synchronized块中的内容不能同时被多个线程所访问，方法中的其他语句仍然可以同时被多个线程所访问（包括synchronized块之前的和之后的）。</p>
<h4 id="Java值传递"><a href="#Java值传递" class="headerlink" title="Java值传递"></a>Java值传递</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaPramPassing</span> </span>&#123;</div><div class="line">    String str = <span class="keyword">new</span> String(<span class="string">"good"</span>);</div><div class="line">    <span class="keyword">char</span>[] ch = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        JavaPramPassing javaPramPassing = <span class="keyword">new</span> JavaPramPassing();</div><div class="line">        javaPramPassing.change(javaPramPassing.str,javaPramPassing.ch);</div><div class="line">        System.out.println(javaPramPassing.str);<span class="comment">//good</span></div><div class="line">        System.out.println(javaPramPassing.ch);<span class="comment">//gbc</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String str, <span class="keyword">char</span>[] ch)</span> </span>&#123;</div><div class="line">        str = <span class="string">"test ok"</span>;</div><div class="line">        ch[<span class="number">0</span>] = <span class="string">'g'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Java参数，不管是原始类型还是引用类型，传递的都是副本(有另外一种说法是传值，但是说传副本更好理解吧，传值通常是相对传址而言)。要特殊考虑String，以及Integer、Double等几个基本类型包装类，它们都是immutable类型，因为没有提供自身修改的函数，每次操作都是新生成一个对象，所以要特殊对待，可以认为是和基本数据类型相似，传值(Pass by Value)操作。</p>
<ul>
<li>如果参数类型是原始类型，那么传过来的就是这个参数的一个副本，也就是这个原始参数的值，这个跟之前所谈的传值是一样的。如果在函数中改变了副本的 值不会改变原始的值.</li>
<li>如果参数类型是引用类型，那么传过来的就是这个引用参数的副本，这个副本存放的是参数的地址。如果在函数中没有改变这个副本的地址，而是改变了地址中的 值，那么在函数内的改变会影响到传入的参数。如果在函数中改变了副本的地址，如new一个，那么副本就指向了一个新的地址，此时传入的参数还是指向原来的 地址，所以不会改变参数的值。</li>
</ul>
<h4 id="volatile关键字作用"><a href="#volatile关键字作用" class="headerlink" title="volatile关键字作用"></a>volatile关键字作用</h4><p>在Java内存模型中，有Main Memory，每个线程也有自己的Memory (例如寄存器)。为了性能，一个线程会在自己的Memory中保持要访问的变量的副本。这样就会出现同一个变量在某个瞬间，在一个线程的Memory中的值可能与另外一个线程Memory中的值，或者Main Memory中的值不一致的情况。</p>
<p>一个变量声明为volatile，就意味着这个变量是随时会被其他线程修改的，因此不能将它cache在线程memory中。Volatile 变量具有 synchronized 的可见性特性，但是不具备原子性。这就是说线程能够自动发现 volatile 变量的最新值。出于简易性或可伸缩性的考虑，倾向于使用 volatile 变量而不是锁。当使用 volatile 变量而非锁时，某些习惯用法（idiom）更加易于编码和阅读。此外，volatile 变量不会像锁那样造成线程阻塞，因此也很少造成可伸缩性问题。在某些情况下，如果读操作远远大于写操作，volatile 变量还可以提供优于锁的性能优势。</p>
<ul>
<li><p>状态标志（Status Flags）</p>
</li>
<li><p>一次性安全发布（One-time Safe Publication）</p>
</li>
</ul>
<p>在缺乏同步的情况下，可能会遇到某个对象引用的更新值（由另一个线程写入）和该对象状态的旧值同时存在。这就是造成著名的双重检查锁定（double-checked-locking）问题的根源，其中对象引用在没有同步的情况下进行读操作，产生的问题是您可能会看到一个更新的引用，但是仍然会通过该引用看到不完全构造的对象。</p>
<ul>
<li>独立观察（independent observation）</li>
</ul>
<p>安全使用 volatile 的另一种简单模式是：定期 “发布” 观察结果供程序内部使用。【例如】假设有一种环境传感器能够感觉环境温度。一个后台线程可能会每隔几秒读取一次该传感器，并更新包含当前文档的 volatile 变量。然后，其他线程可以读取这个变量，从而随时能够看到最新的温度值。使用该模式的另一种应用程序就是收集程序的统计信息。</p>
<ul>
<li><p>“volatile bean” 模式</p>
</li>
<li><p>开销较低的“读－写锁”策略</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[抽象类和接口区别]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/14/abstract-and-interface-diff/</url>
      <content type="html"><![CDATA[<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">抽象类</th>
<th>接口</th>
</tr>
</thead>
<tbody>
<tr>
<td>默认的方法实现</td>
<td style="text-align:center">它可以有默认的方法实现</td>
<td>接口完全是抽象的。它根本不存在方法的实现</td>
</tr>
<tr>
<td>实现</td>
<td style="text-align:center">子类使用extends关键字来继承抽象类。如果子类不是抽象类的话，它需要提供抽象类中所有声明的方法的实现。</td>
<td>子类使用关键字implements来实现接口。它需要提供接口中所有声明的方法的实现</td>
</tr>
<tr>
<td>构造器</td>
<td style="text-align:center">抽象类可以有构造器</td>
<td>接口不能有构造器</td>
</tr>
<tr>
<td>与正常Java类的区别</td>
<td style="text-align:center">除了你不能实例化抽象类之外，它和普通Java类没有任何区别</td>
<td>接口是完全不同的类型</td>
</tr>
<tr>
<td>访问修饰符</td>
<td style="text-align:center">抽象方法可以有public、protected和default这些修饰符</td>
<td>接口方法默认修饰符是public。你不可以使用其它修饰符。</td>
</tr>
<tr>
<td>main方法</td>
<td style="text-align:center">抽象方法可以有main方法并且我们可以运行它</td>
<td>接口没有main方法，因此我们不能运行它。</td>
</tr>
<tr>
<td>多继承</td>
<td style="text-align:center">抽象方法可以继承一个类和实现多个接口</td>
<td>接口只可以继承一个或多个其它接口</td>
</tr>
<tr>
<td>速度</td>
<td style="text-align:center">它比接口速度要快</td>
<td>接口是稍微有点慢的，因为它需要时间去寻找在类中实现的方法。</td>
</tr>
<tr>
<td>添加新方法</td>
<td style="text-align:center">如果你往抽象类中添加新的方法，你可以给它提供默认的实现。因此你不需要改变你现在的代码。</td>
<td>如果你往接口中添加方法，那么你必须改变实现该接口的类。</td>
</tr>
</tbody>
</table>
<h4 id="什么时候使用抽象类和接口"><a href="#什么时候使用抽象类和接口" class="headerlink" title="什么时候使用抽象类和接口"></a>什么时候使用抽象类和接口</h4><p>如果你拥有一些方法并且想让它们中的一些有默认实现，那么使用抽象类吧。<br>如果你想实现多重继承，那么你必须使用接口。由于Java不支持多继承，子类不能够继承多个类，但可以实现多个接口。因此你就可以使用接口来解决它。<br>如果基本功能在不断改变，那么就需要使用抽象类。如果不断改变基本功能并且使用接口，那么就需要改变所有实现了该接口的类。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/14/algorithm/</url>
      <content type="html"><![CDATA[<h4 id="汉诺塔算法"><a href="#汉诺塔算法" class="headerlink" title="汉诺塔算法"></a>汉诺塔算法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hannoi</span><span class="params">(<span class="keyword">int</span> n, String from, String buffer, String to)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</div><div class="line">        System.out.println(<span class="string">"Move disk "</span> + n + <span class="string">" from "</span> + from + <span class="string">" to "</span> + to);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        hannoi(n - <span class="number">1</span>, from, to, buffer);</div><div class="line">        System.out.println(<span class="string">"Move disk "</span> + n + <span class="string">" from "</span> + from + <span class="string">" to "</span> + to);</div><div class="line">        hannoi(n - <span class="number">1</span>, buffer, from, to);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    hannoi(<span class="number">3</span>, <span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>快速排序（英语：Quicksort），又称划分交换排序（partition-exchange sort），一种排序算法，最早由东尼·霍尔提出。在平均状况下，排序n个项目要Ο(n log n)次比较。在最坏状况下则需要Ο(n2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他Ο(n log n)算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p>
<p>快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。<br>步骤为：</p>
<ol>
<li>从数列中挑出一个元素，称为”基准”（pivot）</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。<br>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] arr;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> temp = arr[x];</div><div class="line">        arr[x] = arr[y];</div><div class="line">        arr[y] = temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick_sort_recursive</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (start &gt;= end)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> mid = arr[end];</div><div class="line">        <span class="keyword">int</span> left = start, right = end - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">            <span class="keyword">while</span> (arr[left] &lt; mid &amp;&amp; left &lt; right)</div><div class="line">                left++;</div><div class="line">            <span class="keyword">while</span> (arr[right] &gt;= mid &amp;&amp; left &lt; right)</div><div class="line">                right--;</div><div class="line">            swap(left, right);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (arr[left] &gt;= arr[end]) &#123;</div><div class="line">            swap(left, end);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            left++;</div><div class="line">        &#125;</div><div class="line">        quick_sort_recursive(start, left - <span class="number">1</span>);</div><div class="line">        quick_sort_recursive(left + <span class="number">1</span>, end);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arrin)</span> </span>&#123;</div><div class="line">        arr = arrin;</div><div class="line">        quick_sort_recursive(<span class="number">0</span>, arr.length - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>&#125;;</div><div class="line">        sort(array);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line">            <span class="keyword">int</span> sortedElement = array[i];</div><div class="line">            System.out.println(sortedElement);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java内存模型(Memory Model)]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/14/java-memory-model/</url>
      <content type="html"><![CDATA[<p>JVM管理的内存区域(Memory Area)包括以下几个区域：</p>
<a id="more"></a>
<img src="/2016/12/14/java-memory-model/jvm-memory-area.png" alt="JVM内存区域" title="JVM内存区域">
<h4 id="栈区-Stack-Area"><a href="#栈区-Stack-Area" class="headerlink" title="栈区(Stack Area)"></a>栈区(Stack Area)</h4><p>栈分为Java虚拟机栈和本地方法栈</p>
<h5 id="Java虚拟机栈-Java-Virtual-Machine-Stack"><a href="#Java虚拟机栈-Java-Virtual-Machine-Stack" class="headerlink" title="Java虚拟机栈(Java Virtual Machine Stack)"></a>Java虚拟机栈(Java Virtual Machine Stack)</h5><p>重点是Java虚拟机栈，它是线程私有的，生命周期与线程相同。每个方法执行都会创建一个栈帧，用于存放局部变量表，操作栈，动态链接，方法出口等。每个方法从被调用，直到被执行完。对应着一个栈帧在虚拟机中从入栈到出栈的过程。通常说的栈就是指局部变量表部分，存放编译期间可知的8种基本数据类型，及对象引用和指令地址。局部变量表是在编译期间完成分配，当进入一个方法时，这个栈中的局部变量分配内存大小是确定的。会有两种异常StackOverFlowError和 OutOfMemoneyError。当线程请求栈深度大于虚拟机所允许的深度就会抛出StackOverFlowError错误；虚拟机栈动态扩展，当扩展无法申请到足够的内存空间时候，抛出OutOfMemoneyError。</p>
<h5 id="本地方法栈-Local-Methond-Stack"><a href="#本地方法栈-Local-Methond-Stack" class="headerlink" title="本地方法栈(Local Methond Stack)"></a>本地方法栈(Local Methond Stack)</h5><p>本地方法栈 为虚拟机使用到本地方法服务（native）</p>
<h4 id="堆区-Heap-Area"><a href="#堆区-Heap-Area" class="headerlink" title="堆区(Heap Area)"></a>堆区(Heap Area)</h4><ul>
<li>堆被所有线程共享区域，在虚拟机启动时创建，唯一目的存放对象实例。</li>
<li>堆区是gc的主要区域，通常情况下分为两个区块年轻代和年老代。更细一点年轻代又分为Eden区最要放新创建对象，From survivor 和 To survivor 保存gc后幸存下的对象，默认情况下各自占比 8:1:1。不过很多文章介绍分为3个区块，把方法区算着为永久代。这大概是基于Hotspot虚拟机划分， 然后比如IBM j9就不存在永久代概论。不管怎么分区，都是存放对象实例。会有异 常OutOfMemoneyError</li>
</ul>
<h4 id="方法区-Method-Area"><a href="#方法区-Method-Area" class="headerlink" title="方法区(Method Area)"></a>方法区(Method Area)</h4><p>被所有线程共享区域，用于存放已被虚拟机加载的类信息，常量，静态变量等数据。被Java虚拟机描述为堆的一个逻辑部分。习惯是也叫它永久代（permanment generation），垃圾回收很少光顾这个区域，不过也是需要回收的，主要针对常量池回收，类型卸载。常量池用于存放编译期生成的各种字节码和符号引用，常量池具有一定的动态性，里面可以存放编译期生成的常量；运行期间的常量也可以添加进入常量池中，比如string的intern()方法。</p>
<h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>当前线程所执行的行号指示器。通过改变计数器的值来确定下一条指令，比如循环，分支，跳转，异常处理，线程恢复等都是依赖计数器来完成。Java虚拟机多线程是通过线程轮流切换并分配处理器执行时间的方式实现的。为了线程切换能恢复到正确的位置，每条线程都需要一个独立的程序计数器，所以它是线程私有的。唯一一块Java虚拟机没有规定任何OutofMemoryError的区块。jvm分区大致就这个块，具体里面还有很多细节，及其各个模块工作的算法都很复杂，这里只是对分区进行简单介绍，掌握一些基本的知识点。</p>
<p>参考文章：</p>
<p><a href="http://blog.csdn.net/honjane/article/details/51542183" target="_blank" rel="external">JVM内存模型及分区</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Netty原理]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/13/netty-theory/</url>
      <content type="html"><![CDATA[<p>Netty是一个高性能 事件驱动的异步的非堵塞的IO(NIO)框架，用于建立TCP等底层的连接，基于Netty可以建立高性能的Http服务器。支持HTTP、 WebSocket 、Protobuf、 Binary TCP |和UDP，Netty已经被很多高性能项目作为其Socket底层基础，如HornetQ Infinispan Vert.x<br>Play Framework Finangle和 Cassandra。其竞争对手是：Apache MINA和 Grizzly。</p>
<a id="more"></a>
<p>作为当前最流行的NIO框架，Netty在互联网领域、大数据分布式计算领域、游戏行业、通信行业等获得了广泛的应用，一些业界著名的开源组件也基于Netty的NIO框架构建。</p>
<h4 id="异步非阻塞通信"><a href="#异步非阻塞通信" class="headerlink" title="异步非阻塞通信"></a>异步非阻塞通信</h4><p>在IO编程过程中，当需要同时处理多个客户端接入请求时，可以利用多线程或者IO多路复用技术进行处理。IO多路复用技术通过把多个IO的阻塞复用到同一个select的阻塞上，从而使得系统在单线程的情况下可以同时处理多个客户端请求。与传统的多线程/多进程模型比，I/O多路复用的最大优势是系统开销小，系统不需要创建新的额外进程或者线程，也不需要维护这些进程和线程的运行，降低了系统的维护工作量，节省了系统资源。</p>
<p>JDK1.4提供了对非阻塞IO（NIO）的支持，JDK1.5_update10版本使用epoll替代了传统的select/poll，极大的提升了NIO通信的性能。</p>
<h4 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h4><p>Netty的“零拷贝”主要体现在如下三个方面：</p>
<p>1) Netty的接收和发送ByteBuffer采用DIRECT BUFFERS，使用堆外直接内存进行Socket读写，不需要进行字节缓冲区的二次拷贝。如果使用传统的堆内存（HEAP BUFFERS）进行Socket读写，JVM会将堆内存Buffer拷贝一份到直接内存中，然后才写入Socket中。相比于堆外直接内存，消息在发送过程中多了一次缓冲区的内存拷贝。</p>
<p>2) Netty提供了组合Buffer对象，可以聚合多个ByteBuffer对象，用户可以像操作一个Buffer那样方便的对组合Buffer进行操作，避免了传统通过内存拷贝的方式将几个小Buffer合并成一个大的Buffer。</p>
<p>3) Netty的文件传输采用了transferTo方法，它可以直接将文件缓冲区的数据发送到目标Channel，避免了传统通过循环write方式导致的内存拷贝问题。</p>
<h4 id="内存池"><a href="#内存池" class="headerlink" title="内存池"></a>内存池</h4><h4 id="高效的Reactor线程模型"><a href="#高效的Reactor线程模型" class="headerlink" title="高效的Reactor线程模型"></a>高效的Reactor线程模型</h4><h4 id="无锁化的串行设计理念"><a href="#无锁化的串行设计理念" class="headerlink" title="无锁化的串行设计理念"></a>无锁化的串行设计理念</h4><h4 id="高效的并发编程"><a href="#高效的并发编程" class="headerlink" title="高效的并发编程"></a>高效的并发编程</h4><p>参考文章：</p>
<p><a href="http://www.infoq.com/cn/articles/netty-high-performance" target="_blank" rel="external">Netty系列之Netty高性能之道</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis与Memcached区别]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/13/redis-memcached-diff/</url>
      <content type="html"><![CDATA[<h4 id="传统MySQL-Memcached架构遇到的问题"><a href="#传统MySQL-Memcached架构遇到的问题" class="headerlink" title="传统MySQL+ Memcached架构遇到的问题"></a>传统MySQL+ Memcached架构遇到的问题</h4><p>实际MySQL是适合进行海量数据存储的，通过Memcached将热点数据加载到cache，加速访问，很多公司都曾经使用过这样的架构，但随着业务数据量的不断增加，和访问量的持续增长，我们遇到了很多问题：</p>
<a id="more"></a>
<ol>
<li>MySQL需要不断进行拆库拆表，Memcached也需不断跟着扩容，扩容和维护工作占据大量开发时间。</li>
<li>Memcached与MySQL数据库数据一致性问题。</li>
<li>Memcached数据命中率低或down机，大量访问直接穿透到DB，MySQL无法支撑。</li>
<li>跨机房cache同步问题。</li>
</ol>
<h4 id="众多NoSQL百花齐放，如何选择"><a href="#众多NoSQL百花齐放，如何选择" class="headerlink" title="众多NoSQL百花齐放，如何选择"></a>众多NoSQL百花齐放，如何选择</h4><p>　　最近几年，业界不断涌现出很多各种各样的NoSQL产品（MongoDB、Cassandra、CouchDB、Redis、Hadoop HBase、MemcacheDB），那么如何才能正确地使用好这些产品，最大化地发挥其长处，是我们需要深入研究和思考的问题，实际归根结底最重要的是了解这些产品的定位，并且了解到每款产品的tradeoffs，在实际应用中做到扬长避短，总体上这些NoSQL主要用于解决以下几种问题。</p>
<ol>
<li>少量数据存储，高速读写访问。此类产品通过数据全部in-momery 的方式来保证高速访问，同时提供数据落地的功能，实际这正是Redis最主要的适用场景。</li>
<li>海量数据存储，分布式系统支持，数据一致性保证，方便的集群节点添加/删除。</li>
<li>这方面最具代表性的是dynamo和bigtable 2篇论文所阐述的思路。前者是一个完全无中心的设计，节点之间通过gossip方式传递集群信息，数据保证最终一致性，后者是一个中心化的方案设计，通过类似一个分布式锁服务来保证强一致性,数据写入先写内存和redo log，然后定期compat归并到磁盘上，将随机写优化为顺序写，提高写入性能。</li>
<li>Schema free，auto-sharding等。比如目前常见的一些文档数据库都是支持schema-free的，直接存储json格式数据，并且支持auto-sharding等功能，比如MongoDB。</li>
</ol>
<p>面对这些不同类型的NoSQL产品,我们需要根据我们的业务场景选择最合适的产品。<br>　　Redis适用场景，如何正确的使用<br>　　前面已经分析过，Redis最适合所有数据in-momory的场景，虽然Redis也提供持久化功能，但实际更多的是一个disk-backed的功能，跟传统意义上的持久化有比较大的差别，那么可能大家就会有疑问，似乎Redis更像一个加强版的Memcached，那么何时使用Memcached,何时使用Redis呢?</p>
<p>如果简单地比较Redis与Memcached的区别，大多数都会得到以下观点：</p>
<ol>
<li>Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>
<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>
<li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li>
</ol>
<p>抛开这些，可以深入到Redis内部构造去观察更加本质的区别，理解Redis的设计。</p>
<p>在Redis中，并不是所有的数据都一直存储在内存中的。这是和Memcached相比一个最大的区别。Redis只会缓存所有的 key的信息，如果Redis发现内存的使用量超过了某一个阀值，将触发swap的操作，Redis根据“swappability = age*log(size_in_memory)”计 算出哪些key对应的value需要swap到磁盘。然后再将这些key对应的value持久化到磁盘中，同时在内存中清除。这种特性使得Redis可以 保持超过其机器本身内存大小的数据。当然，机器本身的内存必须要能够保持所有的key，毕竟这些数据是不会进行swap操作的。同时由于Redis将内存 中的数据swap到磁盘中的时候，提供服务的主线程和进行swap操作的子线程会共享这部分内存，所以如果更新需要swap的数据，Redis将阻塞这个 操作，直到子线程完成swap操作后才可以进行修改。</p>
<p>使用Redis特有内存模型前后的情况对比：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">VM off: 300k keys, 4096 bytes values: 1.3G used</div><div class="line">VM on:  300k keys, 4096 bytes values: 73M used</div><div class="line">VM off: 1 million keys, 256 bytes values: 430.12M used</div><div class="line">VM on:  1 million keys, 256 bytes values: 160.09M used</div><div class="line">VM on:  1 million keys, values as large as you want, still: 160.09M used</div></pre></td></tr></table></figure>
<p>当 从Redis中读取数据的时候，如果读取的key对应的value不在内存中，那么Redis就需要从swap文件中加载相应数据，然后再返回给请求方。 这里就存在一个I/O线程池的问题。在默认的情况下，Redis会出现阻塞，即完成所有的swap文件加载后才会相应。这种策略在客户端的数量较小，进行 批量操作的时候比较合适。但是如果将Redis应用在一个大型的网站应用程序中，这显然是无法满足大并发的情况的。所以Redis运行我们设置I/O线程 池的大小，对需要从swap文件中加载相应数据的读取请求进行并发操作，减少阻塞的时间。</p>
<p>如果希望在海量数据的环境中使用好Redis，我相信理解Redis的内存设计和阻塞的情况是不可缺少的。</p>
<p>补充的知识点：<br>memcached和redis的比较<br>1 网络IO模型<br>　　Memcached是多线程，非阻塞IO复用的网络模型，分为监听主线程和worker子线程，监听线程监听网络连接，接受请求后，将连接描述字pipe 传递给worker线程，进行读写IO, 网络层使用libevent封装的事件库，多线程模型可以发挥多核作用，但是引入了cache coherency和锁的问题，比如，Memcached最常用的stats 命令，实际Memcached所有操作都要对这个全局变量加锁，进行计数等工作，带来了性能损耗。</p>
<p>(Memcached网络IO模型)<br>　　Redis使用单线程的IO复用模型，自己封装了一个简单的AeEvent事件处理框架，主要实现了epoll、kqueue和select，对于单纯只有IO操作来说，单线程可以将速度优势发挥到最大，但是Redis也提供了一些简单的计算功能，比如排序、聚合等，对于这些操作，单线程模型实际会严重影响整体吞吐量，CPU计算过程中，整个IO调度都是被阻塞住的。<br>　　2.内存管理方面<br>　　Memcached使用预分配的内存池的方式，使用slab和大小不同的chunk来管理内存，Item根据大小选择合适的chunk存储，内存池的方式可以省去申请/释放内存的开销，并且能减小内存碎片产生，但这种方式也会带来一定程度上的空间浪费，并且在内存仍然有很大空间时，新的数据也可能会被剔除，原因可以参考Timyang的文章：<a href="http://timyang.net/data/Memcached-lru-evictions/" target="_blank" rel="external">http://timyang.net/data/Memcached-lru-evictions/</a><br>　　Redis使用现场申请内存的方式来存储数据，并且很少使用free-list等方式来优化内存分配，会在一定程度上存在内存碎片，Redis跟据存储命令参数，会把带过期时间的数据单独存放在一起，并把它们称为临时数据，非临时数据是永远不会被剔除的，即便物理内存不够，导致swap也不会剔除任何非临时数据(但会尝试剔除部分临时数据)，这点上Redis更适合作为存储而不是cache。<br>　　3.数据一致性问题<br>　　Memcached提供了cas命令，可以保证多个并发访问操作同一份数据的一致性问题。 Redis没有提供cas 命令，并不能保证这点，不过Redis提供了事务的功能，可以保证一串 命令的原子性，中间不会被任何操作打断。<br>　　4.存储方式及其它方面<br>　　Memcached基本只支持简单的key-value存储，不支持枚举，不支持持久化和复制等功能<br>　　Redis除key/value之外，还支持list,set,sorted set,hash等众多数据结构，提供了KEYS<br>　　进行枚举操作，但不能在线上使用，如果需要枚举线上数据，Redis提供了工具可以直接扫描其dump文件，枚举出所有数据，Redis还同时提供了持久化和复制等功能。<br>　　5.关于不同语言的客户端支持<br>　　在不同语言的客户端方面，Memcached和Redis都有丰富的第三方客户端可供选择，不过因为Memcached发展的时间更久一些，目前看在客户端支持方面，Memcached的很多客户端更加成熟稳定，而Redis由于其协议本身就比Memcached复杂，加上作者不断增加新的功能等，对应第三方客户端跟进速度可能会赶不上，有时可能需要自己在第三方客户端基础上做些修改才能更好的使用。<br>　　根据以上比较不难看出，当我们不希望数据被踢出，或者需要除key/value之外的更多数据类型时，或者需要落地功能时，使用Redis比使用Memcached更合适。<br>　　关于Redis的一些周边功能<br>　　Redis除了作为存储之外还提供了一些其它方面的功能，比如聚合计算、pubsub、scripting等，对于此类功能需要了解其实现原理，清楚地了解到它的局限性后，才能正确的使用，比如pubsub功能，这个实际是没有任何持久化支持的，消费方连接闪断或重连之间过来的消息是会全部丢失的，又比如聚合计算和scripting等功能受Redis单线程模型所限，是不可能达到很高的吞吐量的，需要谨慎使用。<br>　　总的来说Redis作者是一位非常勤奋的开发者，可以经常看到作者在尝试着各种不同的新鲜想法和思路，针对这些方面的功能就要求我们需要深入了解后再使用。</p>
<p>总结：</p>
<ol>
<li>Redis使用最佳方式是全部数据in-memory。</li>
<li>Redis更多场景是作为Memcached的替代者来使用。</li>
<li>当需要除key/value之外的更多数据类型支持时，使用Redis更合适。</li>
<li>当存储的数据不能被剔除时，使用Redis更合适。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis集群(Redis Cluster)]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/13/redis-cluster/</url>
      <content type="html"><![CDATA[<p>在非官方集群解决方案中，物理上把数据“分片”（sharding）存储在多个Redis实例，一般情况下，每一“片”是一个Redis实例。</p>
<a id="more"></a>
<h4 id="客户端分片"><a href="#客户端分片" class="headerlink" title="客户端分片"></a>客户端分片</h4><h4 id="代理分片"><a href="#代理分片" class="headerlink" title="代理分片"></a>代理分片</h4><h5 id="Twemproxy"><a href="#Twemproxy" class="headerlink" title="Twemproxy"></a>Twemproxy</h5><p>Twemproxy是一种代理分片机制，由Twitter开源。Twemproxy作为代理，可接受来自多个程序的访问，按照路由规则，转发给后台的各个Redis服务器，再原路返回。</p>
<p>这个方案顺理成章地解决了单个Redis实例承载能力的问题。当然，Twemproxy本身也是单点，需要用Keepalived做高可用方案。</p>
<p>我想很多人都应该感谢Twemproxy，这么些年来，应用范围最广、稳定性最高、最久经考验的分布式中间件，应该就是它了。只是，他还有诸多不方便之处。</p>
<p>Twemproxy最大的痛点在于，无法平滑地扩容/缩容。</p>
<p>这样导致运维同学非常痛苦：业务量突增，需增加Redis服务器；业务量萎缩，需要减少Redis服务器。但对Twemproxy而言，基本上都很难操作（那是一种锥心的、纠结的痛……）。</p>
<p>或者说，Twemproxy更加像服务器端静态sharding。有时为了规避业务量突增导致的扩容需求，甚至被迫新开一个基于Twemproxy的Redis集群。</p>
<p>Twemproxy另一个痛点是，运维不友好，甚至没有控制面板。</p>
<h4 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h4><h4 id="Codis-Cluster"><a href="#Codis-Cluster" class="headerlink" title="Codis Cluster"></a>Codis Cluster</h4><p>参考资料：</p>
<p><a href="http://www.infoq.com/cn/articles/effective-ops-part-03" target="_blank" rel="external">高效运维最佳实践（03）：Redis集群技术及Codis实践</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HBase主键设计]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/13/hbase-rowkey-design/</url>
      <content type="html"><![CDATA[<p>HBase是一个分布式的、面向列的数据库，它和一般关系型数据库的最大区别是：HBase很适合于存储非结构化的数据，还有就是它基于列的而不是基于行的模式。</p>
<a id="more"></a>
<p>既然HBase是采用KeyValue的列存储，那Rowkey就是KeyValue的Key了，表示唯一一行。Rowkey也是一段二进制码流，最大长度为64KB，内容可以由使用的用户自定义。数据加载时，一般也是根据Rowkey的二进制序由小到大进行的。</p>
<p>HBase是根据Rowkey来进行检索的，系统通过找到某个Rowkey (或者某个 Rowkey 范围)所在的Region，然后将查询数据的请求路由到该Region获取数据。HBase的检索支持3种方式：</p>
<p>（1） 通过单个Rowkey访问，即按照某个Rowkey键值进行get操作，这样获取唯一一条记录；</p>
<p>（2） 通过Rowkey的range进行scan，即通过设置startRowKey和endRowKey，在这个范围内进行扫描。这样可以按指定的条件获取一批记录；</p>
<p>（3） 全表扫描，即直接扫描整张表中所有行记录。</p>
<p>HBASE按单个Rowkey检索的效率是很高的，耗时在1毫秒以下，每秒钟可获取1000~2000条记录，不过非key列的查询很慢。</p>
<h4 id="Rowkey长度原则"><a href="#Rowkey长度原则" class="headerlink" title="Rowkey长度原则"></a>Rowkey长度原则</h4><p>Rowkey是一个二进制码流，Rowkey的长度被很多开发者建议说设计在10~100个字节，不过建议是越短越好，不要超过16个字节。</p>
<p>原因如下：</p>
<p>（1）数据的持久化文件HFile中是按照KeyValue存储的，如果Rowkey过长比如100个字节，1000万列数据光Rowkey就要占用100*1000万=10亿个字节，将近1G数据，这会极大影响HFile的存储效率；</p>
<p>（2）MemStore将缓存部分数据到内存，如果Rowkey字段过长内存的有效利用率会降低，系统将无法缓存更多的数据，这会降低检索效率。因此Rowkey的字节长度越短越好。</p>
<p>（3）目前操作系统是都是64位系统，内存8字节对齐。控制在16个字节，8字节的整数倍利用操作系统的最佳特性。</p>
<h4 id="Rowkey散列原则"><a href="#Rowkey散列原则" class="headerlink" title="Rowkey散列原则"></a>Rowkey散列原则</h4><p>如果Rowkey是按时间戳的方式递增，不要将时间放在二进制码的前面，建议将Rowkey的高位作为散列字段，由程序循环生成，低位放时间字段，这样将提高数据均衡分布在每个Regionserver实现负载均衡的几率。如果没有散列字段，首字段直接是时间信息将产生所有新数据都在一个RegionServer上堆积的热点现象，这样在做数据检索的时候负载将会集中在个别RegionServer，降低查询效率。</p>
<h4 id="Rowkey唯一原则"><a href="#Rowkey唯一原则" class="headerlink" title="Rowkey唯一原则"></a>Rowkey唯一原则</h4><p>必须在设计上保证其唯一性。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据库索引原理]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/13/database-index-theory/</url>
      <content type="html"><![CDATA[<h4 id="BTree索引"><a href="#BTree索引" class="headerlink" title="BTree索引"></a>BTree索引</h4><p>B-Tree有许多变种，其中最常见的是B+Tree，例如MySQL就普遍使用B+Tree实现其索引结构。</p>
<p>与B-Tree相比，B+Tree有以下不同点：</p>
<p>每个节点的指针上限为2d而不是2d+1。</p>
<p>内节点不存储data，只存储key；叶子节点不存储指针。</p>
<a id="more"></a>
<h4 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h4><h4 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h4><p>参考资料：</p>
<p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="external">MySQL索引背后的数据结构及算法原理</a></p>
<p><a href="http://tech.meituan.com/mysql-index.html" target="_blank" rel="external">MySQL索引原理及慢查询优化</a></p>
<p><a href="http://www.ituring.com.cn/article/986" target="_blank" rel="external">你知道数据库索引的工作原理吗？</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[消息中间件(Message-Oriented Middleware)]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/13/message-oriented-middleware/</url>
      <content type="html"><![CDATA[<p>分布式系统中,广泛运用消息中间件（Message-Oriented Middleware）进行系统间的数据交换,便于异步解耦。</p>
<a id="more"></a>
<p>Message Queue 的通讯模式<br>点对点通讯：点对点方式是最为传统和常见的通讯方式，它支持一对一、一对多、多对多、多对一等多种配置方式，支持树状、网状等多种拓扑结构。<br>多点广播：MQ 适用于不同类型的应用。其中重要的，也是正在发展中的是”多点广播”应用，即能够将消息发送到多个目标站点 (Destination List)。可以使用一条 MQ 指令将单一消息发送到多个目标站点，并确保为每一站点可靠地提供信息。MQ 不仅提供了多点广播的功能，而且还拥有智能消息分发功能，在将一条消息发送到同一系统上的多个用户时，MQ 将消息的一个复制版本和该系统上接收者的名单发送到目标 MQ 系统。目标 MQ 系统在本地复制这些消息，并将它们发送到名单上的队列，从而尽可能减少网络的传输量。<br>发布/订阅 (Publish/Subscribe) 模式：发布/订阅功能使消息的分发可以突破目的队列地理指向的限制，使消息按照特定的主题甚至内容进行分发，用户或应用程序可以根据主题或内容接收到所需要的消息。发布/订阅功能使得发送者和接收者之间的耦合关系变得更为松散，发送者不必关心接收者的目的地址，而接收者也不必关心消息的发送地址，而只是根据消息的主题进行消息的收发。<br>群集 (Cluster)：为了简化点对点通讯模式中的系统配置，MQ 提供 Cluster(群集) 的解决方案。群集类似于一个域 (Domain)，群集内部的队列管理器之间通讯时，不需要两两之间建立消息通道，而是采用群集 (Cluster) 通道与其它成员通讯，从而大大简化了系统配置。此外，群集中的队列管理器之间能够自动进行负载均衡，当某一队列管理器出现故障时，其它队列管理器可以接管它的工作，从而大大提高系统的高可靠性。</p>
<h4 id="Apache-Kafka"><a href="#Apache-Kafka" class="headerlink" title="Apache Kafka"></a>Apache Kafka</h4><p>Kafka是LinkedIn开源的分布式发布-订阅消息系统，目前归属于Apache定级项目。Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输。0.8版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，适合产生大量数据的互联网服务的数据收集业务。Kafka 设计中将每一个主题分区当作一个具有顺序排列的日志。同处于一个分区中的消息都被设置了一个唯一的偏移量。Kafka 只会保持跟踪未读消息，一旦消息被置为已读状态，Kafka 就不会再去管理它了。Kafka 的生产者负责在消息队列中对生产出来的消息保证一定时间的占有，消费者负责追踪每一个主题 (可以理解为一个日志通道) 的消息并及时获取它们。基于这样的设计，Kafka 可以在消息队列中保存大量的开销很小的数据，并且支持大量的消费者订阅。</p>
<h4 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h4><p>RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP(Advanced Message Queuing Protocol)协议来实现。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。AMQP协议更多用在企业系统内，对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次。</p>
<h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p>RocketMQ是阿里开源的消息中间件，它是纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ思路起源于Kafka，但并不是Kafka的一个Copy，它对消息的可靠传输及事务性做了优化，目前在阿里集团被广泛应用于交易、充值、流计算、消息推送、日志流式处理、binglog分发等场景。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring动态代理(Dynamic Proxy)]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/13/spring-dynamic-proxy/</url>
      <content type="html"><![CDATA[<h4 id="cglib（Code-Generlize-Library）动态代理"><a href="#cglib（Code-Generlize-Library）动态代理" class="headerlink" title="cglib（Code Generlize Library）动态代理"></a>cglib（Code Generlize Library）动态代理</h4><p>CGLIB（Code Generlize Library）代理是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的所有方法，所以该类或方法不能声明称final的。首先使用Maven引入CGLIB的依赖包。</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> dolphin.test;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Author</span>: jiangxiaoqiang</div><div class="line"> * Created by 12/13/16 on 5:23 PM.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookCglibImpl</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"增加图书Cglib..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">package</span> dolphin.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Author</span>: jiangxiaoqiang</div><div class="line"> * Created by 12/13/16 on 5:24 PM.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookCglibPoxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object target;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建代理对象</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> target</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">(Object target)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</div><div class="line">        enhancer.setSuperclass(<span class="keyword">this</span>.target.getClass());</div><div class="line">        <span class="comment">// 回调方法</span></div><div class="line">        enhancer.setCallback(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">// 创建代理对象</span></div><div class="line">        <span class="keyword">return</span> enhancer.create();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 回调方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args,</span></span></div><div class="line">                            MethodProxy proxy) <span class="keyword">throws</span> Throwable &#123;</div><div class="line">        System.out.println(<span class="string">"事物开始"</span>);</div><div class="line">        proxy.invokeSuper(obj, args);</div><div class="line">        System.out.println(<span class="string">"事物结束"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">package</span> dolphin.test;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Author</span>: jiangxiaoqiang</div><div class="line"> * Created by 12/13/16 on 5:43 PM.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCglib</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        BookCglibPoxy cglib=<span class="keyword">new</span> BookCglibPoxy();</div><div class="line">        BookCglibImpl bookCglib=(BookCglibImpl)cglib.getInstance(<span class="keyword">new</span> BookCglibImpl());</div><div class="line">        bookCglib.addBook();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="JDK的动态代理"><a href="#JDK的动态代理" class="headerlink" title="JDK的动态代理"></a>JDK的动态代理</h4><p>JDK动态代理的两个核心分别是InvocationHandler和Proxy，此时代理对象和目标对象实现了相同的接口，目标对象作为代理对象的一个属性，具体接口实现中，可以在调用目标对象相应方法前后加上其他业务处理逻辑。代理模式在实际使用时需要指定具体的目标对象，如果为每个类都添加一个代理类的话，会导致类很多，同时如果不知道具体类的话，怎样实现代理模式呢？这就引出动态代理。JDK动态代理只能针对实现了接口的类生成代理。而不能实现接口的类就不能实现JDK的动态代理，cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理。JDK动态代理中包含一个类和一个接口：</p>
<h5 id="InvocationHandler接口"><a href="#InvocationHandler接口" class="headerlink" title="InvocationHandler接口"></a>InvocationHandler接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy,Method method,Object[] args)</span> <span class="keyword">throws</span> Throwable</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<p>Object proxy：指被代理的对象。</p>
<p>Method method：要调用的方法</p>
<p>Object[] args：方法调用时所需要的参数</p>
<p>可以将InvocationHandler接口的子类想象成一个代理的最终操作类，替换掉ProxySubject。</p>
<h5 id="Proxy类"><a href="#Proxy类" class="headerlink" title="Proxy类"></a>Proxy类</h5><p>Proxy类是专门完成代理的操作类，可以通过此类为一个或多个接口动态地生成实现类，此类提供了如下的操作方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces,InvocationHandler h)</span> <span class="keyword">throws</span> IllegalArgumentException</span></div></pre></td></tr></table></figure>
<p>参数说明：</p>
<p>ClassLoader loader：类加载器</p>
<p>Class&lt;?&gt;[] interfaces：得到全部的接口</p>
<p>InvocationHandler h：得到InvocationHandler接口的子类实例</p>
<p>Ps:类加载器<br>在Proxy类中的newProxyInstance（）方法中需要一个ClassLoader类的实例，ClassLoader实际上对应的是类加载器，在Java中主要有一下三种类加载器;</p>
<ul>
<li>Booststrap ClassLoader：此加载器采用C++编写，一般开发中是看不到的；</li>
<li>Extendsion ClassLoader：用来进行扩展类的加载，一般对应的是jre\lib\ext目录中的类;</li>
<li>AppClassLoader：(默认)加载classpath指定的类，是最常使用的是一种加载器。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> dolphin.test;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Author</span>: jiangxiaoqiang</div><div class="line"> * Created by 12/13/16 on 5:08 PM.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Book</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">package</span> dolphin.test;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Author</span>: jiangxiaoqiang</div><div class="line"> * Created by 12/13/16 on 5:09 PM.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookImpl</span> <span class="keyword">implements</span> <span class="title">Book</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"增加书"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">package</span> dolphin.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Author</span>: jiangxiaoqiang</div><div class="line"> * Created by 12/13/16 on 5:10 PM.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object target;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绑定委托对象并返回一个代理类</div><div class="line">     * <span class="doctag">@param</span> target</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">bind</span><span class="params">(Object target)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">        <span class="comment">//取得代理对象</span></div><div class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(),</div><div class="line">                target.getClass().getInterfaces(), <span class="keyword">this</span>);   <span class="comment">//要绑定接口(这是一个缺陷，cglib弥补了这一缺陷)</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        Object result=<span class="keyword">null</span>;</div><div class="line">        System.out.println(<span class="string">"事物开始"</span>);</div><div class="line">        <span class="comment">//执行方法</span></div><div class="line">        result=method.invoke(target, args);</div><div class="line">        System.out.println(<span class="string">"事物结束"</span>);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">package</span> dolphin.test;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Author</span>: jiangxiaoqiang</div><div class="line"> * Created by 12/13/16 on 5:12 PM.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProxy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        BookProxy bookProxy = <span class="keyword">new</span> BookProxy();</div><div class="line">        Book book = (Book) bookProxy.bind(<span class="keyword">new</span> BookImpl());</div><div class="line">        book.addBook();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul>
<li>JDK动态代理只能对实现了接口的类生成代理，而不能针对类 。</li>
<li>CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法 。</li>
<li>因为是继承，所以该类或方法最好不要声明成final ，final可以阻止继承和多态。</li>
</ul>
<p>final 所修饰的数据具有“终态”的特征，表示“最终的”意思：</p>
<ul>
<li>final 修饰的类不能被继承。</li>
<li>final 修饰的方法不能被子类重写。</li>
<li>final 修饰的变量（成员变量或局部变量）即成为常量，只能赋值一次。</li>
<li>final 修饰的成员变量必须在声明的同时赋值，如果在声明的时候没有赋值，那么只有 一次赋值的机会，而且只能在构造方法中显式赋值，然后才能使用。</li>
<li>final 修饰的局部变量可以只声明不赋值，然后再进行一次性的赋值。</li>
</ul>
<h4 id="动态代理的应用"><a href="#动态代理的应用" class="headerlink" title="动态代理的应用"></a>动态代理的应用</h4><p>AOP（Aspect-Oriented Programming，面向切面编程），AOP包括切面（aspect）、通知（advice）、连接点（joinpoint），实现方式就是通过对目标对象的代理在连接点前后加入通知，完成统一的切面操作。在Spring中，有如下规则：</p>
<ul>
<li>如果目标对象实现了接口，在默认情况下会采用JDK的动态代理实现AOP</li>
<li>如果目标对象实现了接口，也可以强制使用CGLIB生成代理实现AOP</li>
<li>如果目标对象没有实现接口，必须引入CGLIB，Spring会在JDK的动态代理和CGLIB代理之间进行切换。</li>
</ul>
<p>实现AOP的技术，主要分为两大类：</p>
<p>一是采用动态代理技术(Dynamic Proxy)，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；</p>
<p>二是采用静态织入(Static Weaving)的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码。</p>
<p>Spring提供了两种方式来生成代理对象: JDKProxy和Cglib，具体使用哪种方式生成由AopProxyFactory根据AdvisedSupport对象的配置来决定。</p>
<p>默认的策略是如果目标类是接口，则使用JDK动态代理技术，如果目标对象没有实现接口，则默认会采用CGLIB代理。如果目标对象实现了接口，可以强制使用CGLIB实现代理:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加CGLIB库，并在spring配置中加入如下配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java容器类总结]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/12/java-container/</url>
      <content type="html"><![CDATA[<p>Java容器类是java提供的工具包，包含了常用的数据结构：集合、链表、队列、栈、数组、映射等。Java容器类库定义了两个不同概念的容器，Collection和Map。</p>
<a id="more"></a>
<h4 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h4><p>Collection的定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>它是一个接口，是高度抽象出来的集合，它包含了集合的基本操作：添加、删除、清空、遍历(读取)、是否为空、获取大小、是否保护某元素等等。在Java中所有实现了Collection接口的类都必须提供两套标准的构造函数，一个是无参，用于创建一个空的Collection，一个是带有Collection参数的有参构造函数，用于创建一个新的Collection，这个新的Collection与传入进来的Collection具备相同的元素。</p>
<img src="/2016/12/12/java-container/java-container.jpg" alt="Java容器关系图" title="Java容器关系图">
<p>Graphiz绘制图形源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">digraph&#123;</div><div class="line">size=&quot;8,8&quot;;</div><div class="line">        edge[fontname=&quot;FangSong&quot;];</div><div class="line">        node[shape=&quot;Mrecord&quot;,fontname=&quot;FangSong&quot;,size=&quot;20,20&quot;,fontsize=12,color=&quot;skyblue&quot;,style=&quot;filled&quot;]</div><div class="line">        Iterator -&gt; &quot;Collection&lt;&lt;Interface&gt;&gt;&quot;;</div><div class="line">        Iterator -&gt; &quot;Map&lt;&lt;Interface&gt;&gt;&quot;;</div><div class="line">        &quot;Collection&lt;&lt;Interface&gt;&gt;&quot; -&gt; &quot;Set&lt;&lt;Interface&gt;&gt;&quot;;</div><div class="line">        &quot;Set&lt;&lt;Interface&gt;&gt;&quot; -&gt; HashSet;</div><div class="line">        &quot;Set&lt;&lt;Interface&gt;&gt;&quot; -&gt; LinkedHashSet;</div><div class="line">        &quot;Set&lt;&lt;Interface&gt;&gt;&quot; -&gt; TreeSet;</div><div class="line">        &quot;Collection&lt;&lt;Interface&gt;&gt;&quot; -&gt; &quot;List&lt;&lt;Interface&gt;&gt;&quot;;</div><div class="line">        &quot;List&lt;&lt;Interface&gt;&gt;&quot; -&gt; ArrayList;</div><div class="line">        &quot;List&lt;&lt;Interface&gt;&gt;&quot; -&gt; Vector;</div><div class="line">        &quot;List&lt;&lt;Interface&gt;&gt;&quot; -&gt; LinkedList;</div><div class="line">        &quot;Collection&lt;&lt;Interface&gt;&gt;&quot; -&gt; &quot;Queue&lt;&lt;Interface&gt;&gt;&quot;;</div><div class="line">        &quot;Queue&lt;&lt;Interface&gt;&gt;&quot; -&gt; LinkedList;</div><div class="line">        &quot;Queue&lt;&lt;Interface&gt;&gt;&quot; -&gt; PriorityQueue;</div><div class="line">        &quot;Map&lt;&lt;Interface&gt;&gt;&quot; -&gt; HashTable;</div><div class="line">        &quot;Map&lt;&lt;Interface&gt;&gt;&quot; -&gt; LinkedHashMap;</div><div class="line">        &quot;Map&lt;&lt;Interface&gt;&gt;&quot; -&gt; HashMap;</div><div class="line">        &quot;Map&lt;&lt;Interface&gt;&gt;&quot; -&gt; TreeMap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java线程]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/12/java-thread-join/</url>
      <content type="html"><![CDATA[<h4 id="线程合并-Join"><a href="#线程合并-Join" class="headerlink" title="线程合并(Join)"></a>线程合并(Join)</h4><p>线程的合并的含义就是将几个并行线程的线程合并为一个单线程执行，应用场景是当一个线程必须等待另一个线程执行完毕才能执行时可以使用join方法。</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) &#123;</div><div class="line">    Thread t1 = new MyThread1();</div><div class="line">    t1.start();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (int i = 0; i &lt; 10; i++) &#123;</div><div class="line">        System.out.println(<span class="string">"主线程第"</span> + i + <span class="string">"次执行！"</span>);</div><div class="line">        <span class="keyword">if</span> (i &gt; 2) &#123;</div><div class="line">            try &#123;</div><div class="line">                //t1线程合并到主线程中，主线程停止执行过程，转而执行t1线程，直到t1执行完毕后继续。</div><div class="line">                t1.join();</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static class MyThread1 extends Thread &#123;</div><div class="line">    public void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">        <span class="keyword">for</span> (int i = 0; i &lt; 10; i++) &#123;</div><div class="line">            System.out.println(<span class="string">"线程1第"</span> + i + <span class="string">"次执行！"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Connected to the target VM, address: &apos;127.0.0.1:44229&apos;, transport: &apos;socket&apos;</div><div class="line">主线程第0次执行！</div><div class="line">主线程第1次执行！</div><div class="line">线程1第0次执行！</div><div class="line">主线程第2次执行！</div><div class="line">线程1第1次执行！</div><div class="line">主线程第3次执行！</div><div class="line">线程1第2次执行！</div><div class="line">线程1第3次执行！</div><div class="line">线程1第4次执行！</div><div class="line">线程1第5次执行！</div><div class="line">线程1第6次执行！</div><div class="line">线程1第7次执行！</div><div class="line">线程1第8次执行！</div><div class="line">线程1第9次执行！</div><div class="line">主线程第4次执行！</div><div class="line">主线程第5次执行！</div><div class="line">主线程第6次执行！</div><div class="line">主线程第7次执行！</div><div class="line">主线程第8次执行！</div><div class="line">主线程第9次执行！</div><div class="line">Disconnected from the target VM, address: &apos;127.0.0.1:44229&apos;, transport: &apos;socket&apos;</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java的Object类]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/12/java-object/</url>
      <content type="html"><![CDATA[<p>今天面试的时候，面试官问起了Object有哪些方法，回答出来大半，不过还是不完全，理解不够深入，平时还没有细细研究这些内容，回家时仔细总结，并记录如下。Java中的Object类是所有类的父类，它提供了以下11个方法：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (timeout &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">                            <span class="string">"nanosecond timeout value out of range"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (nanos &gt; <span class="number">0</span>) &#123;</div><div class="line">        timeout++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    wait(timeout);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    wait(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123; &#125;</div></pre></td></tr></table></figure>
<h4 id="getClass方法"><a href="#getClass方法" class="headerlink" title="getClass方法"></a>getClass方法</h4><p>getClass方法是一个final方法，不允许子类重写，并且也是一个native方法。</p>
<p>返回当前运行时对象的Class对象，注意这里是运行时，比如以下代码中n是一个Number类型的实例，但是java中数值默认是Integer类型，所以getClass方法返回的是java.lang.Integer：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"str"</span>.getClass() <span class="comment">// class java.lang.String</span></div><div class="line"><span class="string">"str"</span>.getClass == String.class <span class="comment">// true</span></div><div class="line">Number n = <span class="number">0</span>;</div><div class="line">Class&lt;? extends Number&gt; c = n.getClass(); <span class="comment">// class java.lang.Integer</span></div></pre></td></tr></table></figure>
<h4 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h4><p>hashCode方法也是一个native方法。</p>
<p>该方法返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap。</p>
<p>哈希码的通用约定如下：</p>
<p>在java程序执行过程中，在一个对象没有被改变的前提下，无论这个对象被调用多少次，hashCode方法都会返回相同的整数值。对象的哈希码没有必要在不同的程序中保持相同的值。<br>如果2个对象使用equals方法进行比较并且相同的话，那么这2个对象的hashCode方法的值也必须相等。<br>如果根据equals方法，得到两个对象不相等，那么这2个对象的hashCode值不需要必须不相同。但是，不相等的对象的hashCode值不同的话可以提高哈希表的性能。<br>通常情况下，不同的对象产生的哈希码是不同的。默认情况下，对象的哈希码是通过将该对象的内部地址转换成一个整数来实现的。</p>
<p>String的hashCode方法实现如下， 计算方法是 s[0]31^(n-1) + s[1]31^(n-2) + … + s[n-1]，其中s[0]表示字符串的第一个字符，n表示字符串长度：</p>
<p>public int hashCode() {<br>    int h = hash;<br>    if (h == 0 &amp;&amp; value.length &gt; 0) {<br>        char val[] = value;</p>
<pre><code>    for (int i = 0; i &lt; value.length; i++) {
        h = 31 * h + val[i];
    }
    hash = h;
}
return h;
</code></pre><p>}<br>比如”fo”的hashCode = 102 31^1 + 111 = 3273， “foo”的hashCode = 102 31^2 + 111 * 31^1 + 111 = 101574 (‘f’的ascii码为102, ‘o’的ascii码为111)</p>
<p>hashCode在哈希表HashMap中的应用：</p>
<p>// Student类，只重写了hashCode方法<br>public static class Student {</p>
<pre><code>private String name;
private int age;

public Student(String name, int age) {
    this.name = name;
    this.age = age;
}

@Override
public int hashCode() {
    return name.hashCode();
}
</code></pre><p>}</p>
<p>Map<student, string=""> map = new HashMap<student, string="">();<br>Student stu1 = new Student(“fo”, 11);<br>Student stu2 = new Student(“fo”, 22);<br>map.put(stu1, “fo”);<br>map.put(stu2, “fo”);<br>上面这段代码中，map中有2个元素stu1和stu2。但是这2个元素是在哈希表中的同一个数组项中的位置，也就是在同一串链表中。 但是为什么stu1和stu2的hashCode相同，但是两条元素都插到map里了，这是因为map判断重复数据的条件是 两个对象的哈希码相同并且(两个对象是同一个对象或者两个对象相等[equals为true])。 所以再给Student重写equals方法，并且只比较name的话，这样map就只有1个元素了。</student,></student,></p>
<p>@Override<br>public boolean equals(Object o) {<br>    if (this == o) return true;<br>    if (o == null || getClass() != o.getClass()) return false;<br>    Student student = (Student) o;<br>    return this.name.equals(student.name);<br>}<br>这个例子直接说明了hashCode中通用约定的第三点：</p>
<p>第三点：如果根据equals方法，得到两个对象不相等，那么这2个对象的hashCode值不需要必须不相同。但是，不相等的对象的hashCode值不同的话可以提高哈希表的性能。 –&gt; 上面例子一开始没有重写equals方法，导致两个对象不相等，但是这两个对象的hashCode值一样，所以导致这两个对象在同一串链表中，影响性能。</p>
<p>当然，还有第三种情况，那就是equals方法相等，但是hashCode的值不相等。</p>
<p>这种情况也就是违反了通用约定的第二点：</p>
<p>第二点：如果2个对象使用equals方法进行比较并且相同的话，那么这2个对象的hashCode方法的值也必须相等。 违反这一点产生的后果就是如果一个stu1实例是Student(“fo”, 11)，stu2实例是Student(“fo”, 11)，那么这2个实例是相等的，但是他们的hashCode不一样，这样是导致哈希表中都会存入stu1实例和stu2实例，但是实际情况下，stu1和stu2是重复数据，只允许存在一条数据在哈希表中。所以这一点是非常重点的，再强调一下：如果2个对象的equals方法相等，那么他们的hashCode值也必须相等，反之，如果2个对象hashCode值相等，但是equals不相等，这样会影响性能，所以还是建议2个方法都一起重写。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fedora设置VPN连接]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/10/fedora-vpn-connect/</url>
      <content type="html"><![CDATA[<p>在家里需要连接学校的VPN，家里的电脑安装的时Fedora 24。原以为会非常复杂，其实设置非常简单。</p>
<a id="more"></a>
<p>家里的电脑使用的时Wi-Fi,打开Wi-Fi设置（Wi-Fi Settings）,如下图所示。</p>
<img src="/2016/12/10/fedora-vpn-connect/open-vpn-add.jpg" alt="VPN设置" title="VPN设置">
<p>选择VPN之后，选择与微软兼容的点对点隧道协议(Point-to-Point Tunneling Protocol-PPTP),Compatible with Microsoft and other PPTP VPN servers。在进入的新界面中，General下的Gatway填写域名。Optional中填写好用户名即可，密码会在打开VPN时提示填入。下图是设置成功后的界面：</p>
<img src="/2016/12/10/fedora-vpn-connect/open-vpn-setting-result.jpg" alt="设置成功" title="设置成功">
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jvm工具]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/08/jvm-tools/</url>
      <content type="html"><![CDATA[<h4 id="jps-JVM-Process-Status-Tools"><a href="#jps-JVM-Process-Status-Tools" class="headerlink" title="jps(JVM Process Status Tools)"></a>jps(JVM Process Status Tools)</h4><p>jps是参照Unix系统的取名规则命名的，而他的功能和ps的功能类似，可以列举正在运行的饿虚拟机进程并显示虚拟机执行的主类以及这些进程的唯一ID（LVMID，对应本机来说和PID相同）。VMID与LVMID需要特别说明下：如果是本地虚拟机进程，VMID(Virtual Machine IDentifier,虚机标识符)和LVMID(Local Virtual Machine IDentifier,虚机标识符)是一致的，如果是远程虚拟机进程，那VMID的格式应当是：[protocol:][//] lvmid [@hostname[:port]/servername]</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jps -lv</div></pre></td></tr></table></figure>
<p>输出为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2609 sun.tools.jps.Jps -Dapplication.home=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.111-3.b16.fc24.x86_64 -Xms8m</div><div class="line">2479 nutstore.client.gui.NutstoreGUI -ea -Dfile.encoding=UTF-8 -Xmx320M -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40 -Dlog4j.defaultInitOverride=true -Djava.util.logging.config.file=/home/dolphin/.nutstore/dist/conf/java.logging.properties -Dnutstore.config.dir=/home/dolphin/.nutstore/dist/conf -Dnutstore.x64=True -Djava.library.path=/home/dolphin/.nutstore/dist/lib/native</div></pre></td></tr></table></figure>
<h4 id="jstat-JVM-Statistics-Monitoring-Tools"><a href="#jstat-JVM-Statistics-Monitoring-Tools" class="headerlink" title="jstat(JVM Statistics Monitoring Tools)"></a>jstat(JVM Statistics Monitoring Tools)</h4><p>jstat是HotSpot Java虚拟机的性能统计工具。jstat主要用于监控虚拟机的各种运行状态信息，如类的装载、内存、垃圾回收、JIT编译器等，在没有GUI的服务器上，这款工具是首选的一款监控工具。每20秒查询一次进程2479的垃圾回收情况，监控5次，命令如下所示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jstat -gc 2479 20000 5</div></pre></td></tr></table></figure>
<p>参数gc表示监视Java堆，包含eden、2个survivor区、old区和永久带区域的容量、已用空间、GC时间合计等信息。</p>
<img src="/2016/12/08/jvm-tools/jstat-gc.jpg" alt="jstat监控Java GC" title="jstat监控Java GC">
<p>上图中 S0 表示Survivor 0区的空间使用比例,S0C（Survivor 0 Count）， E, O, P 分别代表Eden, Old和Perm空间使用率，YGC 表示young gc的次数，YGCT(Young Generation Consume Time) 表示young gc消耗的时间。GCT(GC Time) 则用来统计执行gc的总时间。</p>
<table>
<thead>
<tr>
<th>Column</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>S0C</td>
<td style="text-align:center">Current survivor space 0 capacity (KB)</td>
</tr>
<tr>
<td>S1C</td>
<td style="text-align:center">Current survivor space 1 capacity (KB)</td>
</tr>
<tr>
<td>S0U</td>
<td style="text-align:center">Survivor space 0 utilization (KB)</td>
</tr>
<tr>
<td>S1U</td>
<td style="text-align:center">Survivor space 1 utilization (KB)</td>
</tr>
<tr>
<td>EC</td>
<td style="text-align:center">Current eden space capacity (KB)</td>
</tr>
<tr>
<td>EU</td>
<td style="text-align:center">Eden space utilization (KB)</td>
</tr>
<tr>
<td>OC</td>
<td style="text-align:center">Current old space capacity (KB)</td>
</tr>
<tr>
<td>OU</td>
<td style="text-align:center">Old space utilization (KB)</td>
</tr>
<tr>
<td>PC</td>
<td style="text-align:center">Current permanent space capacity (KB)</td>
</tr>
<tr>
<td>PU</td>
<td style="text-align:center">Permanent space utilization (KB)</td>
</tr>
<tr>
<td>MC</td>
<td style="text-align:center">Metaspace capacity (kB)</td>
</tr>
<tr>
<td>MU</td>
<td style="text-align:center">Metacspace utilization (kB)</td>
</tr>
<tr>
<td>CCSC</td>
<td style="text-align:center">Compressed class space capacity (kB)</td>
</tr>
<tr>
<td>CCSU</td>
<td style="text-align:center">Compressed class space used (kB)</td>
</tr>
<tr>
<td>YGC</td>
<td style="text-align:center">Number of young generation GC Events</td>
</tr>
<tr>
<td>YGCT</td>
<td style="text-align:center">Young generation garbage collection time</td>
</tr>
<tr>
<td>FGC</td>
<td style="text-align:center">Number of full GC events</td>
</tr>
<tr>
<td>FGCT</td>
<td style="text-align:center">Full garbage collection time</td>
</tr>
<tr>
<td>GCT</td>
<td style="text-align:center">Total garbage collection time</td>
</tr>
</tbody>
</table>
<h4 id="jinfo（JVM-configuration-Info-for-Java）"><a href="#jinfo（JVM-configuration-Info-for-Java）" class="headerlink" title="jinfo（JVM configuration Info for Java）"></a>jinfo（JVM configuration Info for Java）</h4><p>Jinfo的作用是实时查看虚拟机的各项参数信息jps –v可以查看虚拟机在启动时被显式指定的参数信息，但是如果你想知道默认的一些参数信息呢？除了去查询对应的资料以外，jinfo就显得很重要了。</p>
<h4 id="jmap（JVM-Memory-Map-for-Java）"><a href="#jmap（JVM-Memory-Map-for-Java）" class="headerlink" title="jmap（JVM Memory Map for Java）"></a>jmap（JVM Memory Map for Java）</h4><h4 id="jhat（JVM-Heap-Analysis-Tool）"><a href="#jhat（JVM-Heap-Analysis-Tool）" class="headerlink" title="jhat（JVM Heap Analysis Tool）"></a>jhat（JVM Heap Analysis Tool）</h4><h4 id="jstack（JVM-Stack-Trace-for-java）"><a href="#jstack（JVM-Stack-Trace-for-java）" class="headerlink" title="jstack（JVM Stack Trace for java）"></a>jstack（JVM Stack Trace for java）</h4><p>jstack用于JVM当前时刻的线程快照，又称threaddump文件，它是JVM当前每一条线程正在执行的堆栈信息的集合。生成线程快照的主要目的是为了定位线程出现长时间停顿的原因，如线程死锁、死循环、请求外部时长过长导致线程停顿的原因。通过jstack我们就可以知道哪些进程在后台做些什么？在等待什么资源等！</p>
<p>参考资料：</p>
<p><a href="http://docs.oracle.com/javase/1.5.0/docs/tooldocs/share/jstat.html" target="_blank" rel="external">jstat - Java Virtual Machine Statistics Monitoring Tool</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring事务管理]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/03/spring-transaction/</url>
      <content type="html"><![CDATA[<p>事务最重要的两个特性，是事务的传播级别（Propagation Level）和数据隔离级别（Isolation Level）。传播级别定义的是事务的控制范围，事务隔离级别定义的是事务在数据库读写方面的控制范围。</p>
<a id="more"></a>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span></div><div class="line">        <span class="attr">p:dataSource-ref</span>=<span class="string">"dataSource"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- enables scanning for @Transactional annotations，t代表事务（transaction）,x（xml?）代表什么未知--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Spring事务实现"><a href="#Spring事务实现" class="headerlink" title="Spring事务实现"></a>Spring事务实现</h4><p>Spring的事务管理的内部实现是利用了代理技术。</p>
<h4 id="传播级别-Propagation-Level"><a href="#传播级别-Propagation-Level" class="headerlink" title="传播级别(Propagation Level)"></a>传播级别(Propagation Level)</h4><p>1） PROPAGATION_REQUIRED ，默认的spring事务传播级别，使用该级别的特点是，如果上下文中已经存在事务，那么就加入到事务中执行，如果当前上下文中不存在事务，则新建事务执行。所以这个级别通常能满足处理大多数的业务场景。</p>
<p>2）PROPAGATION_SUPPORTS ，从字面意思就知道，supports，支持，该传播级别的特点是，如果上下文存在事务，则支持事务加入事务，如果没有事务，则使用非事务的方式执行。所以说，并非所有的包在transactionTemplate.execute中的代码都会有事务支持。这个通常是用来处理那些并非原子性的非核心业务逻辑操作。应用场景较少。</p>
<p>3）PROPAGATION_MANDATORY ， 该级别的事务要求上下文中必须要存在事务，否则就会抛出异常！配置该方式的传播级别是有效的控制上下文调用代码遗漏添加事务控制的保证手段。比如一段代码不能单独被调用执行，但是一旦被调用，就必须有事务包含的情况，就可以使用这个传播级别。</p>
<p>4）PROPAGATION_REQUIRES_NEW ，从字面即可知道，new，每次都要一个新事务，该传播级别的特点是，每次都会新建一个事务，并且同时将上下文中的事务挂起，执行当前新建事务完成以后，上下文事务恢复再执行。</p>
<p>这是一个很有用的传播级别，举一个应用场景：现在有一个发送100个红包的操作，在发送之前，要做一些系统的初始化、验证、数据记录操作，然后发送100封红包，然后再记录发送日志，发送日志要求100%的准确，如果日志不准确，那么整个父事务逻辑需要回滚。<br>怎么处理整个业务需求呢？就是通过这个PROPAGATION_REQUIRES_NEW 级别的事务传播控制就可以完成。发送红包的子事务不会直接影响到父事务的提交和回滚。</p>
<p>5）PROPAGATION_NOT_SUPPORTED ，这个也可以从字面得知，not supported ，不支持，当前级别的特点就是上下文中存在事务，则挂起事务，执行当前逻辑，结束后恢复上下文的事务。</p>
<p>这个级别有什么好处？可以帮助你将事务极可能的缩小。我们知道一个事务越大，它存在的风险也就越多。所以在处理事务的过程中，要保证尽可能的缩小范围。比如一段代码，是每次逻辑操作都必须调用的，比如循环1000次的某个非核心业务逻辑操作。这样的代码如果包在事务中，势必造成事务太大，导致出现一些难以考虑周全的异常情况。所以这个事务这个级别的传播级别就派上用场了。用当前级别的事务模板抱起来就可以了。</p>
<p>6）PROPAGATION_NEVER ，该事务更严格，上面一个事务传播级别只是不支持而已，有事务就挂起，而PROPAGATION_NEVER传播级别要求上下文中不能存在事务，一旦有事务，就抛出runtime异常，强制停止执行！这个级别上辈子跟事务有仇。</p>
<p>7）PROPAGATION_NESTED ，字面也可知道，nested，嵌套级别事务。该传播级别特征是，如果上下文中存在事务，则嵌套事务执行，如果不存在事务，则新建事务。</p>
<h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>1、Serializable ：最严格的级别，事务串行执行，资源消耗最大；</p>
<p>2、REPEATABLE READ ：保证了一个事务不会修改已经由另一个事务读取但未提交（回滚）的数据。避免了“脏读取”和“不可重复读取”的情况，但是带来了更多的性能损失。</p>
<p>3、READ COMMITTED :大多数主流数据库的默认事务等级，保证了一个事务不会读到另一个并行事务已修改但未提交的数据，避免了“脏读取”。该级别适用于大多数系统。</p>
<p>4、Read Uncommitted ：保证了读取过程中不会读取到非法数据。</p>
<p>上面的解释其实每个定义都有一些拗口，其中涉及到几个术语：脏读、不可重复读、幻读。<br>这里解释一下：</p>
<p>脏读 :所谓的脏读，其实就是读到了别的事务回滚前的脏数据。比如事务B执行过程中修改了数据X，在未提交前，事务A读取了X，而事务B却回滚了，这样事务A就形成了脏读。</p>
<p>不可重复读 ：不可重复读字面含义已经很明了了，比如事务A首先读取了一条数据，然后执行逻辑的时候，事务B将这条数据改变了，然后事务A再次读取的时候，发现数据不匹配了，就是所谓的不可重复读了。</p>
<p>幻读 ：小的时候数手指，第一次数十10个，第二次数是11个，怎么回事？产生幻觉了？<br>幻读也是这样子，事务A首先根据条件索引得到10条数据，然后事务B改变了数据库一条数据，导致也符合事务A当时的搜索条件，这样事务A再次搜索发现有11条数据了，就产生了幻读。</p>
<p>一个对照关系表：</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">Dirty reads</th>
<th>non-repeatable reads</th>
<th>phantom reads</th>
</tr>
</thead>
<tbody>
<tr>
<td>Serializable</td>
<td style="text-align:center">不会</td>
<td>不会</td>
<td>不会</td>
</tr>
<tr>
<td>REPEATABLE READ</td>
<td style="text-align:center">不会</td>
<td>不会</td>
<td>会</td>
</tr>
<tr>
<td>READ COMMITTED</td>
<td style="text-align:center">不会</td>
<td>会</td>
<td>会</td>
</tr>
<tr>
<td>Read Uncommitted</td>
<td style="text-align:center">会</td>
<td>会</td>
<td>会</td>
</tr>
</tbody>
</table>
<p>所以最安全的，是Serializable，但是伴随而来也是高昂的性能开销。<br>另外，事务常用的两个属性：readonly和timeout<br>一个是设置事务为只读以提升性能。<br>另一个是设置事务的超时时间，一般用于防止大事务的发生。还是那句话，事务要尽可能的小！</p>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>在需要事务管理的地方加@Transactional 注解。@Transactional 注解可以被应用于接口定义和接口方法、类定义和类的 public 方法上。</li>
<li>@Transactional 注解只能应用到 public 可见度的方法上。 如果你在 protected、private 或者 package-visible 的方法上使用 @Transactional 注解，它也不会报错， 但是这个被注解的方法将不会展示已配置的事务设置。</li>
<li>注意仅仅 @Transactional 注解的出现不足于开启事务行为，它仅仅 是一种元数据。必须在配置文件中使用配置元素，才真正开启了事务行为。</li>
<li>通过元素的 “proxy-target-class” 属性值来控制是基于接口的还是基于类的代理被创建。如果 “proxy-target-class” 属值被设置为 “true”，那么基于类的代理将起作用（这时需要CGLIB库cglib.jar在CLASSPATH中）。如果 “proxy-target-class” 属值被设置为 “false” 或者这个属性被省略，那么标准的JDK基于接口的代理将起作用。</li>
<li>Spring团队建议在具体的类（或类的方法）上使用 @Transactional 注解，而不要使用在类所要实现的任何接口上。在接口上使用 @Transactional 注解，只能当你设置了基于接口的代理时它才生效。因为注解是 不能继承 的，这就意味着如果正在使用基于类的代理时，那么事务的设置将不能被基于类的代理所识别，而且对象也将不会被事务代理所包装。</li>
<li>@Transactional 的事务开启 ，或者是基于接口的 或者是基于类的代理被创建。所以在同一个类中一个方法调用另一个方法有事务的方法，事务是不会起作用的。</li>
</ul>
<p><a href="http://www.importnew.com/12300.html" target="_blank" rel="external">Spring @Transactional工作原理</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MyBatis使用]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/02/mybatis-cache/</url>
      <content type="html"><![CDATA[<h4 id="MyBatis缓存"><a href="#MyBatis缓存" class="headerlink" title="MyBatis缓存"></a>MyBatis缓存</h4><p>正如大多数持久层框架一样，MyBatis 同样提供了一级缓存和二级缓存的支持；</p>
<a id="more"></a>
<p>一级缓存基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当 Session flush 或 close 之后，该Session中的所有 Cache 就将清空。<br>二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache、Hazelcast等。<br>对于缓存数据更新机制，当某一个作用域(一级缓存Session/二级缓存Namespaces)的进行了 C/U/D 操作后，默认该作用域下所有 select 中的缓存将被clear。<br>MyBatis 的缓存采用了delegate机制 及 装饰器模式设计，当put、get、remove时，其中会经过多层 delegate cache 处理，其Cache类别有：BaseCache(基础缓存)、EvictionCache(排除算法缓存) 、DecoratorCache(装饰器缓存)：</p>
<ul>
<li>BaseCache:为缓存数据最终存储的处理类，默认为 PerpetualCache，基于Map存储；可自定义存储处理，如基于EhCache、Memcached等；</li>
<li>EvictionCache:当缓存数量达到一定大小后，将通过算法对缓存数据进行清除。默认采用 Lru 算法(LruCache)，提供有 fifo 算法(FifoCache)等；</li>
<li>DecoratorCache：缓存put/get处理前后的装饰器，如使用 LoggingCache 输出缓存命中日志信息、使用 SerializedCache 对 Cache的数据 put或get 进行序列化及反序列化处理、当设置flushInterval(默认1/h)后，则使用 ScheduledCache 对缓存数据进行定时刷新等。</li>
</ul>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>一般缓存框架的数据结构基本上都是 Key-Value 方式存储，MyBatis 对于其 Key 的生成采取规则为：[hashcode : checksum : mappedStementId : offset : limit : executeSql : queryParams]。<br>对于并发 Read/Write 时缓存数据的同步问题，MyBatis 默认基于 JDK/concurrent中的ReadWriteLock，使用 ReentrantReadWriteLock 的实现，从而通过 Lock 机制防止在并发 Write Cache 过程中线程安全问题。</p>
<h4 id="MyBatis延迟加载"><a href="#MyBatis延迟加载" class="headerlink" title="MyBatis延迟加载"></a>MyBatis延迟加载</h4><h4 id="MyBatis打印出SQL"><a href="#MyBatis打印出SQL" class="headerlink" title="MyBatis打印出SQL"></a>MyBatis打印出SQL</h4><ul>
<li>在方法上添加MethodLog注解即可，如下图所示。</li>
</ul>
<img src="/2016/12/02/mybatis-cache/mybatis-logging.png" alt="MyBatis输出日志" title="MyBatis输出日志">
<ul>
<li>properties文件配置</li>
</ul>
<p>将ibatis log4j运行级别调到DEBUG可以在控制台打印出ibatis运行的sql语句,方便调试: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">### 设置Logger输出级别和输出目的地 ###</div><div class="line">log4j.rootLogger=debug,stdout,logfile</div><div class="line"></div><div class="line"></div><div class="line">### 把日志信息输出到控制台 ###</div><div class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</div><div class="line">#log4j.appender.stdout.Target=System.err</div><div class="line">log4j.appender.stdout.layout=org.apache.log4j.SimpleLayout</div><div class="line"></div><div class="line"></div><div class="line">### 把日志信息输出到文件：jbit.log ###</div><div class="line">log4j.appender.logfile=org.apache.log4j.FileAppender</div><div class="line">log4j.appender.logfile.File=jbit.log</div><div class="line">log4j.appender.logfile.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.logfile.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %F %p %m%n</div><div class="line"></div><div class="line"></div><div class="line">###显示SQL语句部分</div><div class="line">log4j.logger.com.ibatis=DEBUG </div><div class="line">log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG </div><div class="line">log4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUG </div><div class="line">log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG </div><div class="line">log4j.logger.java.sql.Connection=DEBUG </div><div class="line">log4j.logger.java.sql.Statement=DEBUG </div><div class="line">log4j.logger.java.sql.PreparedStatement=DEBUG</div></pre></td></tr></table></figure>
<ul>
<li>xml文件配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 调试sql日志 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"com.ibatis"</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"com.ibatis.common.jdbc.SimpleDataSource"</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.apache.ibatis.jdbc.ScriptRunner"</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate"</span></span></div><div class="line">    <span class="attr">level</span>=<span class="string">"info"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Connection"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Statement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"java.sql.PreparedStatement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></div></pre></td></tr></table></figure>
<p>=======<br>一般缓存框架的数据结构基本上都是 Key-Value 方式存储，MyBatis 对于其 Key 的生成采取规则为：[hashcode : checksum : mappedStementId : offset : limit : executeSql : queryParams]。对于并发 Read/Write 时缓存数据的同步问题，MyBatis 默认基于 JDK/concurrent中的ReadWriteLock，使用 ReentrantReadWriteLock 的实现，从而通过 Lock 机制防止在并发 Write Cache 过程中线程安全问题。</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>bdc53dc27ab592072cdf63f4d5aa23d2d8717049</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring视图解析器]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/02/spring-viewresolver/</url>
      <content type="html"><![CDATA[<h4 id="InternalResourceViewResolver"><a href="#InternalResourceViewResolver" class="headerlink" title="InternalResourceViewResolver"></a>InternalResourceViewResolver</h4><p>在Sprinng MVC中，Handler执行完成后，向DispatcherServlet返回一个ModelAndView对象。此时就需要调用视图解析器(View Resolver)来渲染视图了。</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>它是URLBasedViewResolver的子类，所以URLBasedViewResolver支持的特性它都支持。单从字面意思来看，可以把InternalResourceViewResolver解释为内部资源视图解析器，这就是InternalResourceViewResolver的一个特性。InternalResourceViewResolver会把返回的视图名称都解析为InternalResourceView对象，InternalResourceView会把Controller处理器方法返回的模型属性都存放到对应的request属性中，然后通过RequestDispatcher在服务器端把请求forword重定向到目标URL。比如在InternalResourceViewResolver中定义了prefix=/WEB-INF/，suffix=.jsp，然后请求的Controller处理器方法返回的视图名称为test，那么这个时候InternalResourceViewResolver就会把test解析为一个InternalResourceView对象，先把返回的模型属性都存放到对应的HttpServletRequest属性中，然后利用RequestDispatcher在服务器端把请求forword到/WEB-INF/test.jsp。注意InternalResourceViewResolver只能渲染jsp页面，如果需要渲染html看<a href="http://stackoverflow.com/questions/20564336/internalresourceviewresolver-to-resolve-both-jsp-and-html-together" target="_blank" rel="external">这里</a>。</p>
<h4 id="ThymeleafViewResolver"><a href="#ThymeleafViewResolver" class="headerlink" title="ThymeleafViewResolver"></a>ThymeleafViewResolver</h4><p>在Java世界的MVC框架里，使用的视图技术不少，最基本的是JSP，还有知名的FreeMarker和Velocity等模板引擎。Thymeleaf也是一款优秀的模板引擎，它在HTML5/XHTML的视图层表现的很好，也能在离线情况下处理任何XML文件。它是完全可以替代JSP+JSTL(JSP Standard Tag Library，JSP标准标签库)的。</p>
<p>Thymeleaf官方的Q&amp;A：</p>
<p>Q: 和FreeMarker,Velocity相比，Thymeleaf表现得怎样呢？</p>
<p>A：FreeMarker和Velocity都是软件领域杰出的作品，但它们在解决模板问题上的处理哲学和Thymeleaf不一样。Thymeleaf强调的是自然模板，也就是允许模板作为产品原型使用(笔者注:因为其后缀名就是.html，可以直接在浏览器打开)，而FreeMarker和Velocity不行。并且Thymeleaf的语法更简洁、更和目前Web开发的趋势相一致。其次，从架构的角度看，FreeMarker和Velocity更像个文本处理器，所以它们能够处理很多类型的内容，而Thymeleaf是基于XML的，只能处理XML格式的数据。因此这样看，FreeMarker和Velocity更通用些，但恰恰如此，Thymeleaf更能利用XML的特性，尤其是在Web应用中。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- thymeleaf thymeleafViewResolver--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.view.ThymeleafViewResolver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateEngine"</span> <span class="attr">ref</span>=<span class="string">"templateEngine"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"characterEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fedora上MySQL安装]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/02/fedora-mysql-install/</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## Fedora 24 ##</span></div><div class="line">dnf install https://dev.mysql.com/get/mysql57-community-release-fc24-8.noarch.rpm</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>安装MySQL。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnf install -y mysql-community-server</div></pre></td></tr></table></figure>
<p>启动MySQL。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">systemctl start mysqld.service <span class="comment">## use restart after update</span></div><div class="line"></div><div class="line">systemctl <span class="built_in">enable</span> mysqld.service</div></pre></td></tr></table></figure>
<p>登陆时会提示如下错误：ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: YES)获取随机密码。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep <span class="string">'A temporary password is generated for root@localhost'</span> /var/<span class="built_in">log</span>/mysqld.log |tail -1</div></pre></td></tr></table></figure>
<p>重新设置MySQL密码,密码要求包含大小写和数字以及特殊字符，不符合安全策略的(Your password does not satisfy the current policy requirements)密码无法设置成功。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SET PASSWORD FOR <span class="string">'root'</span>@<span class="string">'localhost'</span> = PASSWORD(<span class="string">'$jxqMySQL123456'</span>);</div></pre></td></tr></table></figure>
<h4 id="數據庫操作"><a href="#數據庫操作" class="headerlink" title="數據庫操作"></a>數據庫操作</h4><p>創建數據庫。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#列出數據庫</span></div><div class="line">show databases;</div><div class="line"><span class="comment">#創建數據庫</span></div><div class="line">create database dolphin;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面试总结]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/02/interview-summerize/</url>
      <content type="html"><![CDATA[<p>面试的过程也是气质是否和公司搭调的过程，每个公司都有自己的管理特色。找到价值观相对契合的企业非常重要。这里是面试时面试官问过的问题，或许平时开发中根本没有想过这些问题，但注意更多细节总是有益处的，总结如下。</p>
<a id="more"></a>
<h4 id="Java中线程安全的类"><a href="#Java中线程安全的类" class="headerlink" title="Java中线程安全的类"></a>Java中线程安全的类</h4><ul>
<li>ArrayList线程不安全，Vector线程安全；</li>
<li>HashMap线程不安全，HashTable线程安全,ConcurrentHashMap线程安全；</li>
<li>StringBuilder线程不安全，StringBuffer线程安全。</li>
</ul>
<h4 id="String、StringBuilder、StringBuffer区别"><a href="#String、StringBuilder、StringBuffer区别" class="headerlink" title="String、StringBuilder、StringBuffer区别"></a>String、StringBuilder、StringBuffer区别</h4><p>简要的说， String 类型和 StringBuffer类型的主要性能区别其实在于 String 是不可变的对象, 因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用 String ，因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后， JVM 的 GC 就会进行垃圾回收，执行垃圾回收时是会block住程序的，影响性能。而如果是使用 StringBuffer 类则结果就不一样了，每次结果都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，再改变对象引用。所以在一般情况下我们推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。而在某些特别情况下， String 对象的字符串拼接其实是被 JVM 解释成了 StringBuffer 对象的拼接，所以这些时候 String 对象的速度并不会比 StringBuffer 对象慢，而特别是以下的字符串对象生成中， String 效率是远要比 StringBuffer 快的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String S1 = “This is only a” + “ simple” + “ test”;</div><div class="line">StringBuffer Sb = <span class="keyword">new</span> StringBuilder(“This is only a”).append(“ simple”).append(“ test”);</div></pre></td></tr></table></figure>
<p> 你会很惊讶的发现，生成 String S1 对象的速度简直太快了，而这个时候 StringBuffer 居然速度上根本一点都不占优势。其实这是 JVM 的一个把戏，在 JVM 里:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String S1 = “This is only a” + “ simple” + “test”;</div></pre></td></tr></table></figure>
<p> 其实就是：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String S1 = “This is only a simple test”;</div></pre></td></tr></table></figure>
<p> 所以当然不需要太多的时间了。但大家这里要注意的是，如果你的字串是来自另外的 String 对象的话，速度就没那么快了，譬如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String S2 = “This is only a”;</div><div class="line">String S3 = “ simple”;</div><div class="line">String S4 = “ test”;</div><div class="line">String S1 = S2 +S3 + S4;</div></pre></td></tr></table></figure>
<p>这时候 JVM 会规规矩矩的按照原来的方式去做</p>
<p>在大部分情况下 StringBuffer 优于 String<br>StringBuffer<br>Java.lang.StringBuffer线程安全的可变字符序列。一个类似于 String 的字符串缓冲区，但不能修改。虽然在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。<br>可将字符串缓冲区安全地用于多个线程。可以在必要时对这些方法进行同步，因此任意特定实例上的所有操作就好像是以串行顺序发生的，该顺序与所涉及的每个线程进行的方法调用顺序一致。<br>StringBuffer 上的主要操作是 append 和 insert 方法，可重载这些方法，以接受任意类型的数据。每个方法都能有效地将给定的数据转换成字符串，然后将该字符串的字符追加或插入到字符串缓冲区中。append 方法始终将这些字符添加到缓冲区的末端；而 insert 方法则在指定的点添加字符。<br>例如，如果 z 引用一个当前内容是“start”的字符串缓冲区对象，则此方法调用 z.append(“le”) 会使字符串缓冲区包含“startle”，而 z.insert(4, “le”) 将更改字符串缓冲区，使之包含“starlet”。<br>在大部分情况下 StringBuilder 优于 StringBuffer<br>java.lang.StringBuilde<br>java.lang.StringBuilder一个可变的字符序列是5.0新增的。此类提供一个与 StringBuffer 兼容的 API，但不保证同步。该类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快。两者的方法基本相同。</p>
<h4 id="使用Spring框架的原因"><a href="#使用Spring框架的原因" class="headerlink" title="使用Spring框架的原因"></a>使用Spring框架的原因</h4><ul>
<li><p>非侵入式：支持基于POJO的编程模式，不强制性的要求实现Spring框架中的接口或继承Spring框架中的类。</p>
</li>
<li><p>IoC容器：IoC容器帮助应用程序管理对象以及对象之间的依赖关系，对象之间的依赖关系如果发生了改变只需要修改配置文件而不是修改代码，因为代码的修改可能意味着项目的重新构建和完整的回归测试。有了IoC容器，程序员再也不需要自己编写工厂、单例，这一点特别符合Spring的精神”不要重复的发明轮子”。采用依赖注入技术之后，A的代码只需要定义一个私有的B对象，不需要直接new来获得这个对象，而是通过相关的容器控制程序来将B对象在外部new出来并注入到A类里的引用中。而具体获取的方法、对象被获取时的状态由配置文件（如XML）来指定。</p>
</li>
<li><p>AOP（面向切面编程）：日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。将所有的横切关注功能封装到切面（aspect）中，通过配置的方式将横切关注功能动态添加到目标代码上，进一步实现了业务逻辑和系统服务之间的分离。另一方面，有了AOP程序员可以省去很多自己写代理类的工作。AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处都基本相似。比如权限认证、日志、事务处理。Aop 的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。正如Avanade公司的高级方案构架师Adam Magee所说，AOP的核心思想就是“将应用程序中的商业逻辑同对其提供支持的通用服务进行分离。”</p>
</li>
<li><p>MVC：Spring的MVC框架是非常优秀的，Spring MVC的配置相对于Struts 2来说较少，性能方面，Spring比Struts较快，开发效率Spring MVC确实比struts2高，Spring3 MVC更容易实现Restful URL。Struts更加很多新的技术点，比如拦截器、值栈及OGNL（Object-Graph Navigation Language）表达式，学习成本较高，springmvc 比较简单，很较少的时间都能上手。</p>
</li>
<li><p>事务管理：Spring以宽广的胸怀接纳多种持久层技术，并且为其提供了声明式的事务管理，在不需要任何一行代码的情况下就能够完成事务管理。</p>
</li>
<li><p>其他：选择Spring框架的原因还远不止于此，Spring为Java企业级开发提供了一站式选择，你可以在需要的时候使用它的部分和全部，更重要的是，你甚至可以在感觉不到Spring存在的情况下，在你的项目中使用Spring提供的各种优秀的功能。</p>
</li>
</ul>
<h4 id="大型网站在架构上应当考虑哪些问题"><a href="#大型网站在架构上应当考虑哪些问题" class="headerlink" title="大型网站在架构上应当考虑哪些问题"></a>大型网站在架构上应当考虑哪些问题</h4><ul>
<li><p>分层(Layer)：分层是处理任何复杂系统最常见的手段之一，将系统横向切分成若干个层面，每个层面只承担单一的职责，然后通过下层为上层提供的基础设施和服务以及上层对下层的调用来形成一个完整的复杂的系统。计算机网络的开放系统互联参考模型（OSI[Open Systems Interconnection]/RM）和Internet的TCP/IP模型都是分层结构，大型网站的软件系统也可以使用分层的理念将其分为持久层（提供数据存储和访问服务）、业务层（处理业务逻辑，系统中最核心的部分）和表示层（系统交互、视图展示）。需要指出的是：（1）分层是逻辑上的划分，在物理上可以位于同一设备上也可以在不同的设备上部署不同的功能模块，这样可以使用更多的计算资源来应对用户的并发访问；（2）层与层之间应当有清晰的边界，这样分层才有意义，才更利于软件的开发和维护。</p>
</li>
<li><p>分割(Split)：分割是对软件的纵向切分。我们可以将大型网站的不同功能和服务分割开，形成高内聚低耦合的功能模块（单元）。在设计初期可以做一个粗粒度的分割，将网站分割为若干个功能模块，后期还可以进一步对每个模块进行细粒度的分割，这样一方面有助于软件的开发和维护，另一方面有助于分布式的部署，提供网站的并发处理能力和功能的扩展。</p>
</li>
<li><p>分布式(Distribution)：除了上面提到的内容，网站的静态资源（JavaScript、CSS、图片等）也可以采用独立分布式部署并采用独立的域名，这样可以减轻应用服务器的负载压力，也使得浏览器对资源的加载更快。数据的存取也应该是分布式的，传统的商业级关系型数据库产品基本上都支持分布式部署，而新生的NoSQL产品几乎都是分布式的。当然，网站后台的业务处理也要使用分布式技术，例如查询索引的构建、数据分析等，这些业务计算规模庞大，可以使用Hadoop以及MapReduce分布式计算框架来处理。</p>
</li>
<li><p>集群(Cluster)：集群使得有更多的服务器提供相同的服务，可以更好的提供对并发的支持。</p>
</li>
<li><p>缓存(Cache)：所谓缓存就是用空间换取时间的技术，将数据尽可能放在距离计算最近的位置。使用缓存是网站优化的第一定律。我们通常说的CDN、反向代理、热点数据都是对缓存技术的使用。</p>
</li>
<li><p>异步(Async)：异步是实现软件实体之间解耦合的又一重要手段。异步架构是典型的生产者消费者模式，二者之间没有直接的调用关系，只要保持数据结构不变，彼此功能实现可以随意变化而不互相影响，这对网站的扩展非常有利。使用异步处理还可以提高系统可用性，加快网站的响应速度（用Ajax加载数据就是一种异步技术），同时还可以起到削峰作用（应对瞬时高并发）。能推迟处理的都要推迟处理”是网站优化的第二定律，而异步是践行网站优化第二定律的重要手段。</p>
</li>
<li><p>冗余(Redundancy)：各种服务器都要提供相应的冗余服务器以便在某台或某些服务器宕机时还能保证网站可以正常工作，同时也提供了灾难恢复的可能性。冗余是网站高可用性的重要保证。</p>
</li>
</ul>
<h4 id="你使用过的应用服务器优化技术有哪些"><a href="#你使用过的应用服务器优化技术有哪些" class="headerlink" title="你使用过的应用服务器优化技术有哪些"></a>你使用过的应用服务器优化技术有哪些</h4><ul>
<li><p>分布式缓存：缓存的本质就是内存中的哈希表，如果设计一个优质的哈希函数，那么理论上哈希表读写的渐近时间复杂度为O(1)。缓存主要用来存放那些读写比很高、变化很少的数据，这样应用程序读取数据时先到缓存中读取，如果没有或者数据已经失效再去访问数据库或文件系统，并根据拟定的规则将数据写入缓存。对网站数据的访问也符合二八定律（Pareto分布，幂律分布），即80%的访问都集中在20%的数据上，如果能够将这20%的数据缓存起来，那么系统的性能将得到显著的改善。当然，使用缓存需要解决以下几个问题：</p>
<p>1.频繁修改的数据；<br>2.数据不一致与脏读；<br>3.缓存雪崩（可以采用分布式缓存服务器集群加以解决，memcached是广泛采用的解决方案）；<br>4.缓存预热；<br>5.缓存穿透（恶意持续请求不存在的数据）。</p>
</li>
<li><p>异步操作：可以使用消息队列将调用异步化，通过异步处理将短时间高并发产生的事件消息存储在消息队列中，从而起到削峰作用。电商网站在进行促销活动时，可以将用户的订单请求存入消息队列，这样可以抵御大量的并发订单请求对系统和数据库的冲击。目前，绝大多数的电商网站即便不进行促销活动，订单系统都采用了消息队列来处理。</p>
</li>
<li><p>使用集群。</p>
</li>
<li><p>代码优化：</p>
<p>1.多线程：基于Java的Web开发基本上都通过多线程的方式响应用户的并发请求，使用多线程技术在编程上要解决线程安全问题，主要可以考虑以下几个方面：A. 将对象设计为无状态对象（这和面向对象的编程观点是矛盾的，在面向对象的世界中被视为不良设计），这样就不会存在并发访问时对象状态不一致的问题。B. 在方法内部创建对象，这样对象由进入方法的线程创建，不会出现多个线程访问同一对象的问题。使用ThreadLocal将对象与线程绑定也是很好的做法，这一点在前面已经探讨过了。C. 对资源进行并发访问时应当使用合理的锁机制。<br>2.非阻塞I/O： 使用单线程和非阻塞I/O是目前公认的比多线程的方式更能充分发挥服务器性能的应用模式，基于Node.js构建的服务器就采用了这样的方式。Java在JDK 1.4中就引入了NIO（Non-blocking I/O）,在Servlet 3规范中又引入了异步Servlet的概念，这些都为在服务器端采用非阻塞I/O提供了必要的基础。<br>3.资源复用：资源复用主要有两种方式，一是单例，二是对象池，我们使用的数据库连接池、线程池都是对象池化技术，这是典型的用空间换取时间的策略，另一方面也实现对资源的复用，从而避免了不必要的创建和释放资源所带来的开销。</p>
</li>
</ul>
<h4 id="你用过的网站前端优化的技术有哪些"><a href="#你用过的网站前端优化的技术有哪些" class="headerlink" title="你用过的网站前端优化的技术有哪些"></a>你用过的网站前端优化的技术有哪些</h4><ul>
<li>浏览器访问优化：</li>
</ul>
<ol>
<li>减少HTTP请求数量：合并CSS、合并JavaScript、合并图片（CSS Sprite）</li>
<li>使用浏览器缓存：通过设置HTTP响应头中的Cache-Control和Expires属性，将CSS、JavaScript、图片等在浏览器中缓存，当这些静态资源需要更新时，可以更新HTML文件中的引用来让浏览器重新请求新的资源</li>
<li>启用压缩</li>
<li>CSS前置，JavaScript后置</li>
<li>减少Cookie传输</li>
</ol>
<ul>
<li><p>CDN加速：CDN（Content Distribute Network）的本质仍然是缓存，将数据缓存在离用户最近的地方，CDN通常部署在网络运营商的机房，不仅可以提升响应速度，还可以减少应用服务器的压力。当然，CDN缓存的通常都是静态资源。</p>
</li>
<li><p>反向代理：反向代理相当于应用服务器的一个门面，可以保护网站的安全性，也可以实现负载均衡的功能，当然最重要的是它缓存了用户访问的热点资源，可以直接从反向代理将某些内容返回给用户浏览器。</p>
</li>
</ul>
<h4 id="什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？"><a href="#什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？" class="headerlink" title="什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？"></a>什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？</h4><ul>
<li><p>XSS（Cross Site Script，跨站脚本攻击）是向网页中注入恶意脚本在用户浏览网页时在用户浏览器中执行恶意脚本的攻击方式。跨站脚本攻击分有两种形式：反射型攻击（诱使用户点击一个嵌入恶意脚本的链接以达到攻击的目标，目前有很多攻击者利用论坛、微博发布含有恶意脚本的URL就属于这种方式）和持久型攻击（将恶意脚本提交到被攻击网站的数据库中，用户浏览网页时，恶意脚本从数据库中被加载到页面执行，QQ邮箱的早期版本就曾经被利用作为持久型跨站脚本攻击的平台）。XSS虽然不是什么新鲜玩意，但是攻击的手法却不断翻新，防范XSS主要有两方面：消毒（对危险字符进行转义）和HttpOnly（防范XSS攻击者窃取Cookie数据）。</p>
</li>
<li><p>SQL注入攻击是注入攻击最常见的形式（此外还有OS注入攻击（Struts 2的高危漏洞就是通过OGNL实施OS注入攻击导致的）），当服务器使用请求参数构造SQL语句时，恶意的SQL被嵌入到SQL中交给数据库执行。SQL注入攻击需要攻击者对数据库结构有所了解才能进行，攻击者想要获得表结构有多种方式：（1）如果使用开源系统搭建网站，数据库结构也是公开的（目前有很多现成的系统可以直接搭建论坛，电商网站，虽然方便快捷但是风险是必须要认真评估的）；（2）错误回显（如果将服务器的错误信息直接显示在页面上，攻击者可以通过非法参数引发页面错误从而通过错误信息了解数据库结构，Web应用应当设置友好的错误页，一方面符合最小惊讶原则，一方面屏蔽掉可能给系统带来危险的错误回显信息）；（3）盲注。防范SQL注入攻击也可以采用消毒的方式，通过正则表达式对请求参数进行验证，此外，参数绑定也是很好的手段，这样恶意的SQL会被当做SQL的参数而不是命令被执行，JDBC中的PreparedStatement就是支持参数绑定的语句对象，从性能和安全性上都明显优于Statement。</p>
</li>
<li><p>CSRF攻击（Cross Site Request Forgery，跨站请求伪造）是攻击者通过跨站请求，以合法的用户身份进行非法操作（如转账或发帖等）。CSRF的原理是利用浏览器的Cookie或服务器的Session，盗取用户身份，其原理如下图所示。防范CSRF的主要手段是识别请求者的身份，主要有以下几种方式：（1）在表单中添加令牌（token）；（2）验证码；（3）检查请求头中的Referer（前面提到防图片盗链接也是用的这种方式）。令牌和验证都具有一次消费性的特征，因此在原理上一致的，但是验证码是一种糟糕的用户体验，不是必要的情况下不要轻易使用验证码，目前很多网站的做法是如果在短时间内多次提交一个表单未获得成功后才要求提供验证码，这样会获得较好的用户体验。</p>
</li>
</ul>
<h4 id="什么是领域模型-domain-model-？贫血模型-anaemic-domain-model-和充血模型-rich-domain-model-有什么区别？"><a href="#什么是领域模型-domain-model-？贫血模型-anaemic-domain-model-和充血模型-rich-domain-model-有什么区别？" class="headerlink" title="什么是领域模型(domain model)？贫血模型(anaemic domain model)和充血模型(rich domain model)有什么区别？"></a>什么是领域模型(domain model)？贫血模型(anaemic domain model)和充血模型(rich domain model)有什么区别？</h4><p>领域模型是领域内的概念类或现实世界中对象的可视化表示，又称为概念模型或分析对象模型，它专注于分析问题领域本身，发掘重要的业务领域概念，并建立业务领域概念之间的关系。贫血模型是指使用的领域对象中只有setter和getter方法（POJO），所有的业务逻辑都不包含在领域对象中而是放在业务逻辑层。有人将我们这里说的贫血模型进一步划分成失血模型（领域对象完全没有业务逻辑）和贫血模型（领域对象有少量的业务逻辑），我们这里就不对此加以区分了。充血模型将大多数业务逻辑和持久化放在领域对象中，业务逻辑（业务门面）只是完成对业务逻辑的封装、事务和权限等的处理。下面两张图分别展示了贫血模型和充血模型的分层架构。更加细粒度的有失血模型，贫血模型，充血模型，胀血模型。贫血模型就是domain ojbect包含了不依赖于持久化的领域逻辑，而那些依赖持久化的领域逻辑被分离到Service层。失血模型简单来说，就是domain object只有属性的getter/setter方法的纯数据类，所有的业务逻辑完全由business object来完成(又称Transaction Script)，这种模型下的domain object被Martin Fowler称之为“贫血的domain object”。充血模型和第二种模型差不多，所不同的就是如何划分业务逻辑，即认为，绝大多业务逻辑都应该被放在domain object里面(包括持久化逻辑)，而Service层应该是很薄的一层，仅仅封装事务和少量逻辑，不和DAO层打交道。</p>
<h4 id="描述一下JVM加载class文件的原理机制"><a href="#描述一下JVM加载class文件的原理机制" class="headerlink" title="描述一下JVM加载class文件的原理机制"></a>描述一下JVM加载class文件的原理机制</h4><p>类加载的过程包括了加载、验证、准备、解析、初始化五个阶段。JVM中类的装载是由类加载器（ClassLoader）和它的子类来实现的，Java中的类加载器是一个重要的Java运行时系统组件，它负责在运行时查找和装入类文件中的类。<br>  由于Java的跨平台性，经过编译的Java源程序并不是一个可执行程序，而是一个或多个类文件。当Java程序需要使用某个类时，JVM会确保这个类已经被加载、连接（验证、准备和解析）和初始化。类的加载是指把类的.class文件中的数据读入到内存中，通常是创建一个字节数组读入.class文件，然后产生与所加载类对应的Class对象。加载完成后，Class对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。最后JVM对类进行初始化，包括：A. 如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；B. 如果类中存在初始化语句，就依次执行这些初始化语句。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">编译 -&gt; 加载 -&gt; 链接（验证+准备+解析）-&gt;初始化（使用前的准备）-&gt;使用-&gt; 卸载</div></pre></td></tr></table></figure>
<p>  类的加载是由类加载器完成的，类加载器包括：根加载器（BootStrap）、扩展加载器（Extension）、系统加载器（System）和用户自定义类加载器（java.lang.ClassLoader的子类）。从Java 2（JDK 1.2）开始，类加载过程采取了父亲委托机制(PDM[Parerent Delegate Mechanism])。PDM更好的保证了Java平台的安全性，在该机制中，JVM自带的Bootstrap是根加载器，其他的加载器都有且仅有一个父类加载器。类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。JVM不会向Java程序提供对Bootstrap的引用。下面是关于几个类加载器的说明：</p>
<ul>
<li>Bootstrap：一般用本地代码实现，负责加载JVM基础核心类库（rt.jar）；</li>
<li>Extension：从java.ext.dirs系统属性所指定的目录中加载类库，它的父加载器是Bootstrap；</li>
<li>System：又叫应用类加载器，其父类是Extension。它是应用最广泛的类加载器。它从环境变量classpath或者系统属性java.class.path所指定的目录中记载类，是用户自定义加载器的默认父加载器。</li>
</ul>
<h4 id="什么条件下会触发垃圾回收"><a href="#什么条件下会触发垃圾回收" class="headerlink" title="什么条件下会触发垃圾回收"></a>什么条件下会触发垃圾回收</h4><h5 id="触发Full-GC"><a href="#触发Full-GC" class="headerlink" title="触发Full GC"></a>触发Full GC</h5><p>除直接调用System.gc外，触发Full GC执行的情况有如下四种。</p>
<ol>
<li>旧生代空间不足</li>
</ol>
<p>旧生代空间只有在新生代对象转入及创建为大对象、大数组时才会出现不足的现象，当执行Full GC后空间仍然不足，则抛出如下错误：<code>java.lang.OutOfMemoryError: Java heap space</code>，为避免以上两种状况引起的Full GC，调优时应尽量做到让对象在Minor GC阶段被回收、让对象在新生代多存活一段时间及不要创建过大的对象及数组。</p>
<ol>
<li>Permanet Generation空间满</li>
</ol>
<p>Permanet Generation中存放的为一些class的信息等，当系统中要加载的类、反射的类和调用的方法较多时，Permanet Generation可能会被占满，在未配置为采用CMS GC的情况下会执行Full GC。如果经过Full GC仍然回收不了，那么JVM会抛出如下错误信息：<code>java.lang.OutOfMemoryError: PermGen space</code>。为避免Perm Gen占满造成Full GC现象，可采用的方法为增大Perm Gen空间或转为使用CMS GC。</p>
<ol>
<li>CMS GC时出现promotion failed和concurrent mode failure</li>
</ol>
<p>对于采用CMS进行旧生代GC的程序而言，尤其要注意GC日志中是否有promotion failed和concurrent mode failure两种状况，当这两种状况出现时可能会触发Full GC。</p>
<p>promotion failed是在进行Minor GC时，survivor space放不下、对象只能放入旧生代，而此时旧生代也放不下造成的；concurrent mode failure是在执行CMS GC的过程中同时有对象要放入旧生代，而此时旧生代空间不足造成的。CMS(Concurrent Mark-Sweep)是以牺牲吞吐量为代价来获得最短回收停顿时间的垃圾回收器。对于要求服务器响应速度的应用上，这种垃圾回收器非常适合。</p>
<p>应对措施为：增大survivor space、旧生代空间或调低触发并发GC的比率，但在JDK 5.0+、6.0+的版本中有可能会由于JDK的bug29导致CMS在remark完毕后很久才触发sweeping动作。对于这种状况，可通过设置-XX: CMSMaxAbortablePrecleanTime=5（单位为ms）来避免。</p>
<ol>
<li>统计得到的Minor GC晋升到旧生代的平均大小大于旧生代的剩余空间</li>
</ol>
<p>这是一个较为复杂的触发情况，Hotspot为了避免由于新生代对象晋升到旧生代导致旧生代空间不足的现象，在进行Minor GC时，做了一个判断，如果之前统计所得到的Minor GC晋升到旧生代的平均大小大于旧生代的剩余空间，那么就直接触发Full GC。</p>
<p>例如程序第一次触发Minor GC后，有6MB的对象晋升到旧生代，那么当下一次Minor GC发生时，首先检查旧生代的剩余空间是否大于6MB，如果小于6MB，则执行Full GC。</p>
<p>当新生代采用PS GC时，方式稍有不同，PS GC是在Minor GC后也会检查，例如上面的例子中第一次Minor GC后，PS GC会检查此时旧生代的剩余空间是否大于6MB，如小于，则触发对旧生代的回收。</p>
<p>除了以上4种状况外，对于使用RMI来进行RPC或管理的Sun JDK应用而言，默认情况下会一小时执行一次Full GC。可通过在启动时通过- java -Dsun.rmi.dgc.client.gcInterval=3600000来设置Full GC执行的间隔时间或通过-XX:+ DisableExplicitGC来禁止RMI调用System.gc。</p>
<p>对象分配规则</p>
<p>1.对象优先分配在Eden区，如果Eden区没有足够的空间时，虚拟机执行一次Minor GC。</p>
<p>2.大对象直接进入老年代（大对象是指需要大量连续内存空间的对象）。这样做的目的是避免在Eden区和两个Survivor区之间发生大量的内存拷贝（新生代采用复制算法收集内存）。</p>
<p>3.长期存活的对象进入老年代。虚拟机为每个对象定义了一个年龄计数器，如果对象经过了1次Minor GC那么对象会进入Survivor区，之后每经过一次Minor GC那么对象的年龄加1，知道达到阀值对象进入老年区。</p>
<p>4.动态判断对象的年龄。如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代。</p>
<p>5.空间分配担保。每次进行Minor GC时，JVM会计算Survivor区移至老年区的对象的平均大小，如果这个值大于老年区的剩余值大小则进行一次Full GC，如果小于检查HandlePromotionFailure设置，如果true则只进行Monitor GC,如果false则进行Full GC。</p>
<h4 id="CAS和AQS"><a href="#CAS和AQS" class="headerlink" title="CAS和AQS"></a>CAS和AQS</h4><p>CAS（Compare and Swap，比较并交换）：乐观锁的核心算法是CAS（Compareand Swap，比较并交换），它涉及到三个操作数：内存值、预期值、新值。当且仅当预期值和内存值相等时才将内存值修改为新值。这样处理的逻辑是，首先检查某块内存的值是否跟之前我读取时的一样，如不一样则表示期间此内存值已经被别的线程更改过，舍弃本次操作，否则说明期间没有其他线程对此内存值操作，可以把新值设置给此块内存。如图2-5-4-1，有两个线程可能会差不多同时对某内存操作，线程二先读取某内存值作为预期值，执行到某处时线程二决定将新值设置到内存块中，如果线程一在此期间修改了内存块，则通过CAS即可以检测出来，假如检测没问题则线程二将新值赋予内存块。</p>
<p>它也有缺点：</p>
<p>①  观锁只能保证一个共享变量的原子操作。如上例子，自旋过程中只能保证value变量的原子性，这时如果多一个或几个变量，乐观锁将变得力不从心，但互斥锁能轻易解决，不管对象数量多少及对象颗粒度大小。</p>
<p>②  长时间自旋可能导致开销大。假如CAS长时间不成功而一直自旋，会给CPU带来很大的开销。</p>
<p>③  ABA问题。CAS的核心思想是通过比对内存值与预期值是否一样而判断内存值是否被改过，但这个判断逻辑不严谨，假如内存值原来是A，后来被一条线程改为B，最后又被改成了A，则CAS认为此内存值并没有发生改变，但实际上是有被其他线程改过的，这种情况对依赖过程值的情景的运算结果影响很大。解决的思路是引入版本号，每次变量更新都把版本号加一。</p>
<p>乐观锁是对悲观锁的改进，虽然它也有缺点，但它确实已经成为提高并发性能的主要手段，而且jdk中的并发包也大量使用基于CAS的乐观锁。</p>
<p> AQS（Abstract Queued Synchronizer）：juc(Java.util.concurrent)里所有的这些锁机制都是基于AQS（Abstract Queued Synchronizer）框架上构建的。</p>
<h4 id="MyBatis与Hibernate区别"><a href="#MyBatis与Hibernate区别" class="headerlink" title="MyBatis与Hibernate区别"></a>MyBatis与Hibernate区别</h4><p>MyBatis与Hibernate一样是个ORM(Object-relational Mapping)数据库框架。它与Hibernate区别，总结出以下几点：</p>
<ol>
<li>hibernate是全自动，而mybatis是半自动。<br>hibernate完全可以通过对象关系模型实现对数据库的操作，拥有完整的JavaBean对象与数据库的映射结构来自动生成sql。而mybatis仅有基本的字段映射，对象数据以及对象实际关系仍然需要通过手写sql来实现和管理。</li>
<li>hibernate数据库移植性远大于mybatis。<br>hibernate通过它强大的映射结构和hql语言，大大降低了对象与数据库（Oracle、MySQL等）的耦合性，而mybatis由于需要手写sql，因此与数据库的耦合性直接取决于程序员写sql的方法，如果sql不具通用性而用了很多某数据库特性的sql语句的话，移植性也会随之降低很多，成本很高。</li>
<li>Hibernate拥有完整的日志系统，MyBatis则欠缺一些。<br>hibernate日志系统非常健全，涉及广泛，包括：sql记录、关系异常、优化警告、缓存提示、脏数据警告等；而mybatis则除了基本记录功能外，功能薄弱很多。</li>
<li>mybatis相比hibernate需要关心很多细节<br>hibernate配置要比mybatis复杂的多，学习成本也比mybatis高。但也正因为mybatis使用简单，才导致它要比hibernate关心很多技术细节。mybatis由于不用考虑很多细节，开发模式上与传统jdbc区别很小，因此很容易上手并开发项目，但忽略细节会导致项目前期bug较多，因而开发出相对稳定的软件很慢，而开发出软件却很快。hibernate则正好与之相反。但是如果使用hibernate很熟练的话，实际上开发效率丝毫不差于甚至超越mybatis。</li>
<li>sql直接优化上，mybatis要比hibernate方便很多<br>由于mybatis的sql都是写在xml里，因此优化sql比hibernate方便很多。而hibernate的sql很多都是自动生成的，无法直接维护sql；虽有hql，但功能还是不及sql强大，见到报表等变态需求时，hql也歇菜，也就是说hql是有局限的；Hibernate虽然也支持原生sql，但开发模式上却与orm不同，需要转换思维，因此使用上不是非常方便。总之写sql的灵活度上Hibernate不及MyBatis。</li>
</ol>
<p>总结：<br>MyBatis：小巧、方便、高效、简单、直接、半自动<br>Hibernate：强大、方便、高效、复杂、绕弯子、全自动</p>
<p>mybatis：</p>
<ol>
<li>入门简单，即学即用，提供了数据库查询的自动对象绑定功能，而且延续了很好的SQL使用经验，对于没有那么高的对象模型要求的项目来说，相当完美。</li>
<li>可以进行更为细致的SQL优化，可以减少查询字段。</li>
<li>缺点就是框架还是比较简陋，功能尚有缺失，虽然简化了数据绑定代码，但是整个底层数据库查询实际还是要自己写的，工作量也比较大，而且不太容易适应快速数据库修改。</li>
<li>二级缓存机制不佳。<br>hibernate：</li>
<li>功能强大，数据库无关性好，O/R映射能力强，如果你对Hibernate相当精通，而且对Hibernate进行了适当的封装，那么你的项目整个持久层代码会相当简单，需要写的代码很少，开发速度很快，非常爽。</li>
<li>有更好的二级缓存机制，可以使用第三方缓存。</li>
<li>缺点就是学习门槛不低，要精通门槛更高，而且怎么设计O/R映射，在性能和对象模型之间如何权衡取得平衡，以及怎样用好Hibernate方面需要你的经验和能力都很强才行。<br>举个形象的比喻：<br>MyBatis：机械工具，使用方便，拿来就用，但工作还是要自己来作，不过工具是活的，怎么使由我决定。﻿﻿<br>Hibernate：智能机器人，但研发它（学习、熟练度）的成本很高，工作都可以摆脱他了，但仅限于它能做的事。﻿﻿</li>
</ol>
<h4 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h4><p>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</p>
<ul>
<li>一个程序至少有一个进程,一个进程至少有一个线程.</li>
<li>线程的划分尺度小于进程，使得多线程程序的并发性高。</li>
<li>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</li>
<li>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</li>
<li>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</li>
</ul>
<h4 id="HTTP、TCP-IP、Socket的区别"><a href="#HTTP、TCP-IP、Socket的区别" class="headerlink" title="HTTP、TCP/IP、Socket的区别"></a>HTTP、TCP/IP、Socket的区别</h4><p>平时还真没有想过这样的问题，第一次回答这个问题时，有那么一丝丝无奈。总结如下：</p>
<p>TPC/IP协议是传输层协议，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。关于TCP/IP和HTTP协议的关系，网络有一段比较容易理解的介绍：“我们在传输数据时，可以只使用（传输层）TCP/IP协议，但是那样的话，如果没有应用层，便无法识别数据内容，如果想要使传输的数据有意义，则必须使用到应用层协议，应用层协议有很多，比如HTTP、FTP、TELNET等，也可以自己定义应用层协议。WEB使用HTTP协议作应用层协议，以封装HTTP 文本信息，然后使用TCP/IP做传输层协议将它发到网络上。”</p>
<p>术语TCP/IP代表传输控制协议/网际协议，指的是一系列协议。“IP”代表网际协议，TCP和UDP使用该协议从一个网络传送数据包到另一个网络。把IP想像成一种高速公路，它允许其它协议在上面行驶并找到到其它电脑的出口。TCP和UDP是高速公路上的“卡车”，它们携带的货物就是像HTTP，文件传输协议FTP这样的协议等。</p>
<p>你应该能理解，TCP和UDP是FTP，HTTP和SMTP之类使用的传输层协议。虽然TCP和UDP都是用来传输其他协议的，它们却有一个显著的不同：TCP提供有保证的数据传输，而UDP不提供。这意味着TCP有一个特殊的机制来确保数据安全的不出错的从一个端点传到另一个端点，而UDP不提供任何这样的保证。</p>
<p>HTTP(超文本传输协议)是利用TCP在两台电脑(通常是Web服务器和客户端)之间传输信息的协议。客户端使用Web浏览器发起HTTP请求给Web服务器，Web服务器发送被请求的信息给客户端</p>
<h4 id="static关键字的作用"><a href="#static关键字的作用" class="headerlink" title="static关键字的作用"></a>static关键字的作用</h4><h5 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h5><p>一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是：对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。</p>
<h5 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h5><p>静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法(就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。</p>
<h5 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h5><p>static代码块也叫静态代码块，是在类中独立于类成员的static语句块，可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。</p>
<h5 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h5><p>Java中的嵌套类（Nested Class）分为两种：静态内部类（也叫静态嵌套类，Static Nested Class）和内部类（Inner Class）。内部类我们介绍过很多了，现在来看看静态内部类。什么是静态内部类呢？是内部类，并且是静态（static修饰）的即为静态内部类。只有在是静态内部类的情况下才能把static修复符放在类前，其他任何时候static都是不能修饰类的。</p>
<p>静态内部类的形式很好理解，但是为什么需要静态内部类呢？那是因为静态内部类有两个优点：加强了类的封装性和提高了代码的可读性</p>
<h5 id="静态导包"><a href="#静态导包" class="headerlink" title="静态导包"></a>静态导包</h5><p>import static静态导入是JDK1.5中的新特性。一般我们导入一个类都用 import com…..ClassName;而静态导入是这样：import static com…..ClassName.*;这里的多了个static，还有就是类名ClassName后面多了个 .<em> ，意思是导入这个类里的静态方法。当然，也可以只导入某个静态方法，只要把 .</em> 换成静态方法名就行了。然后在这个类中，就可以直接用方法名调用静态方法，而不必用ClassName.方法名 的方式来调用。</p>
<p>这种方法的好处就是可以简化一些操作，例如打印操作System.out.println(…);就可以将其写入一个静态方法print(…)，在使用时直接print(…)就可以了。</p>
<p>但是这种方法建议在有很多重复调用的时候使用，如果仅有一到两次调用，不如直接写来的方便</p>
<h4 id="foeach循环的原理"><a href="#foeach循环的原理" class="headerlink" title="foeach循环的原理"></a>foeach循环的原理</h4><p>从Java 5起，在Java中有了for-each循环，可以用来循环遍历collection和array。For each循环允许你在无需保持传统for循环中的索引，或在使用iterator /ListIterator时无需调用while循环中的hasNext()方法就能遍历collection。for-each循环仅应用于实现了Iterable接口的Java array和Collection类，而且既然所有内置Collection类都实现了java.util.Collection接口，已经继承了Iterable，这一细节通常会被忽略,这点可以在Collection接口的类型声明“ public interface Collection extends Iterable”中看到。所以为了解决上述问题，你可以选择简单地让CustomCollection实现Collection接口或者继承AbstractCollection，这是默认的通用实现并展示了如何同时使用抽象类和接口以获取更好的灵活性。在从任何Collection（例如Map、Set或List）中删除对象时总要使用Iterator的remove方法，也请谨记for-each循环只是标准Iterator代码标准用法之上的一种语法糖（syntactic sugar）而已。</p>
<h4 id="valatile实现原理"><a href="#valatile实现原理" class="headerlink" title="valatile实现原理"></a>valatile实现原理</h4><p>在多线程并发编程中synchronized和Volatile都扮演着重要的角色，Volatile是轻量级的synchronized，它在多处理器开发中保证了共享变量的“可见性”。可见性的意思是当一个线程修改一个共享变量时，另外一个线程能读到这个修改的值。java编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致的更新，线程应该确保通过排他锁单独获得这个变量。Java语言提供了volatile，在某些情况下比锁更加方便。如果一个字段被声明成volatile，java线程内存模型确保所有线程看到这个变量的值是一致的。Volatile变量修饰符如果使用恰当的话，它比synchronized的使用和执行成本会更低，因为它不会引起线程上下文的切换和调度。Volatile变量修饰符如果使用恰当的话，它比synchronized的使用和执行成本会更低，因为它不会引起线程上下文的切换和调度。</p>
<p>有volatile变量修饰的共享变量进行写操作的时候会多第二行汇编代码，通过查IA-32架构软件开发者手册可知，lock前缀的指令在多核处理器下会引发了两件事情。</p>
<p>将当前处理器缓存行的数据会写回到系统内存。<br>这个写回内存的操作会引起在其他CPU里缓存了该内存地址的数据无效。<br>处理器为了提高处理速度，不直接和内存进行通讯，而是先将系统内存的数据读到内部缓存（L1,L2或其他）后再进行操作，但操作完之后不知道何时会写到内存，如果对声明了Volatile变量进行写操作，JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在缓存行的数据写回到系统内存。但是就算写回到内存，如果其他处理器缓存的值还是旧的，再执行计算操作就会有问题，所以在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器要对这个数据进行修改操作的时候，会强制重新从系统内存里把数据读到处理器缓存里。</p>
<p>这两件事情在IA-32软件开发者架构手册的第三册的多处理器管理章节（第八章）中有详细阐述。</p>
<p>Lock前缀指令会引起处理器缓存回写到内存。Lock前缀指令导致在执行指令期间，声言处理器的 LOCK# 信号。在多处理器环境中，LOCK# 信号确保在声言该信号期间，处理器可以独占使用任何共享内存。（因为它会锁住总线，导致其他CPU不能访问总线，不能访问总线就意味着不能访问系统内存），但是在最近的处理器里，LOCK＃信号一般不锁总线，而是锁缓存，毕竟锁总线开销比较大。在8.1.4章节有详细说明锁定操作对处理器缓存的影响，对于Intel486和Pentium处理器，在锁操作时，总是在总线上声言LOCK#信号。但在P6和最近的处理器中，如果访问的内存区域已经缓存在处理器内部，则不会声言LOCK#信号。相反地，它会锁定这块内存区域的缓存并回写到内存，并使用缓存一致性机制来确保修改的原子性，此操作被称为“缓存锁定”，缓存一致性机制会阻止同时修改被两个以上处理器缓存的内存区域数据。</p>
<p>一个处理器的缓存回写到内存会导致其他处理器的缓存无效。IA-32处理器和Intel 64处理器使用MESI（修改，独占，共享，无效）控制协议去维护内部缓存和其他处理器缓存的一致性。在多核处理器系统中进行操作的时候，IA-32 和Intel 64处理器能嗅探其他处理器访问系统内存和它们的内部缓存。它们使用嗅探技术保证它的内部缓存，系统内存和其他处理器的缓存的数据在总线上保持一致。例如在Pentium和P6 family处理器中，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处理共享状态，那么正在嗅探的处理器将无效它的缓存行，在下次访问相同内存地址时，强制执行缓存行填充。</p>
<h4 id="final关键字作用"><a href="#final关键字作用" class="headerlink" title="final关键字作用"></a>final关键字作用</h4><h5 id="final方法"><a href="#final方法" class="headerlink" title="final方法"></a>final方法</h5><p>inal也可以声明方法。方法前面加上final关键字，代表这个方法不可以被子类的方法重写。如果你认为一个方法的功能已经足够完整了，子类中不需要改变的话，你可以声明此方法为final。final方法比非final方法要快，因为在编译的时候已经静态绑定了，不需要在运行时再动态绑定。</p>
<h5 id="final类"><a href="#final类" class="headerlink" title="final类"></a>final类</h5><p>使用final来修饰的类叫作final类。final类通常功能是完整的，它们不能被继承。Java中有许多类是final的，譬如String, Interger以及其他包装类。</p>
<h5 id="final好处"><a href="#final好处" class="headerlink" title="final好处"></a>final好处</h5><p>final关键字提高了性能。JVM和Java应用都会缓存final变量。<br>final变量可以安全的在多线程环境下进行共享，而不需要额外的同步开销。<br>使用final关键字，JVM会对方法、变量及类进行优化。</p>
<h5 id="final知识点"><a href="#final知识点" class="headerlink" title="final知识点"></a>final知识点</h5><ol>
<li>final关键字可以用于成员变量、本地变量、方法以及类。</li>
<li>final成员变量必须在声明的时候初始化或者在构造器中初始化，否则就会报编译错误。</li>
<li>你不能够对final变量再次赋值。</li>
<li>本地变量必须在声明时赋值。</li>
<li>在匿名类中所有变量都必须是final变量。</li>
<li>final方法不能被重写。</li>
<li>final类不能被继承。</li>
<li>final关键字不同于finally关键字，后者用于异常处理。</li>
<li>final关键字容易与finalize()方法搞混，后者是在Object类中定义的方法，是在垃圾回收之前被JVM调用的方法。</li>
<li>接口中声明的所有变量本身是final的。</li>
<li>final和abstract这两个关键字是反相关的，final类就不可能是abstract的。</li>
<li>final方法在编译阶段绑定，称为静态绑定(static binding)。</li>
<li>没有在声明时初始化final变量的称为空白final变量(blank final variable)，它们必须在构造器中初始化，或者调用this()初始化。不这么做的话，编译器会报错“final变量(变量名)需要进行初始化”。</li>
<li>将类、方法、变量声明为final能够提高性能，这样JVM就有机会进行估计，然后优化。<br>按照Java代码惯例，final变量就是常量，而且通常常量名要大写：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT = <span class="number">10</span>;</div></pre></td></tr></table></figure>
<p>对于集合对象声明为final指的是引用不能被更改，但是你可以向其中增加，删除或者改变内容。譬如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> List Loans = <span class="keyword">new</span> ArrayList();</div><div class="line">list.add(“home loan”);  <span class="comment">//valid</span></div><div class="line">list.add(<span class="string">"personal loan"</span>); <span class="comment">//valid</span></div><div class="line">loans = <span class="keyword">new</span> Vector();  <span class="comment">//not va</span></div></pre></td></tr></table></figure>
<h4 id="transient关键字的作用"><a href="#transient关键字的作用" class="headerlink" title="transient关键字的作用"></a>transient关键字的作用</h4><p>Java 语言规范中提到,transient 关键字用来说明指定属性不进行序列化.</p>
<h4 id="Redis的数据结构"><a href="#Redis的数据结构" class="headerlink" title="Redis的数据结构"></a>Redis的数据结构</h4><p>在 redis 中一共有5种数据结构，那每种数据结构的使用场景都是什么呢？</p>
<ul>
<li>String——字符串</li>
<li>Hash——字典</li>
<li>List——列表</li>
<li>Set——集合</li>
<li>Sorted Set——有序集合</li>
</ul>
<p>各自的使用场景：</p>
<h5 id="String——字符串"><a href="#String——字符串" class="headerlink" title="String——字符串"></a>String——字符串</h5><p>String 数据结构是简单的 key-value 类型，value 不仅可以是 String，也可以是数字（当数字类型用 Long 可以表示的时候encoding 就是整型，其他都存储在 sdshdr 当做字符串）。使用 Strings 类型，可以完全实现目前 Memcached 的功能，并且效率更高。还可以享受 Redis 的定时持久化（可以选择 RDB 模式或者 AOF 模式），操作日志及 Replication 等功能。除了提供与 Memcached 一样的 get、set、incr、decr 等操作外，Redis 还提供了下面一些操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1.LEN niushuai：O(1)获取字符串长度</div><div class="line">2.APPEND niushuai redis：往字符串 append 内容，而且采用智能分配内存（每次2倍）</div><div class="line">3.设置和获取字符串的某一段内容</div><div class="line">4.设置及获取字符串的某一位（bit）</div><div class="line">5.批量设置一系列字符串的内容</div><div class="line">6.原子计数器</div><div class="line">7.GETSET 命令的妙用，请于清空旧值的同时设置一个新值，配合原子计数器使用</div></pre></td></tr></table></figure>
<h4 id="Hash——字典"><a href="#Hash——字典" class="headerlink" title="Hash——字典"></a>Hash——字典</h4><p>在 Memcached 中，我们经常将一些结构化的信息打包成 hashmap，在客户端序列化后存储为一个字符串的值（一般是 JSON 格式），比如用户的昵称、年龄、性别、积分等。这时候在需要修改其中某一项时，通常需要将字符串（JSON）取出来，然后进行反序列化，修改某一项的值，再序列化成字符串（JSON）存储回去。简单修改一个属性就干这么多事情，消耗必定是很大的，也不适用于一些可能并发操作的场合（比如两个并发的操作都需要修改积分）。而 Redis 的 Hash 结构可以使你像在数据库中 Update 一个属性一样只修改某一项属性值。<br>存储、读取、修改用户属性</p>
<h4 id="List——列表"><a href="#List——列表" class="headerlink" title="List——列表"></a>List——列表</h4><p>List 说白了就是链表（redis 使用双端链表实现的 List），相信学过数据结构知识的人都应该能理解其结构。使用 List 结构，我们可以轻松地实现最新消息排行等功能（比如新浪微博的 TimeLine ）。List 的另一个应用就是消息队列，可以利用 List 的 PUSH 操作，将任务存在 List 中，然后工作线程再用 POP 操作将任务取出进行执行。Redis 还提供了操作 List 中某一段元素的 API，你可以直接查询，删除 List 中某一段的元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.微博 TimeLine</div><div class="line">2.消息队列</div></pre></td></tr></table></figure>
<h4 id="Set——集合"><a href="#Set——集合" class="headerlink" title="Set——集合"></a>Set——集合</h4><p>Set 就是一个集合，集合的概念就是一堆不重复值的组合。利用 Redis 提供的 Set 数据结构，可以存储一些集合性的数据。比如在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。因为 Redis 非常人性化的为集合提供了求交集、并集、差集等操作，那么就可以非常方便的实现如共同关注、共同喜好、二度好友等功能，对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。</p>
<ol>
<li>共同好友、二度好友</li>
<li>利用唯一性，可以统计访问网站的所有独立 IP</li>
<li>好友推荐的时候，根据 tag 求交集，大于某个 threshold 就可以推荐</li>
</ol>
<h4 id="Sorted-Set——有序集合"><a href="#Sorted-Set——有序集合" class="headerlink" title="Sorted Set——有序集合"></a>Sorted Set——有序集合</h4><p>和Sets相比，Sorted Sets是将 Set 中的元素增加了一个权重参数 score，使得集合中的元素能够按 score 进行有序排列，比如一个存储全班同学成绩的 Sorted Sets，其集合 value 可以是同学的学号，而 score 就可以是其考试得分，这样在数据插入集合的时候，就已经进行了天然的排序。另外还可以用 Sorted Sets 来做带权重的队列，比如普通消息的 score 为1，重要消息的 score 为2，然后工作线程可以选择按 score 的倒序来获取工作任务。让重要的任务优先执行。</p>
<p>1.带有权重的元素，比如一个游戏的用户得分排行榜2.比较复杂的数据结构，一般用到的场景不算太多</p>
<h4 id="ArrayList、LinkedList、Hashtable、HashMap、ConcurrentHashMap、HashSet的实现原理"><a href="#ArrayList、LinkedList、Hashtable、HashMap、ConcurrentHashMap、HashSet的实现原理" class="headerlink" title="ArrayList、LinkedList、Hashtable、HashMap、ConcurrentHashMap、HashSet的实现原理"></a>ArrayList、LinkedList、Hashtable、HashMap、ConcurrentHashMap、HashSet的实现原理</h4><h4 id="CopyOnWrite容器和Queue"><a href="#CopyOnWrite容器和Queue" class="headerlink" title="CopyOnWrite容器和Queue"></a>CopyOnWrite容器和Queue</h4><h4 id="ConcurrentHashMap的锁分段技术"><a href="#ConcurrentHashMap的锁分段技术" class="headerlink" title="ConcurrentHashMap的锁分段技术"></a>ConcurrentHashMap的锁分段技术</h4><h4 id="ConcurrentHashMap的读是否要加锁，为什么"><a href="#ConcurrentHashMap的读是否要加锁，为什么" class="headerlink" title="ConcurrentHashMap的读是否要加锁，为什么"></a>ConcurrentHashMap的读是否要加锁，为什么</h4><h4 id="ConcurrentHashMap的迭代器是强一致性的迭代器还是弱一致性的迭代器"><a href="#ConcurrentHashMap的迭代器是强一致性的迭代器还是弱一致性的迭代器" class="headerlink" title="ConcurrentHashMap的迭代器是强一致性的迭代器还是弱一致性的迭代器"></a>ConcurrentHashMap的迭代器是强一致性的迭代器还是弱一致性的迭代器</h4><h4 id="常用设计模式的优缺点"><a href="#常用设计模式的优缺点" class="headerlink" title="常用设计模式的优缺点"></a>常用设计模式的优缺点</h4><h4 id="Thread和Runnable的区别和联系"><a href="#Thread和Runnable的区别和联系" class="headerlink" title="Thread和Runnable的区别和联系"></a>Thread和Runnable的区别和联系</h4><h4 id="多次start一个线程会怎么样"><a href="#多次start一个线程会怎么样" class="headerlink" title="多次start一个线程会怎么样"></a>多次start一个线程会怎么样</h4><h4 id="常用的线程池有几种？这几种线程池之间有什么区别和联系？"><a href="#常用的线程池有几种？这几种线程池之间有什么区别和联系？" class="headerlink" title="常用的线程池有几种？这几种线程池之间有什么区别和联系？"></a>常用的线程池有几种？这几种线程池之间有什么区别和联系？</h4><p>使用线程池的好处:</p>
<ul>
<li>减少在创建和销毁线程上所花的时间以及系统资源的开销</li>
<li>如不使用线程池，有可能造成系统创建大量线程而导致消耗完系统内存</li>
</ul>
<p>以下是Java自带的几种线程池：</p>
<h4 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h4><p>创建一个指定工作线程数量的线程池。</p>
<p>每当提交一个任务就创建一个工作线程，如果工作线程数量达到线程池初始的最大数，则将提交的任务存入到池队列中。</p>
<h4 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h4><p>创建一个可缓存的线程池。</p>
<p>这种类型的线程池特点是：</p>
<p>1).工作线程的创建数量几乎没有限制(其实也有限制的,数目为Interger. MAX_VALUE), 这样可灵活的往线程池中添加线程。</p>
<p>2).如果长时间没有往线程池中提交任务，即如果工作线程空闲了指定的时间(默认为1分钟)，则该工作线程将自动终止。终止后，如果你又提交了新的任务，则线程池重新创建一个工作线程。</p>
<h4 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h4><p>创建一个单线程化的Executor，即只创建唯一的工作者线程来执行任务，如果这个线程异常结束，会有另一个取代它，保证顺序执行(我觉得这点是它的特色)。</p>
<p>单工作线程最大的特点是可保证顺序地执行各个任务，并且在任意给定的时间不会有多个线程是活动的 。</p>
<h4 id="newScheduleThreadPool"><a href="#newScheduleThreadPool" class="headerlink" title="newScheduleThreadPool"></a>newScheduleThreadPool</h4><p>创建一个定长的线程池，而且支持定时的以及周期性的任务执行，类似于Timer。</p>
<p>总结：</p>
<p>一.FixedThreadPool是一个典型且优秀的线程池，它具有线程池提高程序效率和节省创建线程时所耗的开销的优点。但在线程池空闲时，即线程池中没有可运行任务时，它不会释放工作线程，还会占用一定的系统资源。</p>
<p>二．CachedThreadPool的特点就是在线程池空闲时，即线程池中没有可运行任务时，它会释放工作线程，从而释放工作线程所占用的资源。但是，但当出现新任务时，又要创建一新的工作线程，又要一定的系统开销。并且，在使用CachedThreadPool时，一定要注意控制任务的数量，否则，由于大量线程同时运行，很有会造成系统瘫痪。</p>
<h4 id="线程池的实现原理是怎么样的？"><a href="#线程池的实现原理是怎么样的？" class="headerlink" title="线程池的实现原理是怎么样的？"></a>线程池的实现原理是怎么样的？</h4><h4 id="假如有Thread1、Thread2、Thread3、Thread4四条线程分别统计C、D、E、F四个盘的大小，所有线程都统计完毕交给Thread5线程去做汇总，应当如何实现？"><a href="#假如有Thread1、Thread2、Thread3、Thread4四条线程分别统计C、D、E、F四个盘的大小，所有线程都统计完毕交给Thread5线程去做汇总，应当如何实现？" class="headerlink" title="假如有Thread1、Thread2、Thread3、Thread4四条线程分别统计C、D、E、F四个盘的大小，所有线程都统计完毕交给Thread5线程去做汇总，应当如何实现？"></a>假如有Thread1、Thread2、Thread3、Thread4四条线程分别统计C、D、E、F四个盘的大小，所有线程都统计完毕交给Thread5线程去做汇总，应当如何实现？</h4><h4 id="synchronized和ReentrantLock的区别"><a href="#synchronized和ReentrantLock的区别" class="headerlink" title="synchronized和ReentrantLock的区别"></a>synchronized和ReentrantLock的区别</h4><p>Java在编写多线程程序时，为了保证线程安全，需要对数据同步，经常用到两种同步方式就是Synchronized和重入锁ReentrantLock。<br>相似点：<br>       这两种同步方式有很多相似之处，它们都是加锁方式同步，而且都是阻塞式的同步，也就是说当如果一个线程获得了对象锁，进入了同步块，其他访问该同步块的线程都必须阻塞在同步块外面等待，而进行线程阻塞和唤醒的代价是比较高的（操作系统需要在用户态与内核态之间来回切换，代价很高，不过可以通过对锁优化进行改善）。<br>区别：<br>      这两种方式最大区别就是对于Synchronized来说，它是java语言的关键字，是原生语法层面的互斥，需要jvm实现。而ReentrantLock它是JDK 1.5之后提供的API层面的互斥锁，需要lock()和unlock()方法配合try/finally语句块来完成。</p>
<h5 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h5><p>Synchronized进过编译，会在同步块的前后分别形成monitorenter和monitorexit这个两个字节码指令。在执行monitorenter指令时，首先要尝试获取对象锁。如果这个对象没被锁定，或者当前线程已经拥有了那个对象锁，把锁的计算器加1，相应的，在执行monitorexit指令时会将锁计算器就减1，当计算器为0时，锁就被释放了。如果获取对象锁失败，那当前线程就要阻塞，直到对象锁被另一个线程释放为止。</p>
<h5 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h5><p>由于ReentrantLock是java.util.concurrent包下提供的一套互斥锁，相比Synchronized，ReentrantLock类提供了一些高级功能，主要有以下3项：</p>
<pre><code>1.等待可中断，持有锁的线程长期不释放的时候，正在等待的线程可以选择放弃等待，这相当于Synchronized来说可以避免出现死锁的情况。
2.公平锁，多个线程等待同一个锁时，必须按照申请锁的时间顺序获得锁，Synchronized锁非公平锁，ReentrantLock默认的构造函数是创建的非公平锁，可以通过参数true设为公平锁，但公平锁表现的性能不是很好。
3.锁绑定多个条件，一个ReentrantLock对象可以同时绑定对个对象。
</code></pre><h4 id="synchronized锁普通方法和锁静态方法、死锁的原理及排查方法"><a href="#synchronized锁普通方法和锁静态方法、死锁的原理及排查方法" class="headerlink" title="synchronized锁普通方法和锁静态方法、死锁的原理及排查方法"></a>synchronized锁普通方法和锁静态方法、死锁的原理及排查方法</h4><h4 id="String的hashCode-方法是怎么实现的"><a href="#String的hashCode-方法是怎么实现的" class="headerlink" title="String的hashCode()方法是怎么实现的"></a>String的hashCode()方法是怎么实现的</h4><h4 id="List、Map、Set实现类的源代码"><a href="#List、Map、Set实现类的源代码" class="headerlink" title="List、Map、Set实现类的源代码"></a>List、Map、Set实现类的源代码</h4><h4 id="ReentrantLock、AQS的源代码"><a href="#ReentrantLock、AQS的源代码" class="headerlink" title="ReentrantLock、AQS的源代码"></a>ReentrantLock、AQS的源代码</h4><h4 id="AtomicInteger的实现原理，主要能说清楚CAS机制并且AtomicInteger是如何利用CAS机制实现的"><a href="#AtomicInteger的实现原理，主要能说清楚CAS机制并且AtomicInteger是如何利用CAS机制实现的" class="headerlink" title="AtomicInteger的实现原理，主要能说清楚CAS机制并且AtomicInteger是如何利用CAS机制实现的"></a>AtomicInteger的实现原理，主要能说清楚CAS机制并且AtomicInteger是如何利用CAS机制实现的</h4><h4 id="线程池的实现原理"><a href="#线程池的实现原理" class="headerlink" title="线程池的实现原理"></a>线程池的实现原理</h4><h4 id="Object类中的方法以及每个方法的作用"><a href="#Object类中的方法以及每个方法的作用" class="headerlink" title="Object类中的方法以及每个方法的作用"></a>Object类中的方法以及每个方法的作用</h4><h4 id="想要在Spring初始化bean的时候做一些事情该怎么做"><a href="#想要在Spring初始化bean的时候做一些事情该怎么做" class="headerlink" title="想要在Spring初始化bean的时候做一些事情该怎么做"></a>想要在Spring初始化bean的时候做一些事情该怎么做</h4><h4 id="想要在bean销毁的时候做一些事情该怎么做"><a href="#想要在bean销毁的时候做一些事情该怎么做" class="headerlink" title="想要在bean销毁的时候做一些事情该怎么做"></a>想要在bean销毁的时候做一些事情该怎么做</h4><h4 id="MyBatis中-和-的区别"><a href="#MyBatis中-和-的区别" class="headerlink" title="MyBatis中$和#的区别"></a>MyBatis中$和#的区别</h4><h4 id="AVL树、红黑树，可以不了解它们的具体实现，但是要知道什么是二叉查找树、什么是平衡树，AVL树和红黑树的区别。"><a href="#AVL树、红黑树，可以不了解它们的具体实现，但是要知道什么是二叉查找树、什么是平衡树，AVL树和红黑树的区别。" class="headerlink" title="AVL树、红黑树，可以不了解它们的具体实现，但是要知道什么是二叉查找树、什么是平衡树，AVL树和红黑树的区别。"></a>AVL树、红黑树，可以不了解它们的具体实现，但是要知道什么是二叉查找树、什么是平衡树，AVL树和红黑树的区别。</h4><h4 id="索引使用的是哪种数据结构实现"><a href="#索引使用的是哪种数据结构实现" class="headerlink" title="索引使用的是哪种数据结构实现"></a>索引使用的是哪种数据结构实现</h4><h4 id="索引为什么要使用树来实现呢"><a href="#索引为什么要使用树来实现呢" class="headerlink" title="索引为什么要使用树来实现呢"></a>索引为什么要使用树来实现呢</h4><h4 id="Collections-sort方法使用的是哪种排序方法"><a href="#Collections-sort方法使用的是哪种排序方法" class="headerlink" title="Collections.sort方法使用的是哪种排序方法"></a>Collections.sort方法使用的是哪种排序方法</h4><p>（1）Java虚拟机的内存布局<br>（2）GC算法及几种垃圾收集器<br>（3）类加载机制，也就是双亲委派模型<br>（4）Java内存模型<br>（5）happens-before规则<br>（6）volatile关键字使用规则</p>
<h4 id="谈谈分布式Session的几种实现方式"><a href="#谈谈分布式Session的几种实现方式" class="headerlink" title="谈谈分布式Session的几种实现方式"></a>谈谈分布式Session的几种实现方式</h4><h4 id="讲一下Session和Cookie的区别和联系以及Session的实现原理"><a href="#讲一下Session和Cookie的区别和联系以及Session的实现原理" class="headerlink" title="讲一下Session和Cookie的区别和联系以及Session的实现原理"></a>讲一下Session和Cookie的区别和联系以及Session的实现原理</h4><h4 id="XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？"><a href="#XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？" class="headerlink" title="XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？"></a>XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？</h4><p>两种定义形式 dtd（文档类型定义）  schema（XML模式）；</p>
<h5 id="它们之间有何本质区别？"><a href="#它们之间有何本质区别？" class="headerlink" title="它们之间有何本质区别？"></a>它们之间有何本质区别？</h5><p>XML Schema和DTD（Document Type Define）都用于文档验证，但二者还有一定区别，本质区别:schema本身是xml的，可以被XML解析器解析(这也是从DTD上发展schema的根本目的)。另外：</p>
<p>XML Schema是内容开放模型，可扩展，功能性强；而DTD可扩展性差；</p>
<p>XML Schema支持丰富的数据类型，而DTD不支持元素的数据类型，对属性的类型定义也很有限；</p>
<p>XML Schema支持命名空间机制，而DTD不支持；</p>
<p>XML Schema可针对不同情况对整个XML文档或文档局部进行验证；而DTD缺乏这种灵活性；</p>
<p>XML Schema完全遵循XML规范，符合XML语法，可以和DOM结合使用，功能强大；而DTD语法本身有自身的语法和要求，难以学习；</p>
<h5 id="解析XML文档有哪几种方式？"><a href="#解析XML文档有哪几种方式？" class="headerlink" title="解析XML文档有哪几种方式？"></a>解析XML文档有哪几种方式？</h5><p>有DOM（文档对象模型）,SAX（Simple API for XML）,STAX等</p>
<pre><code>DOM:文档驱动，处理大型文件时其性能下降的非常厉害。这个问题是由DOM的树结构所造成的，这种结构占用的内存较多，而且DOM必须在解析文件之前把整个文档装入内存,适合对XML的随机访问
</code></pre><p>SAX:不同于DOM,SAX是事件驱动型的XML解析方式。它顺序读取XML文件，不需要一次全部装载整个文件。当遇到像文件开头，文档结束，或者标签开头与标签结束时，它会触发一个事件，用户通过在其回调事件中写入处理代码来处理XML文件，适合对XML的顺序访问，且是只读的。当前浏览器不支持SAX</p>
<p>SAXParserFactory factory= SAXParserFactory.newInstance();</p>
<p>SAXParser saxparser= factory.newSAXParser();//创建SAX解析器</p>
<p>MyHandler handler=new MyHandler();//创建事件处理器</p>
<p>saxParser.parse(new File(“Sax_1.xml”),handler);//绑定文件和事件处理者</p>
<p>STAX:Streaming API for XML (StAX) Streaming API for XML (StAX)</p>
<p>是用 Java™ 语言处理 XML 的最新标准。StAX 与其他方法的区别就在于应用程序能够把 XML 作为一个事件流来处理。StAX 允许应用程序代码把这些事件逐个拉出来，而不用提供在解析器方便时从解析器中接收事件的处理程序。</p>
<h4 id="jsp和servlet的区别和联系"><a href="#jsp和servlet的区别和联系" class="headerlink" title="jsp和servlet的区别和联系"></a>jsp和servlet的区别和联系</h4><ol>
<li>jsp经编译后就变成了Servlet.(JSP的本质就是Servlet，JVM只能识别java的类，不能识别JSP的代码,Web容器将JSP的代码编译成JVM能够识别的java类)</li>
<li>jsp更擅长表现于页面显示,servlet更擅长于逻辑控制.</li>
<li>Servlet中没有内置对象，Jsp中的内置对象都是必须通过HttpServletRequest对象，HttpServletResponse对象以及HttpServlet对象得到.<br>Jsp是Servlet的一种简化，使用Jsp只需要完成程序员需要输出到客户端的内容，Jsp中的Java脚本如何镶嵌到一个类中，由Jsp容器完成。而Servlet则是个完整的Java类，这个类的Service方法用于生成对客户端的响应。<br>联系： JSP是Servlet技术的扩展，本质上就是Servlet的简易方式。JSP编译后是“类servlet”。Servlet和JSP最主要的不同点在于，Servlet的应用逻辑是在Java文件中，并且完全从表示层中的HTML里分离开来。而JSP的情况是Java和HTML可以组合成一个扩展名为.jsp的文件。JSP侧重于视图，Servlet主要用于控制逻辑。</li>
</ol>
<h4 id="一个“-java”源文件中是否可以包括多个类（不包括内部类）？有什么限制？"><a href="#一个“-java”源文件中是否可以包括多个类（不包括内部类）？有什么限制？" class="headerlink" title="一个“.java”源文件中是否可以包括多个类（不包括内部类）？有什么限制？"></a>一个“.java”源文件中是否可以包括多个类（不包括内部类）？有什么限制？</h4><p>可以的，一个“.java”源文件里面可以包含多个类，但是只允许有一个public类，并且类名必须和文件名一致。每个编译单元只能有一个public 类。这么做的意思是，每个编译单元只能有一个公开的接口，而这个接口就由其public 类来表示。你可以根据需要，往这个文件里面添加任意多个提供辅助功能的package 权限的类。但是如果这个编译单元里面有两个或两个以上的public 类的话，程序就不知道从哪里导入了，编译器就会报错。　　</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016年终总结与规划]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/01/2016-summerize/</url>
      <content type="html"><![CDATA[<p>转眼之间一年又过去了，不得不感叹时间过的飞起。时光如梭一点不假，年底了做一个自我总结，也算是对自己的一个交代。这一年改变了什么，什么没有变，想想又忍不住狠狠的装了一把。</p>
<a id="more"></a>
<h4 id="技术层面"><a href="#技术层面" class="headerlink" title="技术层面"></a>技术层面</h4><h5 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h5><ul>
<li>熟悉MySQL、Redis、HBase数据库(存储)</li>
<li>熟悉Spring下Web Socket\Web Service的开发，熟悉了Restful接口的开发</li>
<li>可以应付日常的Java开发任务，与同事合作可以应付较为复杂的开发任务（业务）</li>
<li>了解Apache Kafka，可以使用Ambari独立部署集群环境</li>
<li>可以搭建SSM(Spring\Spring MVC\Mybatis)框架</li>
<li>熟悉Java常见的开发工具(Eclipse\Maven\Intellij Idea\Gradle)的使用，并应用于日常开发中</li>
<li>进一步熟悉了GitHub、StackoverFlow网站和Git工具，开发必不可少的朋友</li>
<li>熟悉了Jira、Redmine等项目管理工具，并部署并应用于日常开发中</li>
<li>进一步熟悉持续集成思想，熟悉了Jenkins等持续集成工具，并应用于日常开发中</li>
<li>使用Hexo博客模板引擎搭建了自己的博客，编写开发与生活总结文章</li>
<li>使用LaTex编写了开发总结</li>
<li>熟悉了Wireshark和Tcpdump等网络包分析工具的使用</li>
<li>重新使用起了Linux操作系统</li>
<li>进一步熟悉TCP、HTTP协议、交通部T808协议</li>
<li>阅读了《代码大全》等编程相关书籍</li>
<li>学习了网页开发常见工具(Fiddler、FireBug)的使用，会根据原理进行分析</li>
<li>熟悉了前端的JavaScript、HTML、CSS知识</li>
<li>注重效率的培养，包括Intellij Idea的快捷键，JRebel等等工具的使用</li>
</ul>
<h5 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h5><ul>
<li>了解了Python的基本语法</li>
<li>尝试写了简单的Python代码</li>
</ul>
<h4 id="未来规划"><a href="#未来规划" class="headerlink" title="未来规划"></a>未来规划</h4><p>目前还是比较浮躁的，希望对Java底层有更加深入的了解(JVM)，不止于停留在表面，Java性能调优方面的经验、数据库性能调优经验，只有更深入的了解原理，看到错误时才可以一步一步分析原因，而不是简单的停留在猜测上。从现在开始静下心来，需要选择一个方向努力了。以热爱开源，热爱分享为指导思想，不断学习。乐于助人与寻求别人的帮助，别人没有义务帮助谁，俺有义务助人啊，软件构建里没有谁是全能型选手，取长补短即可。快乐工作，该装的A-C还是得装，一个也不能少，虽然换工作比较频繁，但是收获最大的还是认识一帮开心的朋友，工作也不是那么无趣，工作经验可以没有，换工作的经验必须得有啊。将来会多阅读人文类书籍，好多年一直抱着技术书籍在看，可见功利心还是蛮强的，好久没有阅读人文类书籍了，值得引起重视。不要原地踏步，不要重复，不要无聊。需要进步，需要创造，需要有趣。不断提高效率，想当初修改代码后不断重启项目，每次重启大概耗时1分钟，到后面完全在1秒内搞定，想想也有点小激动。希望以后在开发中由于不熟悉花1天去解决的事情，往后只需要1秒即可。来年的小计划如下：</p>
<ul>
<li>阅读不少于5本人文类书籍</li>
<li>阅读《编译原理》、《算法导论》、《代码大全》</li>
<li>结识朋友</li>
<li>学习Java底层知识(原谅不能量化)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC拦截规则]]></title>
      <url>http://jiangxiaoqiang.com/2016/12/01/springmvc-filter/</url>
      <content type="html"><![CDATA[<p>在Spring MVC中，需要配置Mapping规则。</p>
<a id="more"></a>
<h4 id="拦截-do、-htm"><a href="#拦截-do、-htm" class="headerlink" title="拦截.do、.htm"></a>拦截<em>.do、</em>.htm</h4><p>这是最传统的方式，最简单也最实用。不会导致静态文件（jpg,js,css）被拦截。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dolphin<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="拦截"><a href="#拦截" class="headerlink" title="拦截/"></a>拦截/</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dolphin<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以实现现在很流行的REST风格。很多互联网类型的应用很喜欢这种风格的URL。</p>
<p>弊端：会导致静态文件（jpg,js,css）被拦截后不能正常显示。想实现REST风格，事情就是麻烦一些。后面有解决办法还算简单。</p>
<h4 id="拦截-1"><a href="#拦截-1" class="headerlink" title="拦截/*"></a>拦截/*</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dolphin<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这是一个错误的方式，请求可以通过DispatcherServlet走到Action中，但是返回的内容，如返回的jsp还会再次被拦截，这样导致404错误，即访问不到jsp，也无法访问到html静态页面。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spring-step-by-step（三）-权限管理]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/29/spring-step-by-step-privillege/</url>
      <content type="html"><![CDATA[<h4 id="配置过滤器"><a href="#配置过滤器" class="headerlink" title="配置过滤器"></a>配置过滤器</h4><p>为了在项目中使用Spring Security控制权限，在项目的web.xml文件中，添加过滤器，就可以控制对这个项目的每个请求了。</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Spring-Security数据库表"><a href="#Spring-Security数据库表" class="headerlink" title="Spring Security数据库表"></a>Spring Security数据库表</h4><p>Spring Security默认情况下需要两张表，用户表和权限表。以下是mysql中的建表语句：</p>
<p><a href="http://www.mossle.com:8080/docs/auth/html/ch001-helloworld.html" target="_blank" rel="external">一个简单的HelloWorld</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java单元测试]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/29/java-unit-test/</url>
      <content type="html"><![CDATA[<p>在Intellij Idea中按下快捷键:<code>Ctrl + Alt + T(Test)</code>，弹出如下界面，选择需要创建测试的方法。</p>
<a id="more"></a>
<img src="/2016/11/29/java-unit-test/choose-test-function.jpg" alt="选择创建测试的方法" title="选择创建测试的方法">
<p>选择完毕后会自动生成一个测试类，编写相应的测试代码即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by jiangxiaoqiang on 2016/11/29.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VehicleMessageHandlerTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseAlarm</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        VehicleMessageHandler vehicleMessageHandler = <span class="keyword">new</span> VehicleMessageHandler();</div><div class="line">        String result = vehicleMessageHandler.parseAlarm(<span class="number">1232131</span>);</div><div class="line">        System.out.print(result);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在代码编辑器中右键，选择<code>Debug ‘parseAlarm’</code>菜单即可进行单元测试。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sonarcube代码优化]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/28/sonarcube/</url>
      <content type="html"><![CDATA[<h4 id="Generic-exceptions-should-never-be-thrown"><a href="#Generic-exceptions-should-never-be-thrown" class="headerlink" title="Generic exceptions should never be thrown"></a>Generic exceptions should never be thrown</h4><p>Using such generic exceptions as Error, RuntimeException, Throwable, and Exception prevents calling methods from handling true, system-generated exceptions differently than application-generated errors.</p>
<a id="more"></a>
<p>不应该写成如下方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(String bar)</span> <span class="keyword">throws</span> Throwable </span>&#123;  <span class="comment">// Noncompliant</span></div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"My Message"</span>);     <span class="comment">// Noncompliant</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>应该写成如下方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(String bar)</span> </span>&#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> MyOwnRuntimeException(<span class="string">"My Message"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Instance-methods-should-not-write-to-“static”-fields"><a href="#Instance-methods-should-not-write-to-“static”-fields" class="headerlink" title="Instance methods should not write to “static” fields"></a>Instance methods should not write to “static” fields</h4><p>实例化方法不写静态字段。</p>
<p>优化前：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">     SpringApplicationContextHolder.context = context;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优化后：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setApplicationContextImpl</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">    SpringApplicationContextHolder.context = context;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">    setApplicationContextImpl(context);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Neither-“Math-abs”-nor-negation-should-be-used-on-numbers-that-could-be-“MIN-VALUE”"><a href="#Neither-“Math-abs”-nor-negation-should-be-used-on-numbers-that-could-be-“MIN-VALUE”" class="headerlink" title="Neither “Math.abs” nor negation should be used on numbers that could be “MIN_VALUE”"></a>Neither “Math.abs” nor negation should be used on numbers that could be “MIN_VALUE”</h4><p>Math.abs(Integer.MIN_VALUE)的值还是其本身。通过查阅Java的API文档，我们看到对abs(int a)运算，“如果参数等于 Integer.MIN_VALUE 的值（即能够表示的最小负 int 值），那么结果与该值相同且为负。</p>
<p>优化前：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> newlineId = Math.abs(randomPointId.replaceAll(<span class="string">"-"</span>, <span class="string">""</span>).hashCode());</div></pre></td></tr></table></figure>
<p>优化后：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String hashedSourceId = sourceId.replaceAll(<span class="string">"-"</span>, <span class="string">""</span>);</div><div class="line"><span class="keyword">if</span> (hashedSourceId.hashCode() != Integer.MIN_VALUE) &#123;</div><div class="line">    Integer hashedId = Math.abs(hashedSourceId.hashCode());</div><div class="line">    hashedIds.add(hashedId.toString());</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    hashedIds.add(String.valueOf(Integer.MAX_VALUE));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[推荐书《代码大全》(Code Complete)]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/27/code-complete/</url>
      <content type="html"><![CDATA[<p>今天晚上下班时，朋友跟我讲：应该尽量使用局部变量，避免使用全局变量。</p>
<p>我说：这是编程常识啊，怎么还不知道呢。在心里暗暗佩服自己，这个B装的真的是完美，完全找不到任何破绽。</p>
<p>闲言少叙，如果想到知道更多关于编程的经验分享，那么我推荐你阅读《代码大全》(Code Complete)。</p>
<a id="more"></a>
<img src="/2016/11/27/code-complete/code-complete.jpg" alt="封面" title="封面">
<p>一开始是由于好奇，什么书吹的这么神奇？等到阅读后，发现再多的溢美之词也不足以形容。</p>
<p>是自己真的阅读过才在这里鼓吹，开始还以为是实现各种功能的各种代码片段组成的一本书籍。心里暗自庆幸，这下拷贝更便捷了。但是阅读之后才知道，它是另一种境界了，代码片段只是表面招式而已，而这本书里所总结的经验和概括的方法论，是帮助你修炼内力。不论你是做Android开发，前端开发、后端开发，Java、C、C++，都可以从中获得灵感。</p>
<p>阅读此书后，你会知道什么代码是优秀的代码，什么样的写法是不太合适的。他是编程通用的方法论，不会跟你争论哪门语言是最好的语言，括号是不是应该换行。即使工作了十几年的老程序员，当你阅读他的代码时，也不会有膜拜的感觉。因为你可以看出来哪些地方写的好，哪些地方有待改进的空间。并不代表他的水平有问题。</p>
<p>里面还有一段关于注释的讨论，对于平时的代码是否要需要注释，会有更加深入的理解，非常经典。</p>
<p>由于此书实在是爱不释手，中文英文版本都买了。推荐你也一定要阅读。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面试经历-重庆]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/26/interview-experience/</url>
      <content type="html"><![CDATA[<p>最近有换工作的打算，把面试经历分享出来，希望可以给求职的朋友一个参考。工作就像婚姻，是一个双向选择的过程，不找最好的，要找最适合自己的。</p>
<h4 id="重庆市宽景网络技术有限公司"><a href="#重庆市宽景网络技术有限公司" class="headerlink" title="重庆市宽景网络技术有限公司"></a>重庆市宽景网络技术有限公司</h4><p>公司地址在渝北区龙溪街道金山路18号中渝都会首站4幢12-5，嘉州路站下车3B出口步行500米即到。交通还是蛮方便的。这幢大厦是居民楼，但是大堂看起来又有点写字楼的味道(商住两用)，富丽堂皇，有点高端。</p>
<p>进去后，由于早先已到了另一位面试者，等待了十几分钟左右。面试时，给看了一个后台相关的网页，大概问了一下做这样一个网页需要多长时间。是否熟悉Spring Boot，是否有自己的脚手架(开发框架，具备一些基础功能，如权限等)。面试官也反复强调需要招聘的一个技术经理级别的人。同时也强调，技术不是特别复杂，就是一些简单的增删改(CRUD)即可。公司需要找一个手头能有一个带有基础功能系统，或者能够在极短时间里搭建一个简单系统的人。由于没有脚手架，做到快速开发，开箱即用。最后的面试结果是被面试官婉拒了。</p>
<a id="more"></a>
<p>大致了解了宽景网络公司做的业务和技术要求，如果对技术追求不是特别苛刻，能够乐于且擅长做CRUD的同学，是一个不错的选择。</p>
<p>官方网站：<a href="http://www.cqwv.net/" target="_blank" rel="external">这里</a></p>
<p>面试评价：6</p>
<h4 id="重庆同方融达信息科技有限公司"><a href="#重庆同方融达信息科技有限公司" class="headerlink" title="重庆同方融达信息科技有限公司"></a>重庆同方融达信息科技有限公司</h4><p>重庆同方融达信息科技有限公司系同方股份有限公司全资子公司，成立于2011年9月。面试过程大概持续了将近半个小时。两位面试官，其中一位年级稍长，年纪稍长的那位估计是领导罗，不停的发问，而且还打断说话。了解了以前做的项目的情况，问自己的优点，和缺点。优点就讲了：善于总结。缺点没有回答上来，有点套路的感觉。记得以前说的回答此类问题有固定套路的，一时想不起来了。比如什么工作必须追求完美什么的，总体思路就是把优点说成缺点。这个套路还没有玩转。本来想了解公司的业务情况的，面试官不愿意透露，也就作罢了。估计是政府项目比较多，项目和现在做的这一块还是比较匹配的。整体印象还是不错的。</p>
<p>官方网站：<a href="http://rota.thtf.com.cn/tfrdqd/tPtTemplate/syFtl" target="_blank" rel="external">这里</a></p>
<p>面试评价：6</p>
<h4 id="重庆致树网络科技有限公司"><a href="#重庆致树网络科技有限公司" class="headerlink" title="重庆致树网络科技有限公司"></a>重庆致树网络科技有限公司</h4><p>和公司的合伙人之一聊了将近2个小时，不得不说创业公司还是蛮有意思的,也非常诚恳。天，说起产品和前景来真的是停不下来阿。虽然在心里咆哮，兄弟，淡定淡定，公司还没有赚钱呢！但是表面还是表现的像：兄弟，好样的，咱这就橹起袖子干一票吧。</p>
<p>公司主要做文化类产品的直播，直播一些手工艺品的制作过程。可能会衍生到更多品类的文化产品上，想法还是蛮新奇的。</p>
<p>官方网站：无</p>
<p>面试评价：7</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis主键失效原理]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/24/redis-expire-strategy/</url>
      <content type="html"><![CDATA[<p>Redis 中的主键失效是如何实现的，即失效的主键是如何删除的？实际上，Redis 删除失效主键的方法主要有两种：</p>
<ul>
<li><p>消极方法（passive way），在主键被访问时如果发现它已经失效，那么就删除它</p>
</li>
<li><p>积极方法（active way），周期性地从设置了失效时间的主键中选择一部分失效的主键删除</p>
</li>
</ul>
<a id="more"></a>
<h4 id="消极方法-Passive-Way"><a href="#消极方法-Passive-Way" class="headerlink" title="消极方法(Passive Way)"></a>消极方法(Passive Way)</h4><p>消极方法也叫惰性删除，在大致了解了 Redis 是如何维护设置了失效时间的主键之后，我们就先来看一看 Redis 是如何实现消极地删除失效主键的。如下代码给出了一个名为 expireIfNeeded 的函数，这个函数在任何访问数据的函数中都会被调用，也就是说 Redis 在实现 GET、MGET、HGET、LRANGE 等所有涉及到读取数据的命令时都会调用它，它存在的意义就是在读取数据之前先检查一下它有没有失效，如果失效了就删除它。惰性删除也即是消极删除(Passive Way)的源代码如下所示：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">expireIfNeeded</span><span class="params">(redisDb *db, robj *key)</span> </span>&#123;</div><div class="line">    <span class="keyword">mstime_t</span> when = getExpire(db,key);</div><div class="line">    <span class="keyword">mstime_t</span> now;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (when &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">/* No expire for this key */</span></div><div class="line"></div><div class="line">    <span class="comment">/* Don't expire anything while loading. It will be done later. */</span></div><div class="line">    <span class="keyword">if</span> (server.loading) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* If we are in the context of a Lua script, we claim that time is</span></div><div class="line">     * blocked to when the Lua script started. This way a key can expire</div><div class="line">     * only the first time it is accessed and not in the middle of the</div><div class="line">     * script execution, making propagation to slaves / AOF consistent.</div><div class="line">     * See issue #1525 on Github for more information. */</div><div class="line">    now = server.lua_caller ? server.lua_time_start : mstime();</div><div class="line"></div><div class="line">    <span class="comment">/* If we are running in the context of a slave, return ASAP:</span></div><div class="line">     * the slave key expiration is controlled by the master that will</div><div class="line">     * send us synthesized DEL operations for expired keys.</div><div class="line">     *</div><div class="line">     * Still we try to return the right information to the caller,</div><div class="line">     * that is, 0 if we think the key should be still valid, 1 if</div><div class="line">     * we think the key is expired at this time. */</div><div class="line">    <span class="keyword">if</span> (server.masterhost != <span class="literal">NULL</span>) <span class="keyword">return</span> now &gt; when;</div><div class="line"></div><div class="line">    <span class="comment">/* Return when this key has not expired */</span></div><div class="line">    <span class="keyword">if</span> (now &lt;= when) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* Delete the key */</span></div><div class="line">    server.stat_expiredkeys++;</div><div class="line">    propagateExpire(db,key,server.lazyfree_lazy_expire);</div><div class="line">    notifyKeyspaceEvent(NOTIFY_EXPIRED,</div><div class="line">        <span class="string">"expired"</span>,key,db-&gt;id);</div><div class="line">    <span class="keyword">return</span> server.lazyfree_lazy_expire ? dbAsyncDelete(db,key) :</div><div class="line">                                         dbSyncDelete(db,key);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="积极方法-Active-Way"><a href="#积极方法-Active-Way" class="headerlink" title="积极方法(Active Way)"></a>积极方法(Active Way)</h4><p>以上我们通过对expireIfNeeded函数的介绍了解了Redis是如何以一种消极的方式删除失效主键的，但是仅仅通过这种方式显然是不够的，因为如果某些失效的主键迟迟等不到再次访问的话，Redis就永远不会知道这些主键已经失效，也就永远也不会删除它们了，这无疑会导致内存空间的浪费。因此，Redis还准备了一招积极的删除方法，该方法利用Redis的时间事件来实现，即每隔一段时间就中断一下完成一些指定操作，其中就包括检查并删除失效主键。实现的代码在<code>expire.c</code>文件中，如下所示：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">activeExpireCycle</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">    <span class="comment">/* This function has some global state in order to continue the work</span></div><div class="line">     * incrementally across calls. */</div><div class="line">    <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> current_db = <span class="number">0</span>; <span class="comment">/* Last DB tested. */</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> timelimit_exit = <span class="number">0</span>;      <span class="comment">/* Time limit hit in previous call? */</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> last_fast_cycle = <span class="number">0</span>; <span class="comment">/* When last fast cycle ran. */</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> j, iteration = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> dbs_per_call = CRON_DBS_PER_CALL;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> start = ustime(), timelimit;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (type == ACTIVE_EXPIRE_CYCLE_FAST) &#123;</div><div class="line">        <span class="comment">/* Don't start a fast cycle if the previous cycle did not exited</span></div><div class="line">         * for time limt. Also don't repeat a fast cycle for the same period</div><div class="line">         * as the fast cycle total duration itself. */</div><div class="line">        <span class="keyword">if</span> (!timelimit_exit) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (start &lt; last_fast_cycle + ACTIVE_EXPIRE_CYCLE_FAST_DURATION*<span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">        last_fast_cycle = start;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* We usually should test CRON_DBS_PER_CALL per iteration, with</span></div><div class="line">     * two exceptions:</div><div class="line">     *</div><div class="line">     * 1) Don't test more DBs than we have.</div><div class="line">     * 2) If last time we hit the time limit, we want to scan all DBs</div><div class="line">     * in this iteration, as there is work to do in some DB and we don't want</div><div class="line">     * expired keys to use memory for too much time. */</div><div class="line">    <span class="keyword">if</span> (dbs_per_call &gt; server.dbnum || timelimit_exit)</div><div class="line">        dbs_per_call = server.dbnum;</div><div class="line"></div><div class="line">    <span class="comment">/* We can use at max ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC percentage of CPU time</span></div><div class="line">     * per iteration. Since this function gets called with a frequency of</div><div class="line">     * server.hz times per second, the following is the max amount of</div><div class="line">     * microseconds we can spend in this function. */</div><div class="line">    timelimit = <span class="number">1000000</span>*ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC/server.hz/<span class="number">100</span>;</div><div class="line">    timelimit_exit = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (timelimit &lt;= <span class="number">0</span>) timelimit = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (type == ACTIVE_EXPIRE_CYCLE_FAST)</div><div class="line">        timelimit = ACTIVE_EXPIRE_CYCLE_FAST_DURATION; <span class="comment">/* in microseconds. */</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; dbs_per_call; j++) &#123;</div><div class="line">        <span class="keyword">int</span> expired;</div><div class="line">        redisDb *db = server.db+(current_db % server.dbnum);</div><div class="line"></div><div class="line">        <span class="comment">/* Increment the DB now so we are sure if we run out of time</span></div><div class="line">         * in the current DB we'll restart from the next. This allows to</div><div class="line">         * distribute the time evenly across DBs. */</div><div class="line">        current_db++;</div><div class="line"></div><div class="line">        <span class="comment">/* Continue to expire if at the end of the cycle more than 25%</span></div><div class="line">         * of the keys were expired. */</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">long</span> num, slots;</div><div class="line">            <span class="keyword">long</span> <span class="keyword">long</span> now, ttl_sum;</div><div class="line">            <span class="keyword">int</span> ttl_samples;</div><div class="line"></div><div class="line">            <span class="comment">/* If there is nothing to expire try next DB ASAP. */</span></div><div class="line">            <span class="keyword">if</span> ((num = dictSize(db-&gt;expires)) == <span class="number">0</span>) &#123;</div><div class="line">                db-&gt;avg_ttl = <span class="number">0</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            slots = dictSlots(db-&gt;expires);</div><div class="line">            now = mstime();</div><div class="line"></div><div class="line">            <span class="comment">/* When there are less than 1% filled slots getting random</span></div><div class="line">             * keys is expensive, so stop here waiting for better times...</div><div class="line">             * The dictionary will be resized asap. */</div><div class="line">            <span class="keyword">if</span> (num &amp;&amp; slots &gt; DICT_HT_INITIAL_SIZE &amp;&amp;</div><div class="line">                (num*<span class="number">100</span>/slots &lt; <span class="number">1</span>)) <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="comment">/* The main collection cycle. Sample random keys among keys</span></div><div class="line">             * with an expire set, checking for expired ones. */</div><div class="line">            expired = <span class="number">0</span>;</div><div class="line">            ttl_sum = <span class="number">0</span>;</div><div class="line">            ttl_samples = <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (num &gt; ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP)</div><div class="line">                num = ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (num--) &#123;</div><div class="line">                dictEntry *de;</div><div class="line">                <span class="keyword">long</span> <span class="keyword">long</span> ttl;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> ((de = dictGetRandomKey(db-&gt;expires)) == <span class="literal">NULL</span>) <span class="keyword">break</span>;</div><div class="line">                ttl = dictGetSignedIntegerVal(de)-now;</div><div class="line">                <span class="keyword">if</span> (activeExpireCycleTryExpire(db,de,now)) expired++;</div><div class="line">                <span class="keyword">if</span> (ttl &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">/* We want the average TTL of keys yet not expired. */</span></div><div class="line">                    ttl_sum += ttl;</div><div class="line">                    ttl_samples++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">/* Update the average TTL stats for this database. */</span></div><div class="line">            <span class="keyword">if</span> (ttl_samples) &#123;</div><div class="line">                <span class="keyword">long</span> <span class="keyword">long</span> avg_ttl = ttl_sum/ttl_samples;</div><div class="line"></div><div class="line">                <span class="comment">/* Do a simple running average with a few samples.</span></div><div class="line">                 * We just use the current estimate with a weight of 2%</div><div class="line">                 * and the previous estimate with a weight of 98%. */</div><div class="line">                <span class="keyword">if</span> (db-&gt;avg_ttl == <span class="number">0</span>) db-&gt;avg_ttl = avg_ttl;</div><div class="line">                db-&gt;avg_ttl = (db-&gt;avg_ttl/<span class="number">50</span>)*<span class="number">49</span> + (avg_ttl/<span class="number">50</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">/* We can't block forever here even if there are many keys to</span></div><div class="line">             * expire. So after a given amount of milliseconds return to the</div><div class="line">             * caller waiting for the other active expire cycle. */</div><div class="line">            iteration++;</div><div class="line">            <span class="keyword">if</span> ((iteration &amp; <span class="number">0xf</span>) == <span class="number">0</span>) &#123; <span class="comment">/* check once every 16 iterations. */</span></div><div class="line">                <span class="keyword">long</span> <span class="keyword">long</span> elapsed = ustime()-start;</div><div class="line"></div><div class="line">                latencyAddSampleIfNeeded(<span class="string">"expire-cycle"</span>,elapsed/<span class="number">1000</span>);</div><div class="line">                <span class="keyword">if</span> (elapsed &gt; timelimit) timelimit_exit = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (timelimit_exit) <span class="keyword">return</span>;</div><div class="line">            <span class="comment">/* We don't repeat the cycle if there are less than 25% of keys</span></div><div class="line">             * found expired in the current DB. */</div><div class="line">        &#125; <span class="keyword">while</span> (expired &gt; ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP/<span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://redis.io/commands/expire" target="_blank" rel="external">EXPIRE key seconds</a></p>
<p><a href="http://www.voidcn.com/blog/wuliusir/article/p-6001792.html" target="_blank" rel="external">redis学习笔记——Redis过期键的删除策略</a></p>
<p><a href="https://github.com/antirez/redis" target="_blank" rel="external">redis github</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring中单用户登录]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/23/single-user-login/</url>
      <content type="html"><![CDATA[<p>在<code>web.xml</code>文件的配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></div><div class="line">        org.springframework.security.web.session.HttpSessionEventPublisher</div><div class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>单用户登录，当其他用户登录时，自动退出，在<code>Spring-Security.xml</code>中作如下配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置SpringSecurity的http安全服务 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">sec:session-management</span> <span class="attr">invalid-session-url</span>=<span class="string">"/login?type=expired"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 单用户登陆  --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 仅配置max-sessions="1",则第二次登录会让第一次登录失效。 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 同时配置max-sessions="1" error-if-maximum-exceeded="true"，则可以防止第二次登录--&gt;</span></div><div class="line">    <span class="comment">&lt;!-- max-sessions="1" 其中1表示一个帐号可同时登录的次数  --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">sec:concurrency-control</span> <span class="attr">max-sessions</span>=<span class="string">"1"</span> <span class="attr">error-if-maximum-exceeded</span>=<span class="string">"false"</span> <span class="attr">expired-url</span>=<span class="string">"/login?type=expired"</span></span></div><div class="line">    /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">sec:session-management</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在标签中加入concurrency-control配置，设置max-sessions=1。当另一个用户登录之后，当前用户操作时会自动跳转到登录页面。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Google搜索技巧]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/20/paper-searching/</url>
      <content type="html"><![CDATA[<p>如今几乎每天都会使用搜索引擎，虽然没有必要了解搜索引擎的工作原理，但是了解一些常见的搜索技巧可以快速的帮助自己找到内容，节省不少时间。有一种技术叫Google Hacking，就是直接使用Google搜索出有价值的信息，不信可以直接在搜索引擎中输入自己的名字，相信出来的结果会让你相当震撼的。曾经使用Google直接把喜欢的一个女孩子的身份证号码都搜索出来的，其实获取这样的信息还是比较容易的。这里以Google为例，其他搜索引擎原理差不多。今天需要了解关于<strong>静脉可视化技术的发展</strong>状况。首先明确中文关键字是：<strong>静脉可视化</strong>，英文关键字是：<strong>Intravenous visualization</strong>。</p>
<a id="more"></a>
<h4 id="根据文件类型搜索"><a href="#根据文件类型搜索" class="headerlink" title="根据文件类型搜索"></a>根据文件类型搜索</h4><p>搜索所有关于静脉可视化的doc文档，在Google中输入如下查询关键字。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">静脉 可视化  filetype:pdf</div></pre></td></tr></table></figure>
<p>总共有3600个符合条件的结果。</p>
<img src="/2016/11/20/paper-searching/searching-by-filetype.jpg" alt="Google根据文件类型查找" title="Google根据文件类型查找">
<p>搜索所有关于静脉可视化的pdf文档。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">静脉 可视化  filetype:doc</div></pre></td></tr></table></figure>
<p>仿佛没有什么值得挖掘的内容，有一篇《静脉可视化装置减少静脉被重复扎针的痛苦 - 后花园网文》勉强符合要求。此时可以精确搜索，全字匹配，缩小搜索范围。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;静脉可视化&quot; filetype:pdf</div></pre></td></tr></table></figure>
<p>其中双引号表示精确匹配，共出来有3条结果，都不是想要的。看来不应该那么学术化，学术资料都被某一帮人锁起来了，必须要给钱才能看，个人认为是非常不合理的。此时直接放弃学术资料。直接在搜索框里输入如下关键字：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">静脉可视化</div></pre></td></tr></table></figure>
<p>共有58500个结果，如下图所示。这些才是想要的结果。</p>
<img src="/2016/11/20/paper-searching/simple-search.jpg" alt="Google简单搜索" title="Google简单搜索">
<h4 id="排除关键字"><a href="#排除关键字" class="headerlink" title="排除关键字"></a>排除关键字</h4><p>假设要寻找“红外热成像技术”的相关论文，在<a href="https://scholar.google.com" target="_blank" rel="external">Google学术(Google Scholar)</a>里输入关键字“红外热成像技术”，出来65400条结果。如果想要排除红外热成像技术在电力方面的应用的论文，键入如下关键字：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">红外热成像技术 -电力</div><div class="line">红外热成像技术 -步态 -夜视 -反潜 -制冷 -问题 -看法 -测温 -隐身 -机载 -煤 -保温 -车 -飞机 -水泥 -森林 -几何 -电力 -金属 -视频 -建筑 -军事 -无损 -火焰 -农业 -物理 -电气  -电路</div></pre></td></tr></table></figure>
<p>参考：</p>
<ul>
<li><a href="http://wdxtub.com/2016/03/26/google-tip/" target="_blank" rel="external">Google 搜索技巧</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HBase重复数据问题解决思路]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/19/hbase-dulplicate-data/</url>
      <content type="html"><![CDATA[<p>解决思路1可以设计消息主键，每次插入数据时，查询判断此消息是否已经写入，可以排除重复写入数据问题。但是此种手段需要查询HBase，由于写入并发量相对较高&gt;1000条/s。会影响写入速度。由于此时有单点的Redis,由于数据到达的时间相隔不会太长，可以考虑将数据持久化到Redis中，插入时，到Redis中查询，Redis中查询复杂度为常数，基本可以忽略查询对性能的影响。判断是否已经写入。而写入到Redis中的数据可以设置过期时间，可以自动清除。</p>
<a id="more"></a>
<p>采用此种方式，需要考虑，新的消费者不能消费数据from beginning。如果新消费者从头开始消费数据，此时Redis缓存已经清除，也会重复写入数据。需要在写入时作相应判断，超过Redis缓存到达的数据不用写入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">positionInfoHandler</span><span class="params">(KafkaRecievedLocationMessage&lt;KafkaRecievedLocationMessageBody&gt; kafkaRecievedLocationMessage, String groupId)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (groupId != <span class="keyword">null</span> &amp;&amp; groupId.equals(PublicVariable.HBASE_GROUPID)) &#123;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 将最近的位置数据缓存到Redis中</div><div class="line">         * 判断重复数据查询Redis数据库</div><div class="line">         * Redis的Key设计采用topic+消息类型+时间来标志消息的唯一性</div><div class="line">         * 如果消息在Redis存在，代表已经写入，将忽略</div><div class="line">         * 后期可以考虑添加事务</div><div class="line">         *</div><div class="line">         */</div><div class="line">        String gpsTime = String.valueOf(kafkaRecievedLocationMessage.getData().getMsgBody().getGps_time());</div><div class="line">        String positionKey = kafkaRecievedLocationMessage.getDesc().getTopic() + <span class="string">"-"</span> + kafkaRecievedLocationMessage.getDesc().getMsgID() + <span class="string">"-"</span> + gpsTime;</div><div class="line">        String persistStatus = RedisHelper.get(positionKey, PublicVariable.REDIS_DEFAULT_DATABASE);</div><div class="line">        <span class="keyword">if</span> (StringUtils.isBlank(persistStatus)) &#123;</div><div class="line">            <span class="comment">/**</span></div><div class="line">             * 缓存的位置数据将在12小时后过期</div><div class="line">             * 只有第一次设置会成功</div><div class="line">             * Redis本身是原子操作</div><div class="line">             */</div><div class="line">            String result = RedisHelper.setValueNx(positionKey, <span class="string">"1"</span>, <span class="number">2592000</span>, PublicVariable.REDIS_DEFAULT_DATABASE);</div><div class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span> &amp;&amp; result.equals(<span class="string">"OK"</span>)) &#123;</div><div class="line">            	<span class="comment">//保存数据</span></div><div class="line">                persistOilImpl(kafkaRecievedLocationMessage, groupId);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置Redis的Key，方法setValueNx，如果Key设置成功会返回OK，如果设置失败则返回null：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">EX seconds -- Set the specified expire time, in seconds.</div><div class="line">PX milliseconds -- Set the specified expire time, in milliseconds.</div><div class="line">NX -- Only set the key if it does not already exist.</div><div class="line">XX -- Only set the key if it already exist.</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置数据</div><div class="line"> * 如果已经存在Key</div><div class="line"> * 键已经存在，则设置失败</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> key     //key</div><div class="line"> * <span class="doctag">@param</span> value   //值</div><div class="line"> * <span class="doctag">@param</span> timeOut //过期时间</div><div class="line"> * <span class="doctag">@param</span> db      //数据库序号</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">setValueNx</span><span class="params">(String key, String value, Integer timeOut, Integer db)</span> </span>&#123;</div><div class="line">    Jedis jredis = <span class="keyword">null</span>;</div><div class="line">    String result = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        JedisPool poolItem = pools.get(db);</div><div class="line">        jredis = poolItem.getResource();</div><div class="line">        <span class="keyword">if</span> (timeOut &gt; <span class="number">0</span>) &#123;</div><div class="line">            jredis.expire(key, timeOut);</div><div class="line">        &#125;</div><div class="line">        result = jredis.set(key, value, <span class="string">"nx"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        log.error(<span class="string">"set value encount an error"</span>, e);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (jredis != <span class="keyword">null</span>) &#123;</div><div class="line">            jredis.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://redis.io/commands/SET" target="_blank" rel="external">SET key value [EX seconds] [PX milliseconds] [NX|XX]</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[curl使用]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/19/curl-using/</url>
      <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>curl is a tool to transfer data from or to a server, using one of the supported protocols (DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET and TFTP). The command is designed to work without user interaction.</p>
<p>curl offers a busload of useful tricks like proxy support, user authentication, FTP upload, HTTP post, SSL connections, cookies, file transfer resume, Metalink, and more. As you will see below, the number of features will make your head spin!</p>
<a id="more"></a>
<h4 id="查看网页源码"><a href="#查看网页源码" class="headerlink" title="查看网页源码"></a>查看网页源码</h4><p>直接在curl命令后加上网址，就可以看到网页源码。我们以网址www.jiangxiaoqiang.com为例，输入如下命令行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl www.jiangxiaoqiang.com</div></pre></td></tr></table></figure>
<p>返回的结果为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>301 Moved Permanently<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"white"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>301 Moved Permanently<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>nginx<span class="tag">&lt;/<span class="name">center</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Ｃookie"></a>Ｃookie</h4><p>使用<code>--cookie</code>参数，可以让curl发送cookie，如下命令行所示。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl --cookie <span class="string">"name=xxx"</span> www.example.com</div></pre></td></tr></table></figure>
<p><code>-c cookie-file</code>可以保存服务器返回的cookie到文件，<code>-b cookie-file</code>可以使用这个文件作为cookie信息，进行后续的请求。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -c cookies http://example.com</div><div class="line">curl -b cookies http://example.com</div></pre></td></tr></table></figure>
<p>如果服务端采用Cookie验证登录请求。那么可以首先用浏览器登录网页，找到相应的Cookie，如下图所示：</p>
<img src="/2016/11/19/curl-using/curl-setcookie.jpg" alt="找到Cookie" title="找到Cookie">
<p>当Curl请求时，附加上Cookie就可以模拟浏览器的登录请求动作了，如下命令所示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl --cookie <span class="string">"cc-o-t=Q2ZWTGp3bFQrTmtOcG9pcTJ4SFV2VnpmNzNhaEhMbktoQWlXeWVyaGhVS3JWeVJEcEprTXBsbldDS3VCN01CeVRFNGxYVTZmQ2hIbHhTSy8zKzF3cDQvYjEwRncxUXgrQ3pMWC9XeTYzcXFrQ1NqQWkrdXRhMUJEc3RZV3ExK0k"</span> http://localhost:28080/api/xzss/detail/1</div></pre></td></tr></table></figure>
<h4 id="请求API数据"><a href="#请求API数据" class="headerlink" title="请求API数据"></a>请求API数据</h4><p>比如需要在请求头中添加Key、Value键值对，可以添加-H(Header)参数，如下命令行所示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">"APPID:123"</span> http://localhost:28080/api/xysj?xdrShxym=addd</div></pre></td></tr></table></figure>
<p>如果是需要发送多个请求头，那么多次指定-H参数即可,如下命令所示。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">"APPID:123"</span> -H <span class="string">"TIMESTAMP:2016-12-19 16:58:02"</span> -H <span class="string">"ECHOSTR:sdsaasf"</span> -H <span class="string">"TOKEN:sdsss"</span> http://localhost:28080/api/xysj?xdrShxym=addd</div></pre></td></tr></table></figure>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>在Restful多参数请求时，需要使用转义符号。url为<code>http://mywebsite.com/index.PHP?a=1&amp;b=2&amp;c=3</code>时，web形式下访问url地址，使用$_GET是可以获取到所有的参数。然而在Linux下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://mywebsite.com/index.php?a=1&amp;b=2&amp;c=3</div></pre></td></tr></table></figure>
<p>$_GET只能获取到参数a,由于url中有&amp;，其他参数获取不到，在linux系统中&amp;会使进程系统后台运行,必须对&amp;进行下转义才能$_GET获取到所有参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://mywebsite.com/index.php?a=1\&amp;b=2\&amp;c=3</div></pre></td></tr></table></figure>
<p>这一个细节需要注意。</p>
<h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><p>如下命令是使用curl下载XX-net工具。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o xxnet.zip https://codeload.github.com/XX-net/XX-Net/zip/3.2.8</div></pre></td></tr></table></figure>
<p>-o, –output <file>，文件的保存名称。</file></p>
<h4 id="提交POST请求"><a href="#提交POST请求" class="headerlink" title="提交POST请求"></a>提交POST请求</h4><p>使用Curl提交Post请求如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">"APPID:hlb11529c136998cb6"</span> -H <span class="string">"TIMESTAMP:2016-12-19 16:58:02"</span> -H <span class="string">"ECHOSTR:sdsaasf"</span> -H <span class="string">"TOKEN:14d45648c62a746ae9dd9b90c03c50893061222d"</span> -H <span class="string">"Accept:application/json"</span> -H <span class="string">"Accept:application/json"</span> -H <span class="string">"Content-Type:application/json"</span> -X POST <span class="_">-d</span> <span class="string">'&#123;"id":1&#125;'</span> http://localhost:28080/api/xzss/savejson</div><div class="line"></div><div class="line">curl -H <span class="string">"APPID:hlb11529c136998cb6"</span> -H <span class="string">"TIMESTAMP:2016-12-19 16:58:02"</span> -H <span class="string">"ECHOSTR:sdsaasf"</span> -H <span class="string">"TOKEN:14d45648c62a746ae9dd9b90c03c50893061222d"</span> http://192.168.32.105:28080/api/blacklist?xdr=4567890123</div></pre></td></tr></table></figure>
<p>使用Curl请求时，默认是Get请求，如果需要显示指定请求类型，那么需要加上-X(–request)参数。</p>
<p>参考资料：</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2011/09/curl.html" target="_blank" rel="external">curl网站开发指南</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[迁移解析服务]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/16/migration-parse-service/</url>
      <content type="html"><![CDATA[<p>迁移解析服务是将服务在不同主机上部署。</p>
<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>在解析服务器上，使用如下命令启动Tomcat:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /opt/tomcat/bin</div><div class="line">./catalina.sh start</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>查看输出日志，检查服务是否正常启动：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /opt/tomcat/logs</div><div class="line">tail <span class="_">-f</span> catalina.out</div></pre></td></tr></table></figure>
<h4 id="配置映射主机"><a href="#配置映射主机" class="headerlink" title="配置映射主机"></a>配置映射主机</h4><p>使用如下命令打开hosts文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/hosts</div></pre></td></tr></table></figure>
<p>添加主机映射。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">192.168.24.195 hostname1</div><div class="line">192.168.24.226 hostname2</div></pre></td></tr></table></figure>
<p>添加主机映射之后，从新启动解析服务即可，不必重新启动计算机。</p>
<h4 id="验证迁移"><a href="#验证迁移" class="headerlink" title="验证迁移"></a>验证迁移</h4><p>部署完毕后一定要验证，因为在解析服务器上日志打印OK并不代表数据成功写入Kafka集群中，所以验证最后验证迁移是否成功，在Kafka服务器中，切换到Kafka的目录：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/hdp/2.4.3.0-227/kafka/bin</div></pre></td></tr></table></figure>
<p>使用如下命令查看迁移是否成功：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./kafka-console-consumer.sh --zookeeper localhost:2181 --topic 0720688</div></pre></td></tr></table></figure>
<p>其中，0720688是需要消费的主题。启动解析服务后，将解析服务Tomcat日志中写入的主题拷贝进命令行中启动消费者，<strong>如果能够成功消费到数据</strong>，代表迁移成功。否则，迁移失败。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redmine安装]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/15/redmine-install/</url>
      <content type="html"><![CDATA[<h4 id="Redmine简介"><a href="#Redmine简介" class="headerlink" title="Redmine简介"></a>Redmine简介</h4><p>Redmine 是一个网页界面的项目管理与缺陷跟踪管理系统的自由及开放源代码软件工具。它集成了项目管理所需的各项功能：日历、燃尽图和甘特图 以协助可视化表现项目与时间限制，问题跟踪和版本控制。此外，Redmine也可以同时处理多个项目。<br>Redmine 是以 Ruby on Rails 撰写的架构，它横跨多个平台与数据库，它的设计很明显是受一些类似功能软件包的Trac所影响。此外，它也是Bitnami 应用库的一部分。</p>
<a id="more"></a>
<p>安装的环境是CentOS 7.2，查看CentOS版本可以使用命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /etc/redhat-release</div></pre></td></tr></table></figure>
<p>安装前查看<a href="http://www.redmine.org/projects/redmine/wiki/RedmineInstall" target="_blank" rel="external">Redmine版本的对应关系</a>。</p>
<h4 id="安装依赖包-Install-pre-dependencies"><a href="#安装依赖包-Install-pre-dependencies" class="headerlink" title="安装依赖包(Install pre-dependencies)"></a>安装依赖包(Install pre-dependencies)</h4><p>使用如下命令安装依赖包。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install libyaml-devel zlib-devel curl-devel openssl-devel httpd-devel apr-devel apr-util-devel gcc ruby-devel gcc-c++ make postgresql-devel ImageMagick-devel sqlite-devel perl-LDAP mod_perl perl-Digest-SHA</div></pre></td></tr></table></figure>
<h4 id="安装Ruby-Install-Ruby"><a href="#安装Ruby-Install-Ruby" class="headerlink" title="安装Ruby(Install Ruby)"></a>安装Ruby(Install Ruby)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/Downloads  <span class="comment"># YOUR FOLDER OF CHOICE</span></div><div class="line">ftp ftp.ruby-lang.org</div></pre></td></tr></table></figure>
<p>如果ftp未安装，输入如下命令安装ftp。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y ftp</div></pre></td></tr></table></figure>
<p>从FTP上获取Ruby安装文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ftp&gt; Anonymous  <span class="comment"># USERLOGIN</span></div><div class="line">ftp&gt; <span class="string">'none'</span>, just hit Enter  <span class="comment"># NO PASSWORD</span></div><div class="line">ftp&gt; <span class="built_in">cd</span> /pub/ruby</div><div class="line">ftp&gt; get get ruby-1.8.7-p358.tar.gz  <span class="comment"># XXX is currently 358, as of 03/2012</span></div><div class="line">ftp&gt; <span class="built_in">bye</span></div></pre></td></tr></table></figure>
<p>也可以使用wget下载安装文件，此处采用此种方式，使用wget命令下载能够看到文件下载的进度，FTP方式等了许久没有响应，遂放弃，采用wget下载：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget ftp://ftp.ruby-lang.org/pub/ruby/ruby-1.8.7-p358.tar.gz</div></pre></td></tr></table></figure>
<p>解压安装文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar zxvf ruby-1.8.7-p358.tar.gz</div></pre></td></tr></table></figure>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ruby-1.8.7.p358</div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<p>编译Ruby源码需要GCC(GNU C Compiler)，如果编译时提示没有安装GCC，输入如下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install gcc gcc-c++ kernel-devel</div></pre></td></tr></table></figure>
<h4 id="安装Ruby-Install-Ruby-Option-2"><a href="#安装Ruby-Install-Ruby-Option-2" class="headerlink" title="安装Ruby(Install Ruby (Option 2))"></a>安装Ruby(Install Ruby (Option 2))</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install ruby</div></pre></td></tr></table></figure>
<p>检查安装是否成功：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -v</div></pre></td></tr></table></figure>
<h4 id="安装RubyGems-1-4-2"><a href="#安装RubyGems-1-4-2" class="headerlink" title="安装RubyGems 1.4.2"></a>安装RubyGems 1.4.2</h4><p>RubyGems是一个方便而强大的Ruby程序包管理器(RubyGems is a package management framework for Ruby. )，Ruby的第三方插件是用gem方式来管理，非常容易发布和共享，一个简单的命令就可以安装上第三方的扩展库。特点：能远程安装包，包之间依赖关系的管理，简单可靠的卸载，查询机制，能查询本地和远程服务器的包信息，能保持一个包的不同版本，基于Web的查看接口，能查看你安装的gem的信息。更换gem源为Ruby中国的源。默认的官方源因为网络问题速度慢.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#删除官方源</span></div><div class="line">gem sources --remove https://rubygems.org/</div><div class="line"><span class="comment">#添加Ruby中国源，添加源的时间比较久</span></div><div class="line"><span class="comment">#没有进度提示，所以需要耐心等待</span></div><div class="line"><span class="comment">#大概在10几分钟左右</span></div><div class="line">gem sources --add https://gems.ruby-china.org/</div><div class="line"><span class="comment">#查询gem源记录</span></div><div class="line">gem sources –l</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget http://production.cf.rubygems.org/rubygems/rubygems-1.4.2.tgz</div><div class="line">tar zxvf rubygems-1.4.2.tgz</div><div class="line"><span class="built_in">cd</span> rubygems-1.4.2</div><div class="line">ruby setup.rb</div><div class="line">gem -v</div></pre></td></tr></table></figure>
<h4 id="安装Ruby-on-Rails"><a href="#安装Ruby-on-Rails" class="headerlink" title="安装Ruby on Rails"></a>安装Ruby on Rails</h4><p>安装Rails 4.2版本。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install rails -v=4.2</div></pre></td></tr></table></figure>
<p>提示错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ERROR:  Error installing rails:</div><div class="line">        ERROR: Failed to build gem native extension.</div><div class="line"></div><div class="line">    /usr/bin/ruby extconf.rb</div><div class="line">mkmf.rb can&apos;t find header files for ruby at /usr/share/include/ruby.h</div></pre></td></tr></table></figure>
<p>输入如下命令即可解决：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install gcc mysql-devel ruby-devel rubygems</div></pre></td></tr></table></figure>
<p>安装完毕后输入如下命令查看版本。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rails -v</div></pre></td></tr></table></figure>
<h4 id="安装Redmine"><a href="#安装Redmine" class="headerlink" title="安装Redmine"></a>安装Redmine</h4><p>下载安装包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://www.redmine.org/releases/redmine-3.3.1.tar.gz</div></pre></td></tr></table></figure>
<p>解压缩：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar zxvf redmine-3.3.1.tar.gz</div></pre></td></tr></table></figure>
<h4 id="数据库配置-Link-Redmine-to-the-Database"><a href="#数据库配置-Link-Redmine-to-the-Database" class="headerlink" title="数据库配置(Link Redmine to the Database)"></a>数据库配置(Link Redmine to the Database)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#登录数据库</span></div><div class="line">mysql -u root -p</div><div class="line"><span class="comment">#重置密码</span></div><div class="line">alter user root@localhost identified by <span class="string">'$zwkj123456ZWKJ'</span>;</div><div class="line"><span class="comment">#创建数据库</span></div><div class="line">create database redmine character <span class="built_in">set</span> utf8;</div><div class="line"><span class="comment">#创建用户</span></div><div class="line">create user <span class="string">'redmine'</span>@<span class="string">'localhost'</span> identified by <span class="string">'$zwkj123456ZWKJ'</span>;</div><div class="line"><span class="comment">#添加权限</span></div><div class="line">grant all privileges on redmine.* to <span class="string">'redmine'</span>@<span class="string">'localhost'</span>;</div></pre></td></tr></table></figure>
<h5 id="Configure-database-yml"><a href="#Configure-database-yml" class="headerlink" title="Configure database.yml"></a>Configure database.yml</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var/www/redmine/config</div><div class="line">cp database.yml.example database.yml</div><div class="line">nano database.yml</div></pre></td></tr></table></figure>
<h4 id="Rails配置-Rails-Settings"><a href="#Rails配置-Rails-Settings" class="headerlink" title="Rails配置(Rails Settings)"></a>Rails配置(Rails Settings)</h4><p>安装bundler：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install bundler --verbose</div></pre></td></tr></table></figure>
<p>安装依赖：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#切换到redmine目录</span></div><div class="line"><span class="comment">#redmine目录下有安装时需要的配置文件</span></div><div class="line"><span class="comment">#所以需要切换到此目录下运行bundle命令</span></div><div class="line"><span class="built_in">cd</span> /var/www/redmine</div><div class="line">bundle install</div></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">[root@localhost redmine]<span class="comment"># bundle install</span></div><div class="line">Don<span class="string">'t run Bundler as root. Bundler can ask for sudo if it is needed, and installing your bundle as root will break this</span></div><div class="line">application for all non-root users on this machine.</div><div class="line">/usr/share/gems/gems/psych-2.0.0/lib/psych.rb:98: warning: already initialized constant Psych::VERSION</div><div class="line">/usr/share/ruby/psych.rb:98: warning: previous definition of VERSION was here</div><div class="line">/usr/share/gems/gems/psych-2.0.0/lib/psych.rb:101: warning: already initialized constant Psych::LIBYAML_VERSION</div><div class="line">/usr/share/ruby/psych.rb:101: warning: previous definition of LIBYAML_VERSION was here</div><div class="line">Fetching gem metadata from https://rubygems.org/..........</div><div class="line">Fetching version metadata from https://rubygems.org/..</div><div class="line">Fetching dependency metadata from https://rubygems.org/.</div><div class="line">Resolving dependencies...</div><div class="line">Using rake 11.3.0</div><div class="line">Using i18n 0.7.0</div><div class="line">Installing json 1.8.3 with native extensions</div><div class="line">Using minitest 5.9.1</div><div class="line">Using thread_safe 0.3.5</div><div class="line">Using builder 3.2.2</div><div class="line">Using erubis 2.7.0</div><div class="line">Using mini_portile2 2.1.0</div><div class="line">Using rack 1.6.5</div><div class="line">Using mime-types-data 3.2016.0521</div><div class="line">Using arel 6.0.3</div><div class="line">Using public_suffix 2.0.4</div><div class="line">Using bundler 1.13.6</div><div class="line">Installing ffi 1.9.14 with native extensions</div><div class="line">Using coderay 1.1.1</div><div class="line">Using concurrent-ruby 1.0.2</div><div class="line">Using docile 1.1.5</div><div class="line">Using htmlentities 4.3.1</div><div class="line">Using thor 0.19.1</div><div class="line">Using metaclass 0.0.4</div><div class="line">Using mimemagic 0.3.2</div><div class="line">Using multi_json 1.12.1</div><div class="line">Installing mysql2 0.3.21 with native extensions</div><div class="line">Using net-ldap 0.12.1</div><div class="line">Using ruby-openid 2.3.0</div><div class="line">Using rbpdf-font 1.19.0</div><div class="line">Installing rdoc 5.0.0</div><div class="line">Installing redcarpet 3.3.4 with native extensions</div><div class="line">Using request_store 1.0.5</div><div class="line">Installing rmagick 2.16.0 with native extensions</div><div class="line">Using rubyzip 1.2.0</div><div class="line">Using websocket 1.2.3</div><div class="line">Using simplecov-html 0.9.0</div><div class="line">Using yard 0.9.5</div><div class="line">Using tzinfo 1.2.2</div><div class="line">Using nokogiri 1.6.8.1</div><div class="line">Using rack-test 0.6.3</div><div class="line">Using mime-types 3.1</div><div class="line">Installing addressable 2.5.0</div><div class="line">Installing childprocess 0.5.9</div><div class="line">Using sprockets 3.7.0</div><div class="line">Installing mocha 1.2.1</div><div class="line">Installing rack-openid 1.4.2</div><div class="line">Installing rbpdf 1.19.0</div><div class="line">Installing simplecov 0.9.2</div><div class="line">Installing activesupport 4.2.7.1</div><div class="line">Using loofah 2.0.3</div><div class="line">Installing xpath 2.0.0</div><div class="line">Using mail 2.6.4</div><div class="line">Installing css_parser 1.4.6</div><div class="line">Installing selenium-webdriver 3.0.1</div><div class="line">Using rails-deprecated_sanitizer 1.0.3</div><div class="line">Using globalid 0.3.7</div><div class="line">Installing activemodel 4.2.7.1</div><div class="line">Using rails-html-sanitizer 1.0.3</div><div class="line">Installing capybara 2.10.1</div><div class="line">Installing roadie 3.2.0</div><div class="line">Using rails-dom-testing 1.0.7</div><div class="line">Installing activejob 4.2.7.1</div><div class="line">Installing activerecord 4.2.7.1</div><div class="line">Installing protected_attributes 1.1.3</div><div class="line">Installing actionview 4.2.7.1</div><div class="line">Installing actionpack 4.2.7.1</div><div class="line">Installing actionmailer 4.2.7.1</div><div class="line">Installing actionpack-action_caching 1.1.1</div><div class="line">Installing actionpack-xml_parser 1.0.2</div><div class="line">Installing railties 4.2.7.1</div><div class="line">Using sprockets-rails 3.2.0</div><div class="line">Installing jquery-rails 3.1.4</div><div class="line">Installing roadie-rails 1.1.1</div><div class="line">Installing rails 4.2.7.1</div><div class="line">Bundle complete! 31 Gemfile dependencies, 71 gems now installed.</div><div class="line">Use `bundle show [gemname]` to see where a bundled gem is installed.</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装依赖软件</span></div><div class="line">gem install bundler</div></pre></td></tr></table></figure>
<p>初始化redmine数据库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rake db:migrate RAILS_ENV=production</div><div class="line">rake redmine:plugins:migrate RAILS_ENV=production</div><div class="line">rake tmp:cache:clear</div><div class="line">rake tmp:sessions:clear</div></pre></td></tr></table></figure>
<h4 id="启动Redmine"><a href="#启动Redmine" class="headerlink" title="启动Redmine"></a>启动Redmine</h4><p>启动Redmine：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#查找rails安装目录</span></div><div class="line">whereis rails</div><div class="line"><span class="comment">#切换到redmine目录下(此步骤不可缺)</span></div><div class="line"><span class="built_in">cd</span> /var/www/redmine</div><div class="line"><span class="comment">#启动redmine</span></div><div class="line">ruby /usr/<span class="built_in">local</span>/bin/rails server webrick <span class="_">-e</span> production –d</div><div class="line"></div><div class="line">bundle <span class="built_in">exec</span> rake assets:precompile RAILS_ENV=production</div></pre></td></tr></table></figure>
<h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><p>访问地址<code>http://localhost:3000</code>时提示错误：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Missing `secret_token` and `secret_key_base` <span class="keyword">for</span> <span class="string">'production'</span> environment, <span class="built_in">set</span> these values <span class="keyword">in</span> `config/secrets.yml`</div></pre></td></tr></table></figure>
<p>Rails的安全机制需要一个秘钥。在Rails 4.x版本的时候, 秘钥的设置在<code>RAILS_ROOT/config/secrets.yml</code>。在非生产环境下, 秘钥都是’明文’, ‘硬编码’, 写在secrets.yml里面的。这种方式会由于源代码的泄露, 造成安全问题, 所以这种方式存在安全隐患。所以Rails要求在生产环境下, 通过操作系统的环境变量来设置秘钥, 这样相对比较稳妥。</p>
<p>这里可以采取2种方法:</p>
<p>　　1. 自己动手, 利用linux系统的机制来设置环境变量 SECRET_KEY_BASE = XXX</p>
<p>　　2. 使用GEM dotenv-deployment帮你设置, 具体机制和方法1本质没区别。</p>
<p>PS: Rails产生秘钥的指令: <code>rake secret RAILS_ENV=production</code>, 会产生一个秘钥。这里我选择方法2, 利用/etc/profile.d/ 下面添加脚本的方式来设置秘钥:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#产生一个秘钥</span></div><div class="line">rake secret RAILS_ENV=production</div><div class="line"><span class="built_in">export</span> SECRET_KEY_BASE=生成的Key</div><div class="line"><span class="comment">#查看设置的Key</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$SECRET_KEY_BASE</span></div></pre></td></tr></table></figure>
<p>然后刷新你的shell,<code>echo $SECRET_KEY_BASE</code>, 输出成功，重新启动计算机。访问<code>http://localhost:3000</code>。如果无法访问，检查防火墙是否允许3000端口，或者关闭防火墙即可。如果需要在外网访问，需要绑定地址：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#参数b表示绑定(bind)</span></div><div class="line">ruby /usr/<span class="built_in">local</span>/bin/rails server webrick <span class="_">-e</span> production –d -b 192.168.24.221</div></pre></td></tr></table></figure>
<p>参考资料：</p>
<p><a href="http://www.redmine.org/projects/redmine/wiki/Redmine_on_CentOS_installation_HOWTO" target="_blank" rel="external">Redmine on CentOS installation HOWTO</a></p>
<p><a href="http://www.cnblogs.com/mahong-shaojiu-ruby/p/5707771.html" target="_blank" rel="external">rails production secret_key的设置</a></p>
<p><a href="http://muzizero.blog.51cto.com/6059241/1783563" target="_blank" rel="external">centos6.7安装redmine系统</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis使用]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/15/redis-using/</url>
      <content type="html"><![CDATA[<h4 id="过期时间"><a href="#过期时间" class="headerlink" title="过期时间"></a>过期时间</h4><p>生存时间可以通过使用 DEL 命令来删除整个 key 来移除，或者被 SET 和 GETSET 命令覆写(overwrite)。</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 设置数据（永久有效）</div><div class="line"> *</div><div class="line"> * @param key     //key</div><div class="line"> * @param value   //值</div><div class="line"> * @param db      //数据库序号</div><div class="line"> */</div><div class="line">public static void <span class="built_in">set</span>(String key, String value, Integer db) &#123;</div><div class="line">    Jedis jredis = null;</div><div class="line">    try &#123;</div><div class="line">        JedisPool poolItem = pools.get(db);</div><div class="line">        jredis = poolItem.getResource();</div><div class="line">        jredis.set(key, value);</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        log.error(<span class="string">"set value encount an error"</span>, e);</div><div class="line">    &#125; finally &#123;</div><div class="line">        <span class="keyword">if</span> (jredis != null) &#123;</div><div class="line">            jredis.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="取出包含指定规则的Key"><a href="#取出包含指定规则的Key" class="headerlink" title="取出包含指定规则的Key"></a>取出包含指定规则的Key</h4><p>从Redis中取出包含指定规则的Key的集合。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 取出包含指定key的集合</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushCacheStatusInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">    JedisPool jedisPool = RedisHelper.getRedisPool(<span class="number">0</span>);</div><div class="line">    Jedis jredis = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        jredis = jedisPool.getResource();</div><div class="line">        <span class="comment">//找到包含指定Key的集合</span></div><div class="line">        Set keys = jredis.keys(<span class="string">"*websocketsession"</span>);</div><div class="line">        Iterator iteratorKeys = keys.iterator();</div><div class="line">        <span class="keyword">while</span> (iteratorKeys.hasNext()) &#123;</div><div class="line">            String redisKey = iteratorKeys.next().toString();</div><div class="line">            String session = jredis.get(redisKey);</div><div class="line">            <span class="comment">//do something</span></div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">        log.error(<span class="string">"推送信息出错"</span>, ex);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    	<span class="keyword">if</span> (jredis != <span class="keyword">null</span>) &#123;</div><div class="line">        	jredis.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h4><p>登录Redis：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./redis-cli -h 192.168.24.252 -p 6379</div></pre></td></tr></table></figure>
<p>查看客户端数量：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.24.252:6379&gt; info clients</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[电影《恋恋风尘》(Dust in the Wind)]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/13/dust-in-the-wind/</url>
      <content type="html"><![CDATA[<p>评价一部作品，它的真实性在心里占有相当的重量。而上映于1987年《恋恋风尘》(Dust in the Wind)所讲述的故事给自己的感觉是真实的，对观众来说它是仅仅一件小事。但对当时亲身经历的主人公来说，这些都是刻骨铭心的回忆，相信许多人也会有相似的感受，那就是：初恋告吹。</p>
<p>第一次看《恋恋风尘》(Dust in the Wind)，还是在大二、大三的学生时期。当时只觉得非常新奇，电影原来可以拍的这样安静和特别。往后参加工作，反复观看，每一次观看感受都是如此相似。久远的记忆仿佛就在昨天，具有贫苦农村生活经验和当兵经历的人士观看效果更佳。整部电影没有夸张的剧情和场景，都是一个个简单的回忆按时间顺序依次展现。</p>
<a id="more"></a>
<img src="/2016/11/13/dust-in-the-wind/Dust_in_the_Wind.jpg" alt="恋恋风尘" title="恋恋风尘">
<p>电影里有2个场景给我的印象最深：</p>
<p>一次是在台北时，阿远得了气管炎，阿云专程过来看他，当阿云过来时，恒春仔已经睡下了，说明已是很晚了，看到躺在床上无力的阿远，阿云遂打了热水，用热水浸湿的帕子搭在阿远的额头上，没有对白。第二天很早时阿云去上班。注意电影并没有强调阿云整晚是如何休息的，但是从屋内摆设观众应该能够想到她整夜打盹的场景。当清晨阿远送她出门时，电影的镜头慢慢拉到阿云离去的背影。这个离去的场景，我想阿远一生都不会忘记。</p>
<p>一次是在部队时，士兵们聚在一起打台球，一群人突然在讨论7号(一个女孩子)，说是和男朋友闹翻了，才出来做(应该是皮肉生意)。谈起阿远时，说他都不出去玩一玩，跟大家显得格格不入，遂嘲讽他“坚心为君，独守我青春”，说着一起大笑起来。镜头切到阿远呕吐的镜头，我想，他是由于太过于思念阿云的缘故。不是自己，怎么能理解一个人在心中的位置，旁人是没法理解的。</p>
<p>当忙碌了一天的工作后，或者闲暇时刻，回到家打开电视看看这么一部简单轻松的电影，也不失为一种放松方式。</p>
<p>PS:优酷下面的群众的评论能发现很多细节。</p>
<p><a href="http://v.youku.com/v_show/id_XMjY2NjgwNjQ0.html?tpa=dW5pb25faWQ9MTAzMzUyXzEwMDAwMl8wMV8wMQ" target="_blank" rel="external">恋恋风尘优酷播放地址</a></p>
<p><a href="https://movie.douban.com/subject/1292330/" target="_blank" rel="external">恋恋风豆瓣介绍页面</a></p>
<p><a href="https://movie.douban.com/review/7918461/" target="_blank" rel="external">《恋恋风尘》影评</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Intellij-Idea远程调试]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/12/intellij-idea-remote-debbuging/</url>
      <content type="html"><![CDATA[<p>因为我们用的是Tomcat，所以在IDEA中点击右上角那个“Edit Configurations”按钮，然后在弹出的界面中点击左上角的加号，选择tomcat server-&gt;remote。</p>
<h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><p>要让远程服务器运行的代码支持远程调试，则启动的时候必须加上特定的JVM参数，这些参数是：</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-Xdebug -Xrunjdwp:transport=dt_socket,<span class="built_in">suspend</span>=n,server=y,address=<span class="variable">$&#123;debug_port&#125;</span></div></pre></td></tr></table></figure>
<p>其中的${debug_port}是用户自定义的，为debug端口，本例以53996端口为例。在Windows下到tomcat目录下的catalina.bat文件中，添加如下内容，设置catalina环境变量：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> CATALINA_OPTS=<span class="string">"-agentlib:jdwp=transport=dt_socket,address=53996,suspend=n,server=y"</span></div></pre></td></tr></table></figure>
<p>如果是Linux，在catalina.sh文件中中，设置catalina环境变量：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> CATALINA_OPTS=<span class="string">"-agentlib:jdwp=transport=dt_socket,address=53996,suspend=n,server=y"</span></div></pre></td></tr></table></figure>
<p>Sun虚拟机实现需要指定命令行选项，以加载JDWP（Java Debug Wire Protocol Transport）代理来debug。JDK 5.0以前需要指定-Xdebug和-Xrunjdwp这两个参数，以后则可以使用参数-agentlib:jdwp替代之，它们指定了JVM使用的连接器。从上面的例子代码可以看到几个jdwp支持的参数选项，包括transport、server、suspend、address等等，这些都很常见，还包括timeout、launch（中断并开始调试的时候，执行什么程序）、onuncaught（如果出现无法捕获的异常是否需要中断并调试）等等。运行如下命令启动Tomcat：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Windows下启动Tomcat</span></div><div class="line">catalina.bat start</div><div class="line"></div><div class="line"><span class="comment">#Linux下启动Tomcat</span></div><div class="line">catalina.sh start</div></pre></td></tr></table></figure>
<p>使用如下命令查看是否配置成功：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Windows下用此命令查看</span></div><div class="line">netstat -ano</div><div class="line"></div><div class="line"><span class="comment">#Linux下用此命令查看</span></div><div class="line">lsof -i:53996</div></pre></td></tr></table></figure>
<p>查看是否有53996的端口处于监听状态。如下图所示：</p>
<img src="/2016/11/12/intellij-idea-remote-debbuging/tomcat-listening-port.png" alt="检查服务端配置是否正确" title="检查服务端配置是否正确">
<h4 id="Intellij-Idea配置"><a href="#Intellij-Idea配置" class="headerlink" title="Intellij Idea配置"></a>Intellij Idea配置</h4><p>Intellij Idea远程调试配置如下：</p>
<img src="/2016/11/12/intellij-idea-remote-debbuging/intellij-idea-remote-debugging.jpg" alt="Intellij Idea远程调试配置" title="Intellij Idea远程调试配置">
<p>参考资料：</p>
<ul>
<li><a href="http://www.raychase.net/1519" target="_blank" rel="external">JVM问题定位工具</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Websocket数据查看]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/12/websocket-check/</url>
      <content type="html"><![CDATA[<h4 id="FireFox中查看WebSocket"><a href="#FireFox中查看WebSocket" class="headerlink" title="FireFox中查看WebSocket"></a>FireFox中查看WebSocket</h4><p>使用FireFox查看WebSocket内容需要安装一个<a href="https://addons.mozilla.org/en-US/firefox/addon/websocket-monitor/" target="_blank" rel="external">WebSocket-Monitor</a>插件。安装完毕后在FireFox的Web控制台(Ctrl + Shift + K)中。</p>
<img src="/2016/11/12/websocket-check/firefox-websocket.jpg" alt="FireFox查看WebSocket" title="FireFox查看WebSocket">
<a id="more"></a>
<h4 id="Google-Chrome中查看WebSocket"><a href="#Google-Chrome中查看WebSocket" class="headerlink" title="Google Chrome中查看WebSocket"></a>Google Chrome中查看WebSocket</h4><p>Google Chrome自带查看模块，如下图所示。F12进入开发者页面，选择NetWork选项卡，选择WS(WebSocket)选项卡。</p>
<img src="/2016/11/12/websocket-check/chrome-websocket.jpg" alt="Google Chrome查看WebSocket" title="Google Chrome查看WebSocket">
<h4 id="Fiddler中查看WebSocket"><a href="#Fiddler中查看WebSocket" class="headerlink" title="Fiddler中查看WebSocket"></a>Fiddler中查看WebSocket</h4><p>在请求时选择任意WebSocket Session，即可出现WebSocket流量数据画面，不过是乱码，未找到合适的解决乱码的方案。</p>
<img src="/2016/11/12/websocket-check/fiddler-websocket.jpg" alt="Fiddler查看WebSocket" title="Fiddler查看WebSocket">
<p>Fiddler中的WebSocket显示乱码是因为数据已经被压缩(Compressed),要查看乱码的内容，在Response中添加头信息。按下F2按钮后，即可在Response中手动添加头信息(Add Headers)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Content-Encoding: deflate</div></pre></td></tr></table></figure>
<p>添加头信息之后，点击TextView会出现黄色的Decode提示框。</p>
<img src="/2016/11/12/websocket-check/websocket-decode.jpg" alt="Fiddler查看WebSocket-Decode" title="Fiddler查看WebSocket-Decode">
<p>点击之后即可看到原始的Json数据。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[grep使用]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/12/grep/</url>
      <content type="html"><![CDATA[<p>grep (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p>
<p>Unix的grep家族包括grep、egrep和fgrep。egrep和fgrep的命令只跟grep有很小不同。egrep是grep的扩展，支持更多的re元字符， fgrep就是fixed grep或fast grep，它们把所有的字母都看作单词，也就是说，正则表达式中的元字符表示回其自身的字面意义，不再特殊。linux使用GNU版本的grep。它功能更强，可以通过-G、-E、-F命令行选项来使用egrep和fgrep的功能。</p>
<a id="more"></a>
<h4 id="多个匹配模式"><a href="#多个匹配模式" class="headerlink" title="多个匹配模式"></a>多个匹配模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail <span class="_">-f</span> catalina.out | grep <span class="_">-e</span> <span class="string">"苏E22222"</span> <span class="_">-e</span> <span class="string">"服务器"</span></div></pre></td></tr></table></figure>
<p>使用此命令可以过滤catalina.out文件中包含<code>苏E22222</code><strong>且</strong>包含<code>服务器</code>的内容。使用grep匹配“与”或者“或”模式grep命令加-e参数，这一扩展允许使用扩展模式匹配。例如，要抽取城市代码为2 1 9或2 1 6，方法如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep –E <span class="string">'219|216'</span></div></pre></td></tr></table></figure>
<p>还可以为匹配的内容增加高亮的颜色。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail <span class="_">-f</span> catalina.out |grep --color=auto -E <span class="string">'topic|0194592|0720724|512|0146636|S000099'</span></div></pre></td></tr></table></figure>
<p>全局配置自动显示颜色：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim ~/.bashrc</div><div class="line"><span class="built_in">alias</span> grep=<span class="string">'grep --color'</span></div><div class="line"><span class="built_in">source</span> ~/.bashrc</div></pre></td></tr></table></figure>
<p>选出不包含512且不包含topic的行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail <span class="_">-f</span> catalina.out |grep -v -E <span class="string">'512|topic'</span></div></pre></td></tr></table></figure>
<h4 id="Grep正则表达式"><a href="#Grep正则表达式" class="headerlink" title="Grep正则表达式"></a>Grep正则表达式</h4><p>^  锚定行的开始 如：’^grep’匹配所有以grep开头的行。如下语句匹配Tomcat日志输出所有开始为2016的行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail <span class="_">-f</span> catalina.out |grep -E <span class="string">"^2016"</span></div></pre></td></tr></table></figure>
<p>过滤所有结尾为”}}”的行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail <span class="_">-f</span> catalina.out |grep -E <span class="string">"&#125;&#125;$"</span></div></pre></td></tr></table></figure>
<p>.   匹配一个非换行符的字符 如：’gr.p’匹配gr后接一个任意字符，然后是p。</p>
<p>*  匹配零个或多个先前字符 如：’ <em>grep’匹配所有一个或多个空格后紧跟grep的行。 .</em>一起用代表任意字符。</p>
<p>[] 匹配一个指定范围内的字符，如’[Gg]rep’匹配Grep和grep。</p>
<p>[^]  匹配一个不在指定范围内的字符，如：’[^A-FH-Z]rep’匹配不包含A-F和H-Z的一个字母开头，紧跟rep的行。</p>
<p>(..)  标记匹配字符，如：’(love)’，love被标记为1。</p>
<p>>  锚定单词的结束，如’grep&gt;’匹配包含以grep结尾的单词的行。</p>
<p>x{m} 连续重复字符x，m次，如：’o{5}’匹配包含连续5个o的行。</p>
<p>x{m,} 连续重复字符x,至少m次，如：’o{5,}’匹配至少连续有5个o的行。</p>
<p>x{m,n} 连续重复字符x，至少m次，不多于n次，如：’o{5,10}’匹配连续5–10个o的行。</p>
<p>w  匹配一个文字和数字字符，也就是[A-Za-z0-9]，如：’Gw*p’匹配以G后跟零个或多个文字或数字字符，然后是p。</p>
<p>W  w的反置形式，匹配一个非单词字符，如点号句号等。W*则可匹配多个。</p>
<p>b  单词锁定符，如: ‘bgrepb’只匹配grep，即只能是grep这个单词，两边均为空格。</p>
<h4 id="匹配条件附近相关内容"><a href="#匹配条件附近相关内容" class="headerlink" title="匹配条件附近相关内容"></a>匹配条件附近相关内容</h4><p>有时日志较大时，需要查看日志中央的内容，那么可以使用-C参数。参数后附加一个数，代表日志前后的行数。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat catalina.out | grep -C 500 <span class="string">'16 11 28 11 00 00'</span> | grep <span class="string">'0720738'</span></div></pre></td></tr></table></figure>
<p>以上命令查看满足日志中包含<code>16 11 28 11 00 00</code>且包含<code>0720738</code>的，前后500行的内容。如果是两个条件满足其中任意一个的话，使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat catalina.out | grep -C 500 -E <span class="string">'16 11 28 11 00 00|0720738'</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[地理位置纠偏]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/08/location-rectifying/</url>
      <content type="html"><![CDATA[<p>偏移的起因：天朝测绘局以国家安全为理由，用法律的形式对所有在天朝发行的地图类产品加了强制性规范，要求所有地图类产品都必须使用国家测绘局的一种加偏移的算法，对地图的真实坐标进行加偏移处理，之后才可能通过审批准许上市。因此，天朝的所有官方及商用地图的坐标都是偏移的，这种偏移属于非线性的，偏移量在300至500米不等，偏移方向也不定。这种加过偏移的地图坐标就是所谓“火星坐标”。GPS接收机本身接收卫星的信号，计算出本机所在位置的经纬度，在没有做特别处理的时候，这个经纬度是正确的。但是如果GPS支持加载地图的话，这个GPS中的地图就得受上述第一条法规的约束了，所以正式在天朝销售的行货GPS设备中的地图必须也得加偏移，处理成火星坐标。地理位置纠偏代码(处理成火星坐标)：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* Created by jiangxiaoqiang on 2016/11/7.</div><div class="line">* 适用于Google,高德体系的地图</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GpsDataTranslate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 圆周率</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> PI = Math.PI;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 地球的半径(单位:米)</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> EARTH_RADIUS = <span class="number">6378245.0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * ee: 椭球的偏心率(eccentricity of ellipsoid)</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> ECCENTRICITY_OF_ELLIPSOID = <span class="number">0.0066934216229659433</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">IsOutOfChina</span><span class="params">(<span class="keyword">double</span> latitude, <span class="keyword">double</span> longitude)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> longitude &lt; <span class="number">72.004</span> || longitude &gt; <span class="number">137.8347</span> || (latitude &lt; <span class="number">0.8293</span> || latitude &gt; <span class="number">55.8271</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">TransformLat</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> num = -<span class="number">100.0</span> + <span class="number">2.0</span> * x + <span class="number">3.0</span> * y + <span class="number">0.2</span> * y * y + <span class="number">0.1</span> * x * y + <span class="number">0.2</span> * Math.sqrt(Math.abs(x));</div><div class="line">        num += (<span class="number">20.0</span> * Math.sin(<span class="number">6.0</span> * x * PI) + <span class="number">20.0</span> * Math.sin(<span class="number">2.0</span> * x * PI)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</div><div class="line">        num += (<span class="number">20.0</span> * Math.sin(y * PI) + <span class="number">40.0</span> * Math.sin(y / <span class="number">3.0</span> * PI)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</div><div class="line">        <span class="keyword">return</span> num + (<span class="number">160.0</span> * Math.sin(y / <span class="number">12.0</span> * PI) + <span class="number">320.0</span> * Math.sin(y * PI / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">TransformLon</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> num = <span class="number">300.0</span> + x + <span class="number">2.0</span> * y + <span class="number">0.1</span> * x * x + <span class="number">0.1</span> * x * y + <span class="number">0.1</span> * Math.sqrt(Math.abs(x));</div><div class="line">        num += (<span class="number">20.0</span> * Math.sin(<span class="number">6.0</span> * x * PI) + <span class="number">20.0</span> * Math.sin(<span class="number">2.0</span> * x * PI)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</div><div class="line">        num += (<span class="number">20.0</span> * Math.sin(x * PI) + <span class="number">40.0</span> * Math.sin(x / <span class="number">3.0</span> * PI)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</div><div class="line">        <span class="keyword">return</span> num + (<span class="number">150.0</span> * Math.sin(x / <span class="number">12.0</span> * PI) + <span class="number">300.0</span> * Math.sin(x / <span class="number">30.0</span> * PI)) * <span class="number">2.0</span> / <span class="number">3.0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 地理位置纠偏</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> wgLat</div><div class="line">     * <span class="doctag">@param</span> wgLon</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span>[] transform(<span class="keyword">double</span> wgLat, <span class="keyword">double</span> wgLon) &#123;</div><div class="line">        <span class="keyword">double</span>[] latlng = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">2</span>];</div><div class="line">        <span class="keyword">if</span> (IsOutOfChina(wgLat, wgLon)) &#123;</div><div class="line">            latlng[<span class="number">0</span>] = wgLat;</div><div class="line">            latlng[<span class="number">1</span>] = wgLon;</div><div class="line">            <span class="keyword">return</span> latlng;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> dLat = TransformLat(wgLon - <span class="number">105.0</span>, wgLat - <span class="number">35.0</span>);</div><div class="line">        <span class="keyword">double</span> dLon = TransformLon(wgLon - <span class="number">105.0</span>, wgLat - <span class="number">35.0</span>);</div><div class="line">        <span class="keyword">double</span> radLat = wgLat / <span class="number">180.0</span> * PI;</div><div class="line">        <span class="keyword">double</span> magic = Math.sin(radLat);</div><div class="line">        magic = <span class="number">1</span> - ECCENTRICITY_OF_ELLIPSOID * magic * magic;</div><div class="line">        <span class="keyword">double</span> sqrtMagic = Math.sqrt(magic);</div><div class="line">        dLat = (dLat * <span class="number">180.0</span>) / ((EARTH_RADIUS * (<span class="number">1</span> - ECCENTRICITY_OF_ELLIPSOID)) / (magic * sqrtMagic) * PI);</div><div class="line">        dLon = (dLon * <span class="number">180.0</span>) / (EARTH_RADIUS / sqrtMagic * Math.cos(radLat) * PI);</div><div class="line">        latlng[<span class="number">0</span>] = (wgLat + dLat);</div><div class="line">        latlng[<span class="number">1</span>] = (wgLon + dLon);</div><div class="line">        <span class="keyword">return</span> latlng;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一对纠偏的数据组示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">原始数据：</div><div class="line">29.54163(纬度)</div><div class="line">106.508188(经度)</div><div class="line"></div><div class="line">纠偏后数据：</div><div class="line">29.538885930651567(纬度)</div><div class="line">106.5120118854562(经度)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis客户端连接]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/04/redis-client-connect/</url>
      <content type="html"><![CDATA[<h4 id="Redis特点"><a href="#Redis特点" class="headerlink" title="Redis特点"></a>Redis特点</h4><ul>
<li><p>Redis 是一个 key-value 的缓存(cache)和存储(store)系统（现在我们只用它来做缓存，目前还未当作DB用，数据存放在 Cassandra 里）</p>
</li>
<li><p>支持丰富的数据结构，List 就专门用于存储列表型数据，默认按操作时间排序。Sorted Set 可以按分数排序元素，分数是一种广义概念，可以是时间或评分。其次，其丰富的数据结构为日后扩展提供了很大的方便。</p>
</li>
<li><p>提供的所有操作都是原子操作，为并发天然保驾护航。</p>
</li>
<li><p>超快的性能，见其官方性能测试《How fast is Redis?》。</p>
</li>
<li><p>拥有比较成熟的Java客户端 - Jedis，像新浪微博都是使用它作为客户端。（官方推荐的Clients）</p>
</li>
</ul>
<p>Redis运行一段时间后，出现错误，无法获得连接：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis.clients.jedis.exceptions.JedisException: Could not get a resource from the pool</div></pre></td></tr></table></figure>
<p>使用命令查看客户端数量。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D:\Program Files\Redis&gt;redis-cli.exe info clients</div></pre></td></tr></table></figure>
<p>结果如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Clients</div><div class="line">connected_clients:11</div><div class="line">client_longest_output_list:0</div><div class="line">client_biggest_input_buf:0</div><div class="line">blocked_clients:0</div></pre></td></tr></table></figure>
<h4 id="Redis客户端连接"><a href="#Redis客户端连接" class="headerlink" title="Redis客户端连接"></a>Redis客户端连接</h4><p>在修改了Redis的绑定IP后，用客户端登录需要显示的指定IP和端口：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./redis-cli -h 192.168.24.252 -p 6379</div></pre></td></tr></table></figure>
<p>h代表hostname，主机，p代表port，端口。</p>
<h4 id="Redis是否正确关闭连接"><a href="#Redis是否正确关闭连接" class="headerlink" title="Redis是否正确关闭连接"></a>Redis是否正确关闭连接</h4><p>可以看出目前的客户端已经超出了最大的客户端数量(配置的是10个)。应该是没有释放连接导致的问题。明显一个请求一次连接是很不靠谱的。这个问题发生有两方面的原因：</p>
<ul>
<li><p>未正确使用对象池的空闲队列行为（LIFO“后进先出”栈方式）</p>
</li>
<li><p>“关闭集群链接时异常导致连接泄漏”问题</p>
</li>
</ul>
<p>修改配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Dictionary&lt;Integer, JedisPool&gt; pools = <span class="keyword">new</span> Hashtable();</div><div class="line"></div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</div><div class="line">    config.setMaxTotal(<span class="number">200</span>);</div><div class="line">    config.setMaxIdle(<span class="number">50</span>);</div><div class="line">    <span class="comment">/*设置最小空闲数,在并发量不高时可以降低最小空闲数*/</span></div><div class="line">    config.setMinIdle(<span class="number">8</span>);</div><div class="line">    config.setMaxWaitMillis(<span class="number">10000</span>);</div><div class="line">    config.setTestOnBorrow(<span class="keyword">true</span>);</div><div class="line">    config.setTestOnReturn(<span class="keyword">true</span>); <span class="comment">//Idle时进行连接扫描</span></div><div class="line">    config.setTestWhileIdle(<span class="keyword">true</span>); <span class="comment">//表示idle object evitor两次扫描之间要sleep的毫秒数</span></div><div class="line">    config.setTimeBetweenEvictionRunsMillis(<span class="number">30000</span>); <span class="comment">//表示idle object evitor每次扫描的最多的对象数</span></div><div class="line">    config.setNumTestsPerEvictionRun(<span class="number">10</span>); <span class="comment">//表示一个对象至少停留在idle状态的最短时间，然后才能被idle object evitor扫描并驱逐；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义</span></div><div class="line">    config.setMinEvictableIdleTimeMillis(<span class="number">60000</span>);</div><div class="line">    <span class="comment">//循环创建16个redis数据库连接池,存放在字典里面</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        JedisPool item = <span class="keyword">new</span> JedisPool(config, <span class="string">"127.0.0.1"</span>, <span class="number">6379</span>, <span class="number">0</span>);</div><div class="line">        pools.put(i, item);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用命令<code>client-cli.exe info clients</code>查看客户端的连接数量时，一般为最小空闲连接数量与客户端数量之和。比如查看客户端连接数量为17，设置的最小空闲连接数量是8，有2个连接池，即为16，加一个当前客户端的连接，刚好17个连接。此处<code>Could not get a resource from the pool</code>错误的原因是在打开了连接之后未关闭连接，此处使用的Redis版本为3.2.100 for Windows。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 获取数据</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> key //key</div><div class="line">* <span class="doctag">@param</span> db  //数据库序号</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">(String key, Integer db)</span> </span>&#123;</div><div class="line">    JedisPool poolItem = pools.get(db);</div><div class="line">    Jedis jredis = <span class="keyword">null</span>;</div><div class="line">    String result = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        jredis = poolItem.getResource();</div><div class="line">        result = jredis.get(key);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        log.error(<span class="string">"get value error"</span>, e);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (jredis != <span class="keyword">null</span>) &#123;</div><div class="line">        	<span class="comment">/*</span></div><div class="line">            关闭Redis连接，ReturnResource方法已经标记为Deprecated</div><div class="line">            新的关闭连接的方式为直接调用close方法</div><div class="line">            */</div><div class="line">            jredis.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Redis配置是否正确绑定"><a href="#Redis配置是否正确绑定" class="headerlink" title="Redis配置是否正确绑定"></a>Redis配置是否正确绑定</h4><p>在Redis的配置文件中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#</div><div class="line"># ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</div><div class="line"># internet, binding to all the interfaces is dangerous and will expose the</div><div class="line"># instance to everybody on the internet. So by default we uncomment the</div><div class="line"># following bind directive, that will force Redis to listen only into</div><div class="line"># the IPv4 lookback interface address (this means Redis will be able to</div><div class="line"># accept connections only from clients running into the same computer it</div><div class="line"># is running).</div><div class="line">#</div><div class="line"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</div><div class="line"># JUST COMMENT THE FOLLOWING LINE.</div><div class="line"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div><div class="line">bind 192.168.24.252</div></pre></td></tr></table></figure>
<p>bind的地址如果和程序中配置的地址不一致，也会提示此错误。在Linux里，如果没有指定配置文件，则会使用默认的配置文件，所以在修改了配置文件之后，启动Redis服务的时候显示的指定使用修改后的配置文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./redis-server ../redis.conf &amp;</div></pre></td></tr></table></figure>
<p>参考资料：</p>
<p><a href="http://stackoverflow.com/questions/17082163/jedis-when-to-use-returnbrokenresource" target="_blank" rel="external">Jedis - When to use returnBrokenResource()</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Intellij Idea小技巧(tips)]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/03/intellij-idea-tips/</url>
      <content type="html"><![CDATA[<h4 id="用键盘选择选框"><a href="#用键盘选择选框" class="headerlink" title="用键盘选择选框"></a>用键盘选择选框</h4><p>有时我们可以使用Tab按键将焦点移动到单选框里，如何使用键盘选中和取消选中单选框呢？只需要按下Space按键即可，即是键盘的空格按键。</p>
<h4 id="键盘调整Debug窗口的大小"><a href="#键盘调整Debug窗口的大小" class="headerlink" title="键盘调整Debug窗口的大小"></a>键盘调整Debug窗口的大小</h4><p>键盘调整Debug窗口的大小快捷键是<code>Ctrl + Shift + Up/Down</code>，注意一定要定位到Debug视图，也就是Debug视图但是当前窗口的活跃(Active)视图才会生效。</p>
<a id="more"></a>
<p>同理，在调整项目树宽度时，可以使用快捷键<code>Ctrl + Alt + Left/Right</code>。</p>
<h4 id="Debug视图Tab页切换"><a href="#Debug视图Tab页切换" class="headerlink" title="Debug视图Tab页切换"></a>Debug视图Tab页切换</h4><p>快捷键是Shift + Tab，如下图所示。</p>
<img src="/2016/11/03/intellij-idea-tips/intelli-idea-debug-view-convert.jpg" alt="Intellij Idea的Debug视图Tab页切换" title="Intellij Idea的Debug视图Tab页切换">
<h4 id="Debug视图日志滚动到末尾"><a href="#Debug视图日志滚动到末尾" class="headerlink" title="Debug视图日志滚动到末尾"></a>Debug视图日志滚动到末尾</h4><p>如果想在Debug视图中将日志始终定位到末尾，可以点击左侧的Scroll To End按钮，也可以使用快捷键<code>Ctrl + End</code>。</p>
<h4 id="Debug视图清空日志"><a href="#Debug视图清空日志" class="headerlink" title="Debug视图清空日志"></a>Debug视图清空日志</h4><p>清空日志没有快捷键，但是可以使用键盘上的鼠标右键来做到。</p>
<h4 id="关闭Editor-Tabs"><a href="#关闭Editor-Tabs" class="headerlink" title="关闭Editor Tabs"></a>关闭Editor Tabs</h4><p>在Editor Tabs中切换比较耗费时间，可以尝试关闭Editor Tabs功能，关闭掉Editor Tabs功能还有一个好处是加载的时候会变快，因为不用加载Editor Tabs里打开的页面的内容了。关闭Editor Tabs功能按下<code>Ctrl + Alt + S</code>快捷键。搜索Editor Tabs关键字即可，在右侧Tab Appearence中选择None即可。关闭掉后直接可以通过Ctrl + E快捷键或者<code>Ctrl + Shift + E</code>快捷键访问文件。</p>
<h4 id="跳转到特定文件夹"><a href="#跳转到特定文件夹" class="headerlink" title="跳转到特定文件夹"></a>跳转到特定文件夹</h4><p>在Intellij Idea中可以跳转到特定的文件夹，只需要按下两次Shift之后，在搜索的关键字前面加一个斜杠即可，如下图所示。</p>
<img src="/2016/11/03/intellij-idea-tips/search-folder.jpg" alt="Intellij Idea跳转到指定文件夹" title="Intellij Idea跳转到指定文件夹">
<h4 id="自动补全分号"><a href="#自动补全分号" class="headerlink" title="自动补全分号"></a>自动补全分号</h4><p>在语句的结尾补全分号，可以使用快捷键<code>Ctrl + Shift + Enter</code>，注意光标需要移动到补全分号的行。</p>
<h4 id="打开无快捷键的Tab"><a href="#打开无快捷键的Tab" class="headerlink" title="打开无快捷键的Tab"></a>打开无快捷键的Tab</h4><p>在Intellij Idea中有些Tab时没有快捷键的，比如Maven Projects。要打开可以使用快捷键<code>Ctrl + Alt + A</code>，输入Maven projects关键字即可。</p>
<h4 id="粘贴版历史"><a href="#粘贴版历史" class="headerlink" title="粘贴版历史"></a>粘贴版历史</h4><p>如果使用过 Mac 里面的 Alfred 的话，可能大家早就习惯了 Alfred 的粘贴板历史的能力，真是复制粘贴的神器啊。其实 Intellij IDEA 里面也提供了这样的能力，我们可以直接通过<code>Command + Shift + V</code>来进行访问历史粘贴板：</p>
<img src="/2016/11/03/intellij-idea-tips/paste-history.jpg" alt="Intellij Idea历史粘贴板" title="Intellij Idea历史粘贴板">
<h4 id="Language-Injection"><a href="#Language-Injection" class="headerlink" title="Language Injection"></a>Language Injection</h4><p>在 Java 的 String 中编辑有 JSON 非常麻烦，在 Intellij IDEA 中，我们可以直接使用 Intellij IDEA 的 Language Injection 的功能（Alt + Enter）将一个字符串标记为 JSON，就可以非常方便地编写 JSON 了，再也不用担心转义的问题了：</p>
<img src="/2016/11/03/intellij-idea-tips/language-injection.jpg" alt="Intellij Idea Language Injection" title="Intellij Idea Language Injection">
<h4 id="Intellij-Idea注释模板"><a href="#Intellij-Idea注释模板" class="headerlink" title="Intellij Idea注释模板"></a>Intellij Idea注释模板</h4><p>File – Settings – Editor – Code Style – File and Code Templates设置类生成模板。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kafka消费position]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/02/kafka-consume-position/</url>
      <content type="html"><![CDATA[<p>kafka允许通过seek(TopicPartition，long)指定新的位置，或者seekToBeginning，seekToEnd定位到最早或最近的offset。注意seek重置offsets只对当前消费者起作用，它并不会触发consumer的rebalance，或者影响其他消费者的fetchOffsets。在大多数情况下，消费者消费记录只是简单地从一开始到结束，并且定时地提交它的位置(不管是自动的还是手动的)。不过新的API也允许消费者手动控制它的位置，消费者可以在一个partition钟随意地往前或者往后移动位置。这就意味着消费者可以重新消费旧的记录(多次读取相同的记录)，或者直接跳到最近的记录，忽略掉中间的记录。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 得到分区</div><div class="line"> *</div><div class="line"> * @param topics</div><div class="line"> * @return void</div><div class="line"> * @throws @author Jiangxiaoqiang</div><div class="line"> * @Title: initialTopicsPartitions</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialTopicsPartitions</span><span class="params">(String[] topics)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (topics != <span class="keyword">null</span> &amp;&amp; topics.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (String topic : topics) &#123;</div><div class="line">            <span class="keyword">if</span> (!Converter.toBlank(topic).equals(<span class="string">""</span>)) &#123;</div><div class="line">                topicPartitions.add(<span class="keyword">new</span> TopicPartition(topic, PublicVariable.KAFKA_COMSUME_PARTION));</div><div class="line">            &#125;</div><div class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//从最新的位置开始消费</span></div><div class="line">        consumer.seekToEnd();</div><div class="line">        consumer.assign(topicPartitions);</div><div class="line">=======</div><div class="line">        &#125;                </div><div class="line">        consumer.assign(topicPartitions);</div><div class="line">        <span class="comment">/*</span></div><div class="line">        从最新的位置开始消费,Special methods for seeking to the earliest and latest offset the server maintains are also available ( seekToBeginning(TopicPartition...) and seekToEnd(TopicPartition...) respectively)</div><div class="line">        */</div><div class="line">        consumer.seekToEnd();</div><div class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="number">2e811</span>b88860dc244827b13d566fed966b8243aaa</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis在Windows下配置]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/01/redis/</url>
      <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API，其实当前最热门的NoSQL数据库之一，NoSQL还包括了Memcached和mongodb。</p>
<a id="more"></a>
<h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p>下载在<a href="https://github.com/MSOpenTech/redis/releases" target="_blank" rel="external">这里</a>，这里下载的版本是：<code>Redis-x64-3.2.100.msi</code>。下载完毕后安装即可。安装Redis的目录<code>D:\Program Files\Redis</code>。启动Redis Service服务:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#切换到Redis目录</span></div><div class="line"><span class="built_in">cd</span> /d D:\Program Files\Redis</div><div class="line"><span class="comment">#启动Redis服务</span></div><div class="line">redis-server.exe redis.windows-service.conf</div></pre></td></tr></table></figure>
<p>双击打开 redis-cli.exe , 如果不报错,则连接上了本地服务器,然后测试，比如 set命令，get命令，如下图所示。</p>
<img src="/2016/11/01/redis/redis-client-test.jpg" alt="Redis客户端" title="Redis客户端">
<h4 id="Java连接Redis"><a href="#Java连接Redis" class="headerlink" title="Java连接Redis"></a>Java连接Redis</h4><p>引入Client jar包，在Maven中引入配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;2.8.1&lt;/version&gt;</div><div class="line">    &lt;type&gt;jar&lt;/type&gt;</div><div class="line">    &lt;scope&gt;compile&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>编写Java测试代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Created by jiangxiaoqiang on 2016/11/1.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisServiceTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//连接本地的 Redis 服务</span></div><div class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>);</div><div class="line">        System.out.println(<span class="string">"Connection to server sucessfully"</span>);</div><div class="line">        <span class="comment">//查看服务是否运行</span></div><div class="line">        System.out.println(<span class="string">"Server is running: "</span>+jedis.ping());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</div><div class="line">    config.setMaxIdle(<span class="number">2</span>);</div><div class="line">    config.setMaxTotal(<span class="number">10</span>);</div><div class="line">    config.setTestOnBorrow(<span class="keyword">true</span>);</div><div class="line">    config.setMaxWaitMillis(<span class="number">2000</span>);</div><div class="line">    <span class="comment">//循环创建16个redis数据库连接池,存放在字典里面</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</div><div class="line">        JedisPool item  = <span class="keyword">new</span> JedisPool(config, <span class="string">"127.0.0.1"</span>, <span class="number">6379</span>,<span class="number">10</span>*<span class="number">1000</span>);</div><div class="line">        pools.put(i, item);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[she]]></title>
      <url>http://jiangxiaoqiang.com/2016/11/01/she/</url>
      <content type="html"><![CDATA[<p>like:</p>
<ul>
<li>鱼(Fish)</li>
<li>广味香肠</li>
</ul>
<h4 id="节目"><a href="#节目" class="headerlink" title="节目"></a>节目</h4><ul>
<li>《真正男子漢》(Takes a Real man)</li>
</ul>
<p>dislike:</p>
<ul>
<li>生食(日本料理),可以少量吃北极贝和甜虾</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kafka常用操作]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/29/kafka-common-operation/</url>
      <content type="html"><![CDATA[<p>启动kafka：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./kafka-server-start.sh ../config/server.properties &amp;</div></pre></td></tr></table></figure>
<p>创建主题：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./kafka-topics.sh --zookeeper localhost:2181 --create --topic <span class="built_in">test</span>1 --partitions 1 --replication-factor 1 --config max.message.bytes=64000 --config flush.messages=1</div></pre></td></tr></table></figure>
<p>查看所有主题：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./kafka-topics.sh --list --zookeeper 192.168.24.11:2181</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>删除主题：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./kafka-topics.sh --zookeeper 192.168.24.244:2181 --delete --topic 0085000</div></pre></td></tr></table></figure>
<p>消费主题：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 从开始处消费主题</span></div><div class="line">./kafka-console-consumer.sh --zookeeper localhost:2181 --from-beginning --topic 0085000</div><div class="line"></div><div class="line"><span class="comment"># 从最新位置消费主题</span></div><div class="line">./kafka-console-consumer.sh --zookeeper localhost:2181 --topic 0085000</div></pre></td></tr></table></figure>
<p>改变主题L000000的默认分区数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/kafka-topics.sh  --zookeeper 192.168.24.238:2181,192.168.24.11:2181,192.168.24.71:2181 --alter --topic L000000 --partitions 2</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kafka彻底删除主题]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/29/kafka-delete-topic/</url>
      <content type="html"><![CDATA[<p>这里的Kafka的版本是0.9.0.1，查看所有Topics和分区：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./kafka-topics.sh --describe --zookeeper 192.168.244.11:2181</div></pre></td></tr></table></figure>
<p>只查看所有Topic：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./kafka-topics.sh --list --zookeeper 192.168.24.244:2181</div></pre></td></tr></table></figure>
<p>删除主题：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./kafka-topics.sh --zookeeper 192.168.24.244:2181 --delete --topic 0085000</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>删除主题并不是真正的删除，仅仅是标记为删除(marked for deletion)，如果想彻底删除主题，可以修改kafka的配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delete.topic.enable=<span class="literal">true</span></div></pre></td></tr></table></figure>
<p>删除Kafka存储目录(server.properties文件log.dirs配置，默认为”/tmp/kafka-logs”)相关topic目录。配置了<code>delete.topic.enable=true</code>直接通过命令删除，如果命令删除不掉，直接通过zookeeper-client删除掉broker下的topic即可。登录ZooKeeper客户端：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#切换到ZooKeeper目录</span></div><div class="line"><span class="built_in">cd</span> /usr/hdp/2.4.3.0-227/zookeeper/bin</div><div class="line"></div><div class="line"><span class="comment">#登录ZooKeeper客户端</span></div><div class="line">./zookeeper-client</div><div class="line"></div><div class="line"><span class="comment">#找到topic所在的目录</span></div><div class="line">ls /brokers/topics</div><div class="line"></div><div class="line"><span class="comment">#彻底删除topic(remove recursively)</span></div><div class="line">rmr /brokers/topics/0085000</div></pre></td></tr></table></figure>
<p>如果不知道ZooKeeper客户端的目录，可以通过如下命令找到。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find / -name zookeeper-client</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kafka常见错误]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/28/kafka-error/</url>
      <content type="html"><![CDATA[<h4 id="Invalid-partition-given-with-record"><a href="#Invalid-partition-given-with-record" class="headerlink" title="Invalid partition given with record"></a>Invalid partition given with record</h4><p>在Kafka生产者里写入消息时，提示写入失败，详细的错误信息如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[ERROR]-[2016年-10月-28日16:17:35.083]-[Thread-25]-[com.zw.socket.service.kafka.producer.ClientKafkaProducer]-&#123;生产者发送消息出错&#125;java.lang.IllegalArgumentException: Invalid partition given with record: 1 is not in the range [0...1].</div><div class="line">	at org.apache.kafka.clients.producer.KafkaProducer.partition(KafkaProducer.java:671) ~[kafka-clients-0.9.0.1.jar:?]</div><div class="line">	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:430) ~[kafka-clients-0.9.0.1.jar:?]</div><div class="line">	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:339) ~[kafka-clients-0.9.0.1.jar:?]</div><div class="line">	at com.zw.socket.service.kafka.producer.ClientKafkaProducer.sendMessage(ClientKafkaProducer.java:102) [classes/:?]</div><div class="line">	at com.zw.socket.service.handler.common.CommonCommandHandler.commonMessageWriteIntoKafka(CommonCommandHandler.java:95) [classes/:?]</div><div class="line">	at com.zw.socket.service.handler.device.DeviceMessageHandler.sendRegisterResult(DeviceMessageHandler.java:175) [classes/:?]</div><div class="line">	at com.zw.socket.service.handler.device.DeviceMessageHandler.isAllowRegisted(DeviceMessageHandler.java:161) [classes/:?]</div><div class="line">	at com.zw.socket.service.handler.device.DeviceMessageHandler.saveDeviceInfo(DeviceMessageHandler.java:216) [classes/:?]</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>在Kafka的配置文件中，修改Kafka每个topic的默认分区数的配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#每个topic的分区个数，更多的partition会产生更多的segment file</span></div><div class="line">num.partitions=2</div></pre></td></tr></table></figure>
<h4 id="The-group-coordinator-is-not-available"><a href="#The-group-coordinator-is-not-available" class="headerlink" title="The group coordinator is not available"></a>The group coordinator is not available</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">2016-10-29 14:52:56.387 INFO [nioEventLoopGroup-3-1][org.apache.kafka.common.utils.AppInfoParser$AppInfo:82] - Kafka version : 0.9.0.1</div><div class="line">2016-10-29 14:52:56.387 INFO [nioEventLoopGroup-3-1][org.apache.kafka.common.utils.AppInfoParser$AppInfo:83] - Kafka commitId : 23c69d62a0cabf06</div><div class="line">2016-10-29 14:52:56.409 ERROR [nioEventLoopGroup-3-1][org.apache.kafka.clients.consumer.internals.ConsumerCoordinator$DefaultOffsetCommitCallback:489] - Offset commit failed.</div><div class="line">org.apache.kafka.common.errors.GroupCoordinatorNotAvailableException: The group coordinator is not available.</div><div class="line">2016-10-29 14:52:56.519 WARN [kafka-producer-network-thread | producer-1][org.apache.kafka.clients.NetworkClient$DefaultMetadataUpdater:582] - Error while fetching metadata with correlation id 0 : &#123;0085000=LEADER_NOT_AVAILABLE&#125;</div><div class="line">2016-10-29 14:52:56.612 WARN [pool-6-thread-1][org.apache.kafka.clients.NetworkClient$DefaultMetadataUpdater:582] - Error while fetching metadata with correlation id 1 : &#123;0085000=LEADER_NOT_AVAILABLE&#125;</div></pre></td></tr></table></figure>
<p>产生问题具体原因不详，可能是修改了默认分区导致的，解决方法：停止Kafka Broker，登录ZooKeeper客户端，删除所有主题即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#切换到ZooKeeper目录</span></div><div class="line"><span class="built_in">cd</span> /usr/hdp/2.4.3.0-227/zookeeper/bin</div><div class="line"></div><div class="line"><span class="comment">#登录ZooKeeper客户端</span></div><div class="line">./zookeeper-client</div><div class="line"></div><div class="line"><span class="comment">#找到topic所在的目录</span></div><div class="line">ls /brokers/topics</div><div class="line"></div><div class="line"><span class="comment">#彻底删除topic</span></div><div class="line">rmr /brokers/topics/0085000</div></pre></td></tr></table></figure>
<h4 id="无法往集群中写入数据"><a href="#无法往集群中写入数据" class="headerlink" title="无法往集群中写入数据"></a>无法往集群中写入数据</h4><p>检查部署服务器节点，也就是写入节点的<code>/etc/hosts</code>配置文件中是否有IP和主机名的映射。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/hosts</div></pre></td></tr></table></figure>
<p>配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</div><div class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</div><div class="line">192.168.24.136 节点1主机名</div><div class="line">192.168.24.137 节点2主机名</div><div class="line">192.168.24.244 localhost</div></pre></td></tr></table></figure>
<h4 id="Consumer-Marking-the-coordinator-XXXXX-dead"><a href="#Consumer-Marking-the-coordinator-XXXXX-dead" class="headerlink" title="Consumer Marking the coordinator XXXXX dead"></a>Consumer Marking the coordinator XXXXX dead</h4><p>Marking the coordinator dead happens when there is a Network communication error between the Consumer Client and the Coordinator (Also this can happen when the Coordinator dies and the group needs to rebalance). There are a variety of situations (offset commit request, fetch offset, etc) that can cause this issue. I will suggest that you research what’s causing this situations。解决此问题，重新启动消费者/生产者。</p>
<h4 id="LEADER-NOT-AVAILABLE"><a href="#LEADER-NOT-AVAILABLE" class="headerlink" title="LEADER_NOT_AVAILABLE"></a>LEADER_NOT_AVAILABLE</h4><p>在Kafka消费数据时，提示如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">14:37:19.717]-[Thread-24]-[org.apache.kafka.clients.NetworkClient]-&#123;Error while fetching metadata with correlation id 63 : &#123;0402080=LEADER_NOT_AVAILABLE, T16092920=LEADER_NOT_AVAILABLE, TH003086=LEADER_NOT_AVAILABLE, 65565665666=LEADER_NOT_AVAILABLE, 0146636=LEADER_NOT_AVAILABLE, 16687896589=LEADER_NOT_AVAILABLE, CQSZ=LEADER_NOT_AVAILABLE, 25698568=LEADER_NOT_AVAILABLE, 1037494=LEADER_NOT_AVAILABLE, 1551555=LEADER_NOT_AVAILABLE, 0085000=LEADER_NOT_AVAILABLE, L000010=LEADER_NOT_AVAILABLE, 145263078=LEADER_NOT_AVAILABLE&#125;&#125;</div></pre></td></tr></table></figure>
<p>重新启动生产者即可。KafkaProducer/Sender都需要获取集群的配置信息Metadata。所谓Metadata，Topic/Partion与broker的映射关系：每一个Topic的每一个Partion，得知道其对应的broker列表是什么，其中leader是谁，follower是谁。Sender从集群获取信息，然后更新Metadata； KafkaProducer先读取Metadata，然后把消息放入队列。如果没有获取到相应的元素据(Metadata)，则会有如下错误：<code>fetching topic metadata for topics from broker failed</code>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HP KU 1158键盘]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/27/new-keyboard/</url>
      <content type="html"><![CDATA[<p>以前的旧键盘打字的声音有点大，中午打字都担心吵到旁边休息的同学，而且按键比较生硬，今天特意请飞哥换了一款键盘HP KU 1158，确实好用不少。一直在找一款适合长时间输入的键盘，而且要求声音要尽量小一些，价格平民化一些(Realforce一千多也还蛮贵的)。这款键盘符合要求。</p>
<a id="more"></a>
<img src="/2016/10/27/new-keyboard/new-keyboard-overview.jpg" alt="键盘正面" title="键盘正面">
<img src="/2016/10/27/new-keyboard/new-keyboard-detail.jpg" alt="键盘参数信息" title="键盘参数信息">
<p><a href="https://www.amazon.com/HP-black-keyboard-KU-1156-672647-003/dp/B00LLK88IE" target="_blank" rel="external">Amaozn购买链接</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WebSocket连接(SessionConnectEvent)、断开连接(SessionDisconnectEvent)事件]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/27/websocket-event/</url>
      <content type="html"><![CDATA[<p>WebSocket事件：SessionConnectEvent(连接时), SessionConnectedEvent(连接后), SessionDisconnectEvent(断开连接)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketDisconnectHandler</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">SessionDisconnectEvent</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(SessionDisconnectEvent sessionDisconnectEvent)</span> </span>&#123;</div><div class="line">        StompHeaderAccessor stompHeaderAccessor = StompHeaderAccessor.wrap(sessionDisconnectEvent.getMessage());</div><div class="line">        <span class="comment">//do something</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加了断开连接实现类后的逻辑后，还需要注入Bean，否则不会生效。在相关配置文件(<code>spring-socket-servlet.xml</code>)中增加如下配置即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zw.socket.service.config.WebSocketDisconnectHandler"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Stomp + WebSocket消息实时推送]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/25/stomp-spring-message-push/</url>
      <content type="html"><![CDATA[<h4 id="消息广播"><a href="#消息广播" class="headerlink" title="消息广播"></a>消息广播</h4><p>消息广播将消息发送给所有用户。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 推送给所有用户</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pushInfoImpl</span><span class="params">(String url, String content)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (simpMessagingTemplate != <span class="keyword">null</span>) &#123;</div><div class="line">        simpMessagingTemplate.convertAndSend(url, content);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="推送给指定用户"><a href="#推送给指定用户" class="headerlink" title="推送给指定用户"></a>推送给指定用户</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 推送给指定用户</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pushInfoImpl</span><span class="params">(String user, String url, String content)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (simpMessagingTemplate != <span class="keyword">null</span>) &#123;</div><div class="line">        simpMessagingTemplate.convertAndSendToUser(user, url, content);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>url直接为<code>/location</code>，在发给客户端的时，会自动添加user前缀和用户名，客户端订阅的url像这样：<code>/user/admin/location</code>，订阅的url中，不包含topic。content为需要发送的消息的内容。</p>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>客户端订阅消息如下代码片段所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">stompClient.subscribe(<span class="string">'/user/admin/location/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">greeting</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'接收到订阅的信息：'</span> + greeting.body);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>客户端订阅的URL中，admin是用户名。发送给指定用户时会默认添加user前缀。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQuirreL GUI客户端集成Phoenix、MySQL配置]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/25/squirrel-phoenix-configuration/</url>
      <content type="html"><![CDATA[<h4 id="SQuirreL-GUI客户端简介"><a href="#SQuirreL-GUI客户端简介" class="headerlink" title="SQuirreL GUI客户端简介"></a>SQuirreL GUI客户端简介</h4><p>SQuirreL GUI(<a href="https://sourceforge.net/projects/squirrel-sql/?source=typ_redirect" target="_blank" rel="external">下载地址</a>)客户端来连接Phoenix，就像MySQL使用Navicat for MySQL，Oracle使用PL/SQL Developer一样，在进行一些数据库操作的时候能够更加的直观和方便。同时它还可以连接MySQL。它可以运行在Windows、Linux、Mac OS操作系统上。</p>
<a id="more"></a>
<h4 id="下载并安装SQuirreL-GUI"><a href="#下载并安装SQuirreL-GUI" class="headerlink" title="下载并安装SQuirreL GUI"></a>下载并安装SQuirreL GUI</h4><p>下载好的文件是一个压缩包(<code>squirrel-sql-3.7.1-standard.zip</code>)。不用解压缩，直接修改文件的后缀名为jar(<code>squirrel-sql-3.7.1-standard.jar</code>)，双击即可打开安装界面。如果无法双击打开，则可以通过命令行的方式打开：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar squirrel-sql-3.7-standard.jar</div></pre></td></tr></table></figure>
<h4 id="下载驱动"><a href="#下载驱动" class="headerlink" title="下载驱动"></a>下载驱动</h4><p>到Phoenix<a href="http://www.apache.org/dyn/closer.lua/phoenix/" target="_blank" rel="external">镜像站点</a>下载包，这里选择的是<code>apache-phoenix-4.8.0-HBase-1.2-bin.tar.gzip</code>，到解压的<code>apache-phoenix-4.8.0-HBase-1.2-bin.tar.gzip</code>包的主目录下，将如下几个jar包拷贝到SQuirreL安装目录的lib目录下，例如本机路径是<code>D:\Program Files\squirrel-sql-3.7.1\lib</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">phoenix-4.8.0-HBase-1.2-client.jar</div></pre></td></tr></table></figure>
<p>注意顺序，先拷贝jar包，在启动SQuirreL添加驱动，如果是拷贝jar包时已经启动了SQuirreL，那么SQuirreL需要重启一下，拷贝的jar包才生效，这个是需要注意的地方，可以参见<a href="http://stackoverflow.com/questions/40215921/squirrel-configure-could-not-initial-class-org-apache-phoenix-jdbc-phoenixdrive/40225765#40225765" target="_blank" rel="external">SQuirreL Configure: could not initial class org.apache.phoenix.jdbc.PhoenixDriver</a>。在连接不同的HBase数据库时，需要注意驱动的版本，不同版本的驱动是无法正确连接的。高版本的驱动无法连接低版本的HBase。</p>
<h4 id="添加Driver"><a href="#添加Driver" class="headerlink" title="添加Driver"></a>添加Driver</h4><p>添加Driver如下图所示。</p>
<img src="/2016/10/25/squirrel-phoenix-configuration/sphonix-driver-configuration.jpg" alt="Sphonix增加驱动" title="Sphonix增加驱动">
<p>Name填写用户自定义名称。Example URL填写ZooKepper地址。Class Name填写：<code>org.apache.phoenix.jdbc.PhoenixDriver</code>。</p>
<h4 id="添加Alias连接Hbase"><a href="#添加Alias连接Hbase" class="headerlink" title="添加Alias连接Hbase"></a>添加Alias连接Hbase</h4><p>如下图所示。</p>
<img src="/2016/10/25/squirrel-phoenix-configuration/addAlias.jpg" alt="增加Alias" title="增加Alias">
<p>Name是Alias的名字，可以填写自定义名称。Driver选择上一步配置好的Driver名称，这里是Phoenix。url填写Phoenix连接串：<code>jdbc:phoenix:192.168.24.226,192.168.24.195:2181:/hbase-unsecure</code>。UserName和Password填写操作系统的登录用户和登录密码。</p>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>SQL查询如下图所示。</p>
<img src="/2016/10/25/squirrel-phoenix-configuration/configurationResult.jpg" alt="SQL查询" title="SQL查询">
<h4 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h4><p>将MySQL的驱动<code>mysql-connector-java-5.1.39.jar</code>拷贝到lib目录下。</p>
<img src="/2016/10/25/squirrel-phoenix-configuration/squirrel-connect-mysql.jpg" alt="SQuirreL连接MySQL" title="SQuirreL连接MySQL">
<p>驱动链接填写：<code>jdbc:mysql://192.168.24.234:3306/clbs?useUnicode=true&amp;characterEncoding=utf-8</code>。用户名和密码填写登录Linux主机的用户名和密码。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fedora使用技巧]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/21/Fedora-shortkey/</url>
      <content type="html"><![CDATA[<p>如下是我在使用Fedora的過程中整理的快捷键列表，网络上有许多快捷键版本，下表是经过测试可用，并一直在使用的快捷键。希望使用Fedora的朋友可以參考，加快熟悉Fedora的速度。</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows + A</td>
<td style="text-align:center">显示软件列表</td>
</tr>
<tr>
<td>Windows + H</td>
<td style="text-align:center">隐藏当前窗口</td>
</tr>
<tr>
<td>Alt + F10</td>
<td style="text-align:center">最大化、还原当前窗口</td>
</tr>
<tr>
<td>Alt + F2</td>
<td style="text-align:center">打开命令行界面</td>
</tr>
<tr>
<td>Windows/ Alt+ F2</td>
<td style="text-align:center">在当前活动窗口和所有窗口概览视图之间切换</td>
</tr>
<tr>
<td>Ctrl + Alt + Up/Down</td>
<td style="text-align:center">切换当前窗口</td>
</tr>
<tr>
<td>Alt + Tab</td>
<td style="text-align:center">应用程序之间进行切换</td>
</tr>
<tr>
<td>Windows + Left/Right/Up/Down</td>
<td style="text-align:center">将窗口移向左右、最大化、还原</td>
</tr>
<tr>
<td>Windows + PageUp/PageDown</td>
<td style="text-align:center">切换工作区</td>
</tr>
<tr>
<td>Ctrl + L</td>
<td style="text-align:center">清空终端(Terminal)</td>
</tr>
<tr>
<td>Ctrl + Shift + T(Terminal)</td>
<td style="text-align:center">以Tab頁的形式打開終端</td>
</tr>
<tr>
<td>Ctrl + Shift + N(New)</td>
<td style="text-align:center">打開一個新的終端</td>
</tr>
<tr>
<td>Ctrl + Alt + Del</td>
<td style="text-align:center">调出关机界面</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h4 id="打开终端"><a href="#打开终端" class="headerlink" title="打开终端"></a>打开终端</h4><p>在Ubuntu中打开终端可以使用快捷键Ctrl + Alt + T(Terminal)，在Fedora中打开All Settings-&gt;Keyboard-&gt;Custom Shortcuts，添加快捷键即可。在快捷键的command中输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gnome-terminal</div></pre></td></tr></table></figure>
<p>在平时使用中，总有一个目录是使用频率最高的，此时打开终端时可以默认切换到对应的目录，只需要将启动命令改为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gnome-terminal --working-directory=/home/dolphin/dolphin/project/blogs/xiaoqiang-blog-source</div></pre></td></tr></table></figure>
<p>此时使用快捷键打开终端时默认为设置的目录，非常之方便。</p>
<h4 id="打开文件夹"><a href="#打开文件夹" class="headerlink" title="打开文件夹"></a>打开文件夹</h4><p>在Fedora中打开All Settings-&gt;Keyboard-&gt;Custom Shortcuts，添加快捷键即可，这里设置的是Ctrl + Alt + H(Home)。在快捷键的command中输入命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nautilus</div></pre></td></tr></table></figure>
<p>即可打开文件夹。</p>
<h4 id="打开常用应用快捷键"><a href="#打开常用应用快捷键" class="headerlink" title="打开常用应用快捷键"></a>打开常用应用快捷键</h4><p>在Fedora中打开All Settings-&gt;Keyboard-&gt;Custom Shortcuts，添加快捷键即可，这里设置的是。在快捷键的command中输入命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#打开微信，Ctrl + Alt + W(WeChat)</span></div><div class="line">/opt/electronic-wechat-linux-x64/electronic-wechat</div><div class="line"><span class="comment">#打开Google Chrome,快捷键设置为：Ctrl + Alt + G(Google Chrome)</span></div><div class="line">/opt/google/chrome/chrome</div></pre></td></tr></table></figure>
<p>即可快速打开微信,微信使用的是electronic-wechat，安装目录是/opt/electronic-wechat-linux-x64/。</p>
<p><a href="https://help.gnome.org/users/gnome-help/3.12/shell-keyboard-shortcuts.html.en" target="_blank" rel="external">Useful keyboard shortcuts</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring模块化配置]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/21/spring-module-config/</url>
      <content type="html"><![CDATA[<p>Spring的一大缺点就是配置文件非常多，想象如果没有注解扫描Bean，所有的Bean都配置在XML文件中，将会是一个噩梦，项目中会充斥着大量的配置文件。这也是Spring-Boot项目所要避免的问题之一，在做项目开发时，为了使配置显得有条理化，易于理解，可以采用Spring Import配置文件，项目中需要一个Spring的主文件，在Web.xml中指定Spring的主文件位置，主文件再Import各类配置文件。指定主文件如下代码片段所示：</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-config/spring-main-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中<code>spring-main-config.xml</code>即是项目的Spring配置主文件。classpath是指WEB-INF文件夹下的classes目录,classpath 和 classpath<em> 区别是：classpath：只会到你的class路径中查找找文件;classpath</em>：不仅包含class路径，还包括jar文件中(class路径)进行查找.在部署完毕的WEB项目中，一般包含WEB-INF和META-INF文件夹。META-INF相当于一个信息包，目录中的文件和目录获得Java 2平台的认可与解释，用来配置应用程序、扩展程序、类加载器和服务manifest.mf文件，在用jar打包时自动生成。其中主配置文件中使用Import Resource如下代码片段所示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">    http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">    http://www.springframework.org/schema/aop</div><div class="line">    http://www.springframework.org/schema/aop/spring-aop.xsd  </div><div class="line">    http://www.springframework.org/schema/util</div><div class="line">    http://www.springframework.org/schema/util/spring-util.xsd</div><div class="line">    http://www.springframework.org/schema/context</div><div class="line">    http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>spring主配置文件<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 属性和配置文件读入 ,多个用逗号隔开 数据库参数和系统参数 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"applicationProperties"</span> <span class="attr">location</span>=<span class="string">"classpath:application.properties"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">properties-ref</span>=<span class="string">"applicationProperties"</span> <span class="attr">ignore-resource-not-found</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 扫描注解@Component , @Service , @Repository。--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span></span></div><div class="line">		<span class="attr">base-package</span>=<span class="string">"main.src.*"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></div><div class="line">			<span class="attr">expression</span>=<span class="string">"org.aspectj.lang.annotation.Aspect"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></div><div class="line">			<span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></div><div class="line">			<span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.RestController"</span> /&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></div><div class="line">			<span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.ControllerAdvice"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--aop 注解风格支持 proxy-targer-class默认false,用jdk动态代理,true是cglib .expose-proxy当前代理是否为可暴露状态,值是"ture",则为可访问。 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span></span></div><div class="line">		<span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</div><div class="line">	<span class="comment">&lt;!--aop xml风格支持 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 导入其它spring配置文件 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-filters.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-datasource.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-mybatis.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-cache.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-i18n.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-json.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-security.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-exception.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-log.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-validator.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-quartz.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-socket-servlet.xml"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Stomp WebSocket路由]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/20/stomp-url-route/</url>
      <content type="html"><![CDATA[<p>STOMP即Simple (or Streaming) Text Orientated Messaging Protocol，简单(流)文本定向消息协议，它提供了一个可互操作的连接格式，允许STOMP客户端与任意STOMP消息代理（Broker）进行交互。STOMP协议由于设计简单，易于开发客户端，因此在多种语言和多种平台上得到广泛地应用。WebSocket协议的应用层子协议STOMP（流文本定向消息协议）。在应用中直接使用WebSocket API显得有些低端，直到统一标准规范时也只有一小部分框架可以解析信息或通过注解方式使用它。这正是考虑在应用中运用子协议和产生基于WebSocket支持的Spring的STOMP的原因。当运用一个上层协议，WebSocket API的细节就显得不那么重要了，正如运用了HTTP后TCP的通信细节不再暴漏在应用中一样。STOMP是为了简单而创建的一种消息协议。它基于模仿HTTP协议的帧。帧由一个命令、可选的头和可选的体组成。</p>
<a id="more"></a>
<p>业务中需要实现不同的消息类别分发，在客户端进行不同的处理。此时想到Stomp的路由。</p>
<h4 id="服务端启动代理中继"><a href="#服务端启动代理中继" class="headerlink" title="服务端启动代理中继"></a>服务端启动代理中继</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebSocketMessageBroker</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">extends</span> <span class="title">AbstractWebSocketMessageBrokerConfigurer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry config)</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 启用了STOMP代理中继功能：并将其目的地前缀设置为 "/topic"；</div><div class="line">         * spring就能知道 所有目的地前缀为"/topic" 的消息都会发送到STOMP代理中；</div><div class="line">         */</div><div class="line">        config.enableSimpleBroker(<span class="string">"/topic"</span>);</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 设置了应用的前缀为"app"：所有目的地以"/app"打头的消息（发送消息url not连接url）</div><div class="line">         * 都会路由到带有<span class="doctag">@MessageMapping</span>注解的方法中，而不会发布到代理队列或主题中；</div><div class="line">         */</div><div class="line">        config.setApplicationDestinationPrefixes(<span class="string">"/app"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> </span>&#123;</div><div class="line">        registry.addEndpoint(<span class="string">"/gs-guide-websocket"</span>).withSockJS();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者以XML文件的方式进行配置，两者是等价的：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xmlns:websocket</span>=<span class="string">"http://www.springframework.org/schema/websocket"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">        http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/websocket</div><div class="line">        http://www.springframework.org/schema/websocket/spring-websocket.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">websocket:message-broker</span> <span class="attr">application-destination-prefix</span>=<span class="string">"/app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">websocket:stomp-endpoint</span> <span class="attr">path</span>=<span class="string">"/gs-guide-websocket"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">websocket:sockjs</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">websocket:stomp-endpoint</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">websocket:simple-broker</span> <span class="attr">prefix</span>=<span class="string">"/topic, /queue"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">websocket:message-broker</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="服务端添加Controller"><a href="#服务端添加Controller" class="headerlink" title="服务端添加Controller"></a>服务端添加Controller</h4><p>Spring官方的例子演示了Send-Response模型，如果需要请求之后，服务端多次推送消息，主动推送消息，可采用如下方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> SimpMessagingTemplate template;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GreetingController</span><span class="params">(SimpMessagingTemplate template)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.template = template;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@MessageMapping</span>(<span class="string">"/hello"</span>)</div><div class="line">    <span class="meta">@SendTo</span>(<span class="string">"/topic/greetings"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greeting</span><span class="params">(HelloMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        template.convertAndSend(<span class="string">"/topic/greetings"</span>, <span class="string">"aaaaaaa"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SimpMessagingTemplate是Spring实现的一个发送模板类，直接自动注入获取相应实例即可。SimpMessagingTemplate实例可以实现服务端主动向客户端订阅的Url推送消息。第一个参数为推送地址，第二个参数为需要推送的消息内容。</p>
<h4 id="浏览器端"><a href="#浏览器端" class="headerlink" title="浏览器端"></a>浏览器端</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> socket = <span class="keyword">new</span> SockJS(<span class="string">'/clbs/gs-guide-websocket'</span>);</div><div class="line">    stompClient = Stomp.over(socket);</div><div class="line">    stompClient.connect(&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">frame</span>) </span>&#123;</div><div class="line">        setConnected(<span class="literal">true</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Connected: '</span> + frame);</div><div class="line">        stompClient.subscribe(<span class="string">'/topic/greetings'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">greeting</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(greeting.body);</div><div class="line">        &#125;);        </div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>clbs是项目名称，gs-guide-websocket是终结点名称。greeting.body是取出服务端响应的消息体(Message Body)。Stomp协议与HTTP协议有许多相似之处，命令 + 消息头 + 空行 + 消息体。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stompClient.send(<span class="string">"/app/gs-guide-websocket/location"</span>,&#123;&#125;,<span class="built_in">JSON</span>.stringify(requestStr));</div></pre></td></tr></table></figure>
<p><a href="http://jmesnil.net/stomp-websocket/doc/" target="_blank" rel="external">STOMP Over WebSocket</a></p>
<p><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html" target="_blank" rel="external">WebSocket Support</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[expected single matching bean but found 2]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/20/spring-encount-error/</url>
      <content type="html"><![CDATA[<p>在WebSocket往客户端推送消息的开发过程中，获取推送消息实例<code>SimpMessagingTemplate</code>时，错误如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ERROR]-[2016年-10月-19日17:53:25.026]-[RMI TCP Connection(2)-127.0.0.1]-[org.springframework.web.context.ContextLoader]-&#123;Context initialization failed&#125; org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name  &apos;com.zw.socket.service.controller.InstanceMessageController#0&apos; defined in class path resource [spring-config/spring-socket-servlet.xml]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [org.springframework.messaging.simp.SimpMessagingTemplate] is defined: expected single matching bean but found 2:org.springframework.messaging.simp.SimpMessagingTemplate#0,brokerMessagingTemplate</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>发生此错误的原因是在配置文件<code>spring-socket-servlet.xml</code>里重复做了如下配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">websocket:message-broker</span> <span class="attr">application-destination-prefix</span>=<span class="string">"/app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">websocket:stomp-endpoint</span> <span class="attr">path</span>=<span class="string">"/vehicle"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">websocket:handshake-interceptors</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">websocket:handshake-interceptors</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">websocket:sockjs</span> <span class="attr">session-cookie-needed</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">websocket:stomp-endpoint</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">websocket:simple-broker</span> <span class="attr">prefix</span>=<span class="string">"/topic"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">websocket:message-broker</span>&gt;</span></div></pre></td></tr></table></figure>
<p>扫描配置文件时会自动生成一个<code>brokerMessagingTemplate</code>实例，与实例<code>simpMessagingTemplate</code>冲突。解决的方法就是去掉配置文件中的配置。</p>
<p>参考：</p>
<p><a href="http://stackoverflow.com/questions/22925951/could-not-autowire-no-beans-of-simpmessagingtemplate-type-found" target="_blank" rel="external">Could not autowire. No beans of SimpMessagingTemplate type found</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring Bean是否注册判断]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/18/spring-bean-registered/</url>
      <content type="html"><![CDATA[<p>在项目的开发过程中有许多Bean，怎么判断一个Bean是否已经纳入容器管理了呢？当然最直接的方式是直接使用，如果不能用，那么肯定就未注册成功，但是也有的情况不是那么明显的，即使没有注册成功也不会有明显的错误。如何有效的鉴别和判断是否已经注册？</p>
<a id="more"></a>
<h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p>在项目启动时会输出日志，提示注册了哪些Bean，那么只需要使用Bean的名称，在日志里面搜索一遍，即可知晓Bean是否已经注册，如果有相关注册成功输出提示，那么代表注册OK，如果没有相关日志，此时就需要排查Bean的配置了。</p>
<h4 id="方法获取Bean"><a href="#方法获取Bean" class="headerlink" title="方法获取Bean"></a>方法获取Bean</h4><p>可以通过如下方法获取特定注解的Bean的集合：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Map&lt;String,Object&gt; beans = applicationContext.getBeansWithAnnotation(Foo.class);</div></pre></td></tr></table></figure>
<p>其中Foo代表@Autowired、@Controller等等注解。</p>
<p><a href="http://stackoverflow.com/questions/40108153/is-there-any-way-to-query-bean-of-spring-container?noredirect=1#comment67489885_40108153" target="_blank" rel="external">Is there any way to query bean of spring container</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring线程中Bean注入问题]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/18/spring-get-bean/</url>
      <content type="html"><![CDATA[<h4 id="实现ApplicationContextAware"><a href="#实现ApplicationContextAware" class="headerlink" title="实现ApplicationContextAware"></a>实现ApplicationContextAware</h4><p>在Spring中开启线程时，无法使用Bean的自动注入，此时需要手动获取Bean。方法如下：</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class SpringApplicationContextHolder implements ApplicationContextAware &#123;</div><div class="line">	private static ApplicationContext context;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void <span class="built_in">set</span>ApplicationContext(ApplicationContext context) throws BeansException &#123;</div><div class="line">		SpringApplicationContextHolder.context = context;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static Object getSpringBean(String beanName) &#123;</div><div class="line">		<span class="built_in">return</span> context == null ? null : context.getBean(beanName);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static String[] <span class="function"><span class="title">getBeanDefinitionNames</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> context.getBeanDefinitionNames();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="配置文件注册"><a href="#配置文件注册" class="headerlink" title="配置文件注册"></a>配置文件注册</h4><p>在Spring中注册工具类的bean：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zw.socket.service.kafka.comsumer.SpringApplicationContextHolder"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="获取Bean"><a href="#获取Bean" class="headerlink" title="获取Bean"></a>获取Bean</h4><p>获取Bean实例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ClientMessageTransfer clientMessageTransfer=(ClientMessageTransfer)SpringApplicationContextHolder.getSpringBean(<span class="string">"clientMessageTransfer"</span>);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[port aready in use]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/17/port-aready-in-use/</url>
      <content type="html"><![CDATA[<p>在使用Intellij Idea调试时，以Application方式启动程序时提示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">2016-10-17 11:28:38.537 ERROR 23156 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   : </div><div class="line"></div><div class="line">***************************</div><div class="line">APPLICATION FAILED TO START</div><div class="line">***************************</div><div class="line"></div><div class="line">Description:</div><div class="line"></div><div class="line">The Tomcat connector configured to listen on port 8080 failed to start. The port may already be in use or the connector may be misconfigured.</div><div class="line"></div><div class="line">Action:</div><div class="line"></div><div class="line">Verify the connector&apos;s configuration, identify and stop any process that&apos;s listening on port 8080, or configure this application to listen on another port.</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>提示8080端口已经被占用了，由于此时是以Application方式启动的，没有Tomcat的相关端口配置。Spring Boot uses embedded Tomcat by default, but it handles it differently without using tomcat-maven-plugin. To change the port use –server.port parameter for example。添加程序启动参数：<code>–server.port=8181</code>，更改嵌入的Tomcat的端口即可解决此问题。如图所示：</p>
<img src="/2016/10/17/port-aready-in-use/modify-tomcat-port.jpg" alt="修改Tomcat的启动端口" title="修改Tomcat的启动端口">
<p>解决方案来自StackOverflow：</p>
<p><a href="http://stackoverflow.com/questions/20735205/launching-spring-application-address-already-in-use" target="_blank" rel="external">Launching Spring application Address already in use</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fedora 24搭建Git Server]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/16/fedora-git-server/</url>
      <content type="html"><![CDATA[<p>想将代码拷贝到家里的电脑，在安静的时刻可以阅读消化。每天用U盘拷贝也是比较麻烦，本来Github挺好用的，但是闭源的托管需要费用。刚好办公电脑和家里的电脑安装了OpenVPN,所以就想在家里的电脑搭建一个Git Server，通过OpenVPN将家里的电脑和办公电脑相连(相当于局域网)。这样就可以随时提交代码了。同时也想以SSH连接家里的电脑，所以同时也安装了OpenSSH。也可以SSH远程Copy，但是无法增量Copy，Copy一次大概需要2-3个小时。遂放弃SSH Copy的方案。</p>
<a id="more"></a>
<h4 id="启动SSH服务"><a href="#启动SSH服务" class="headerlink" title="启动SSH服务"></a>启动SSH服务</h4><p>确定是否已经安装SSH服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -qa | grep openssh-server</div></pre></td></tr></table></figure>
<p>如果没有安装服务，输入如下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnf install openssh-server -y</div></pre></td></tr></table></figure>
<p>修改配置文件:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Port 22  监听的端口号，默认是22，可以自定义。</span></div><div class="line"><span class="comment">#Protocol 2  支持的协议，默认就好，不用修改</span></div><div class="line"><span class="comment">#PermitRootLogin yes 是否允许root直接登录，最好设置为no</span></div><div class="line"><span class="comment">#MMaxAuthTries 6 最大登录数，默认是6，建议设置为3，防止别人密码穷举。</span></div></pre></td></tr></table></figure>
<p>修改完配置后，重启SSH服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service ssh restart</div></pre></td></tr></table></figure>
<p>查看SSH服务状态:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service sshd status</div></pre></td></tr></table></figure>
<p>允许此端口（22）访问：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</div></pre></td></tr></table></figure>
<h4 id="初始化Git仓库"><a href="#初始化Git仓库" class="headerlink" title="初始化Git仓库"></a>初始化Git仓库</h4><p>先在Fedora机器上，选定一个目录作为Git仓库，这里选择的是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/home/dolphin/dolphin/source/zwlbs/plateform3.0/zwlbs.git</div></pre></td></tr></table></figure>
<p>在目录下输入命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo git init --bare zwlbs.git</div></pre></td></tr></table></figure>
<h4 id="签出Git库"><a href="#签出Git库" class="headerlink" title="签出Git库"></a>签出Git库</h4><p>在办公的电脑上输入如下命令签出Git仓库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> dolphin@10.0.0.6:/home/dolphin/dolphin/<span class="built_in">source</span>/zwlbs/plateform3.0/zwlbs.git</div></pre></td></tr></table></figure>
<p>签出时会提示确定指纹，选择yes，同时需要输入用户dolphin的密码，输入即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Fedora 24中使用xx-net]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/15/Fedora-24-using-xxnet/</url>
      <content type="html"><![CDATA[<p>虽然此处实际在Linux平台进行的配置，但是XX-Net是跨平台的，在Windows、Mac OS下一样可以使用，在其他的操作系统下配置类似。在Fedora 24中安装完Google Chrome之后，还需要同步在Windows平台上保存的Google Chrome的书签（里面有好多收藏的好网站）、Cookie(不用每次登陆网页输入用户名和密码，记忆用户名和密码非常具有迷惑性，目前注册的用户名密码真的太多了，根本记不住，现在都是借助KeePass来记忆)等等数据。平时的搜索还是需要用Google，Google相比于百度，搜索出的结果更加精确，内容对于用户更加有意义。当你迫切想要知道某个问题的思路时，如果搜索出来一些无关痛痒的内容，是非常浪费时间的，消磨你的意志，会让你有一种被掏空了的感觉，对就是那种感觉。极大的降低了效率，想想如此庞大的用户基数，如果搜索出的内容不精准、没有意义所造成的资源浪费（时间、精力、意志力等）是非常恐怖的。所以这也是为什么费尽心思要使用Google，当你顺利的找到自己想要的内容并快速完成任务时，会深刻的体会到前期在科学上网里花费的时间是值得的。要做到以上两点，就需要借助XX-Net。</p>
<a id="more"></a>
<h4 id="xx-net简介"><a href="#xx-net简介" class="headerlink" title="xx-net简介"></a>xx-net简介</h4><p>XX-Net是一款让你可以让你提高工作效率的工具，它通过让你可以获取到更多的信息的方式达到。<!--比如家里的娃娃晚上总是不睡觉啊，大人也是天天熊猫眼，可以向朋友取经（限于朋友圈子），如果单身狗比较多，就只能自己摸索了，但是有了xx-net,你可以向任何一个国家的人求助阿，提高了寻找到解决方案的概率。-->XX-Net is a free desktop application that delivers fast, reliable and secure access to the open Internet for users in censored regions. It uses google app engine (GAE:Google App Engine) as a proxy server through the firewall.截至目前，xx-net在Github上(全球最大的同性交友网站)已经有10000+的star和1000+的watch。</p>
<h4 id="下载xx-net"><a href="#下载xx-net" class="headerlink" title="下载xx-net"></a>下载xx-net</h4><p>下载在<a href="https://github.com/XX-net/XX-Net/blob/master/code/default/download.md" target="_blank" rel="external">Github</a>.这里下载的是稳定版(Stable Version).</p>
<h4 id="启动xx-net"><a href="#启动xx-net" class="headerlink" title="启动xx-net"></a>启动xx-net</h4><p>下载完毕后,解压文件夹，在终端中切换到解压的文件夹下，运行启动命令。如果是在Windows下，运行<code>start.vbs</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./start</div></pre></td></tr></table></figure>
<p>启动之后，等待程序扫描IP，大概半个小时左右。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>配置主要分为两步，第一步是安装代理自动切换插件，第二步是导入备份文件，第三步是导入证书。</p>
<h5 id="安装代理切换插件"><a href="#安装代理切换插件" class="headerlink" title="安装代理切换插件"></a>安装代理切换插件</h5><p>打开Google Chrome浏览器，切换到插件管理页面,可以选择Settings-Extensions,也可以访问链接：<code>chrome://extensions/</code>，将文件<code>/opt/xx-net/SwitchyOmega/SwitchyOmega.crx</code>托放到浏览器中，即可安装代理自动切换插件SwitchyOmega。</p>
<h4 id="导入备份文件"><a href="#导入备份文件" class="headerlink" title="导入备份文件"></a>导入备份文件</h4><p>到SwitchyOmega的设置页面，找到Import/Export选项卡即可。导入完成后，点击SwitchyOmega，切换成“XX-Net自动切换”，如果使用的是X-Tunnel或SS，请点击“X-Tunnel自动切换”。</p>
<h5 id="导入证书"><a href="#导入证书" class="headerlink" title="导入证书"></a>导入证书</h5><p>在Google Chrome浏览器中，访问地址：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chrome://settings/certificates</div></pre></td></tr></table></figure>
<p>选择Authorities选项卡，选择导入(Import)证书。证书的存放路径为:<code>/data/gae-proxy/</code>下。如下图所示。</p>
<img src="/2016/10/15/Fedora-24-using-xxnet/import-authorize.png" alt="Google-Chrome导入证书" title="Google-Chrome导入证书">
<p>证书导入完成后在浏览器中访问地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localhost:8085</div></pre></td></tr></table></figure>
<p>出现如下图所示页面表示导入成功。</p>
<img src="/2016/10/15/Fedora-24-using-xxnet/configuration-success.png" alt="Google-Chrome导入证书" title="Google-Chrome导入证书">
<h4 id="验证配置并使用"><a href="#验证配置并使用" class="headerlink" title="验证配置并使用"></a>验证配置并使用</h4><p>访问Google搜索引擎，如果能够成功访问Google,代表配置成功。如果首次无法访问，可以待后台程序多运行一些时间，几十分钟到几小时不等。一段时间之后再次尝试。需要注意的是XX-Net代理上网不具有匿名性，或者说匿名性很弱。</p>
<p>参考资料：</p>
<ul>
<li><a href="https://github.com/XX-net/XX-Net/wiki/%E4%BD%BF%E7%94%A8Chrome%E6%B5%8F%E8%A7%88%E5%99%A8" target="_blank" rel="external">使用Chrome浏览器</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux开机自动启动程序]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/14/script-startup-with-linux/</url>
      <content type="html"><![CDATA[<h4 id="开机时自动运行"><a href="#开机时自动运行" class="headerlink" title="开机时自动运行"></a>开机时自动运行</h4><p>一般有守护进程的服务在Fedora 24中都可以通过systemctl命令自动运行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl <span class="built_in">enable</span> ServiceName</div></pre></td></tr></table></figure>
<p>对于没有服务的程序，如果想在开机时随系统启动可以通过脚本来实现。</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup openvpn /etc/openvpn/client.conf</div></pre></td></tr></table></figure>
<p>添加nohup后台启动，避免父进程结束的时候一并结束子进程。在<code>/etc/rc.d/rc.local</code>脚本中加入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/openvpn/startopenvpn.sh</div></pre></td></tr></table></figure>
<ul>
<li>0:Halt</li>
<li>1:Single-user mode</li>
<li>2:Multi-user mode</li>
<li>3:Multi-user mode with networking</li>
<li>4:Not used/user-definable</li>
<li>5:Start the system normally with appropriate display manager (with GUI)</li>
<li>6:Reboot</li>
</ul>
<h4 id="登录后自动运行程序"><a href="#登录后自动运行程序" class="headerlink" title="登录后自动运行程序"></a>登录后自动运行程序</h4><p>用户登录时，bash首先自动执行系统管理员建立的全局登录script:<code>/etc/profile</code>。然后bash在用户起始目录下按顺序查找三个特殊文件中的一个：<code>/.bash_profile</code>、<code>/.bash_login</code>、<code>/.profile</code>，但只执行最先找到的 一个。因此，只需根据实际需要在上述文件中加入命令就可以实现用户登录时自动运行某些程序（类似于DOS下的 Autoexec.bat）。简单的方法,在/etc/inittab 结尾加上你要启动的程序。/etc/profile： 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行。<code>/etc/bashrc</code>: 为每一个运行bash shell的用户执行此文件。<code>~/.bashrc</code>: 当登录时以及每次打开新的shell时,该文件被执行。设置登陆时启动OpenVPN,在<code>/etc/profile</code>文件中添加执行脚本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/openvpn/startopenvpn.sh &amp; &gt;&gt; /tmp/openvpn.log</div></pre></td></tr></table></figure>
<p>其中startopenvpn.sh脚本中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/openvpn</div><div class="line">nohup openvpn /etc/openvpn/client.conf</div></pre></td></tr></table></figure>
<p>需要注意的是，执行时需要切换到<code>/etc/openvpn</code>目录，默认的配置文件例如key等默认在当前目录下寻找。OpenVPN启动时需要root权限。需要成功启动OpenVPN客户端首次登陆时需要以root用户登陆。</p>
<p>Ubuntu开机之后会执行<code>/etc/rc.local</code>文件中的脚本，所以可以直接在<code>/etc/rc.local</code>中添加启动脚本。当然要添加到语句<code>exit 0</code>前面才行。</p>
<h4 id="联网后自动运行程序"><a href="#联网后自动运行程序" class="headerlink" title="联网后自动运行程序"></a>联网后自动运行程序</h4><p>网络连接建立后运行的脚本可以实现诸多实用功能，如动态域名绑定、连接VPN、上网认证等。实现这一目标的大体思路有两种：在基于NetworkManager的系统中，可配置其dispatcher脚本；Fedora对这一功能支持的不是很好，只能在网络连接建立后运行一个脚本，即/sbin/ifup-local。这个文件默认不存在，需要手动创建。下面的例子用vi编辑/创建这个文件，并添加执行权限。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vi /sbin/ifup-local</div><div class="line">chmod 755 /sbin/ifup-local</div></pre></td></tr></table></figure>
<p><a href="https://en.wikipedia.org/wiki/Runlevel" target="_blank" rel="external">Runlevel</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 使用Stream API]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/14/java-8-using-stream-api/</url>
      <content type="html"><![CDATA[<h4 id="遍历集合中的列"><a href="#遍历集合中的列" class="headerlink" title="遍历集合中的列"></a>遍历集合中的列</h4><p>Stream是Java8中，操作集合的一个重要特性。这里要遍历集合中对象的某一个属性，并取出来用“，”拼接成字符串，传统的写法是写循环遍历每个对象，从中取出某一个属性，进行拼接操作。在Java 8里可以使用Stream API只需要一行代码，非常简洁。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;WorkDayDataInfo&gt; workDayDataInfo = workDayInfos.get(currentWorkDay).getDatas();</div><div class="line">String assignmentIdStream = assignments.stream()</div><div class="line">                        .map(p -&gt; p.getId())</div><div class="line">                        .collect(Collectors.joining(<span class="string">","</span>));</div></pre></td></tr></table></figure>
<p>对于基本数据类型的拼接：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; numbers = Arrays.asList( <span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span> );</div><div class="line"><span class="keyword">return</span> numbers.stream().map( n -&gt; n.toString() ).collect( Collectors.joining( <span class="string">","</span> ) );</div></pre></td></tr></table></figure>
<h4 id="去List除重复数据"><a href="#去List除重复数据" class="headerlink" title="去List除重复数据"></a>去List除重复数据</h4><p>去除List中对象的重复数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;ClientVehicleInfo&gt; distinctVehicles = clientVehicleInfos.stream().distinct().collect(Collectors.toList());</div></pre></td></tr></table></figure>
<p>对于Stream中包含的元素进行去重操作（去重逻辑依赖元素的equals方法），新生成的Stream中没有重复的元素。（根据.equals行为排除所有重复的元素。）</p>
<h4 id="去除String数组重复数据"><a href="#去除String数组重复数据" class="headerlink" title="去除String数组重复数据"></a>去除String数组重复数据</h4><p>其中deviceNumbers为String类型的数组。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deviceNumbers= <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(deviceNumbers)).toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</div></pre></td></tr></table></figure>
<h4 id="过滤器-Filter"><a href="#过滤器-Filter" class="headerlink" title="过滤器(Filter)"></a>过滤器(Filter)</h4><p>从List中过滤出指定条件的数据：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;CreditDocument&gt; xzxkList = creditDocuments.stream().filter(a -&gt; a.getInfoType() == <span class="number">1</span>).collect(Collectors.toList());</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux中的chkconfig、service和systemctl]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/13/linux-chkconfig-service-systemctl/</url>
      <content type="html"><![CDATA[<p>最近在Fedora里使用开机自动启动命令时，提示如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Note: This output shows SysV services only and does not include native</div><div class="line">      systemd services. SysV configuration data might be overridden by native</div><div class="line">      systemd configuration.</div><div class="line"></div><div class="line">      If you want to list systemd services use &apos;systemctl list-unit-files&apos;.</div><div class="line">      To see services enabled on particular target use</div><div class="line">      &apos;systemctl list-dependencies [target]&apos;.</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>原来是systemctl命令要逐渐取代原来的chkconfig和services命令。在目前很多linux的新发行版本里，系统对于daemon的启动管理方法不再采用SystemV形式，而是使用了sytemd的架构来管理daemon的启动。UpStart\SystemV\systemd三种形式。Linux 操作系统的启动首先从 BIOS 开始，接下来进入 boot loader，由 bootloader 载入内核，进行内核初始化。内核初始化的最后一步就是启动 pid 为 1 的 init 进程。这个进程是系统的第一个进程。它负责产生其他所有用户进程。大多数 Linux 发行版的 init 系统是和 System V 相兼容的，被称为 sysvinit。这是人们最熟悉的 init 系统。一些发行版如 Slackware 采用的是 BSD 风格 Init 系统，这种风格使用较少。其他的发行版如 Gentoo 是自己定制的。Ubuntu 和 RHEL 采用 upstart 替代了传统的 sysvinit。而 Fedora 从版本 15 开始使用了一个被称为 systemd 的新 init 系统。如果需要服务随计算机启动时启用，在Fedora 24中，以SSH服务为例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl enable sshd.service</div></pre></td></tr></table></figure>
<p>这样SSH守护进程就会在开机时自动启动了。<br>输出的执行结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/sshd.service to /usr/lib/systemd/system/sshd.service.</div></pre></td></tr></table></figure>
<p>查看SSH守护进程当前的状态。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start sshd.service</div></pre></td></tr></table></figure>
<p>在 Linux 主要应用于服务器和 PC 机的时代，SysVinit 运行非常良好，概念简单清晰。它主要依赖于 Shell 脚本，这就决定了它的最大弱点：启动太慢。在很少重新启动的 Server 上，这个缺点并不重要。而当 Linux 被应用到移动终端设备的时候，启动慢就成了一个大问题。为了更快地启动，人们开始改进 sysvinit，先后出现了 upstart 和 systemd 这两个主要的新一代 init 系统。Upstart 已经开发了 8 年多，在不少系统中已经替换 sysvinit。Systemd 出现较晚，但发展更快，大有取代 upstart 的趋势。而SystemV对应的是service、UpStart对应的是chkconfig、systemd对应的是systemctl命令。</p>
<p>参考来源：</p>
<p><a href="https://www.ibm.com/developerworks/cn/linux/1407_liuming_init1/" target="_blank" rel="external">浅析 Linux 初始化 init 系统，第 1 部分: sysvinit</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fedora 24添加桌面图标]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/12/fedora-desktop-icon/</url>
      <content type="html"><![CDATA[<p>安装好了Google Chrome和Intellij Idea之后没有桌面图标，也没有快速启动图标，每次启动都要打开终端，甚是麻烦。故将图标放在桌面能够节省不少时间，同时也更加方便。首先安装gnome-tweak-tool:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnf install gnome-tweak-tool -y</div></pre></td></tr></table></figure>
<p>运行<code>gnome-tweak-tool</code>命令，在弹出的窗口的Desktop选项卡中打开Icons on Desktop.</p>
<a id="more"></a>
<h4 id="桌面图标"><a href="#桌面图标" class="headerlink" title="桌面图标"></a>桌面图标</h4><p>切换到Desktop目录。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /home/dolphin/Desktop</div></pre></td></tr></table></figure>
<p>dolphin是当前用户名。新建Google-Chrome.desktop文件。内容为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env xdg-open</span></div><div class="line"></div><div class="line">[Desktop Entry]</div><div class="line">Encoding=UTF-8</div><div class="line">Name=Google Chrome</div><div class="line">GenericName=Web Browser</div><div class="line">Exec=<span class="string">'/opt/google/chrome/google-chrome'</span></div><div class="line">Icon=/opt/google/chrome/product_logo_256.png</div><div class="line">Terminal=<span class="literal">false</span></div><div class="line">Type=Application</div><div class="line">Categories=Network;</div><div class="line">Name[en_US]=Google Chrome.desktop</div></pre></td></tr></table></figure>
<p>如下是Intellij Idea的桌面图标配置文件:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env xdg-open</span></div><div class="line"></div><div class="line">[Desktop Entry]</div><div class="line">Encoding=UTF-8</div><div class="line">Name=Intellij Idea</div><div class="line">GenericName=IDE</div><div class="line">Exec=<span class="string">'/opt/idea/idea-IC-162.2032.8/bin/idea.sh'</span></div><div class="line">Icon=/opt/idea/idea-IC-162.2032.8/bin/idea.png</div><div class="line">Terminal=<span class="literal">false</span></div><div class="line">Type=Application</div><div class="line">Categories=IDE;</div><div class="line">Name[en_US]=Intellij Idea</div></pre></td></tr></table></figure>
<p>保存之后双击打开，一定要双击打开哟，否则启动图标不会出现，会出现一个确认界面。提示需要授权启动项，选择授权即可。配置好图标后的效果如图所示。</p>
<img src="/2016/10/12/fedora-desktop-icon/google-chrome-fedora-desktop-launcher.png" alt="Google-Chrome手动添加桌面图标" title="Google-Chrome手动添加桌面图标">
<h4 id="快速启动图标"><a href="#快速启动图标" class="headerlink" title="快速启动图标"></a>快速启动图标</h4><p>要让图标在快速启动栏里出现，直接将刚才新建Google-Chrome.desktop文件复制到<code>/usr/share/application</code>目录下即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp Google-Chrome.desktop /usr/share/application</div></pre></td></tr></table></figure>
<p>配置好快速启动图标后的效果如下如所示。</p>
<img src="/2016/10/12/fedora-desktop-icon/google-chrome-startup-icon.png" alt="Google-Chrome快速启动图标" title="Google-Chrome快速启动图标">
<p><code>/usr/share/application</code>目录是Gnome中所有用户启动的快捷方式存放的目录。局部的快捷方式存放的目录在：<code>~/.local/share/applications</code>。desktop文件的结构如下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[Desktop Entry]</div><div class="line">Encoding=UTF-8 //字符编码</div><div class="line">Name=vim　　 //显示的名字</div><div class="line">MimeType=text/plain; //类型</div><div class="line">Exec=vim %f //运行的程序 %f表示一个参数</div><div class="line">Type=Application　 //类型</div><div class="line">Terminal=true //是否使用终端</div><div class="line">NoDisplay=true //是否显示在gnome菜单里</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Intellij Idea热部署]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/10/intellij-hot-deply/</url>
      <content type="html"><![CDATA[<p>下午遇到一个问题，在开发时，HTML修改后浏览器刷新始终不显示修改后的效果。经过朋友的指导，原来是要选择Exploded包进行部署。如图所示。</p>
<a id="more"></a>
<img src="/2016/10/10/intellij-hot-deply/war-exploded-deploy.jpg" alt="选择Exploded部署包" title="选择Exploded部署包">
<p>在Intellij的官方文档上如此描述：To have the application deployed as a directory, choose Web Application: Exploded.To have the application deployed in the packed form, choose Web Application: Archive.大意是如果想以目录形式部署，选择Exploded(adj. 爆炸了的；分解的；被破除的)模式,如果想以打包模式部署，则选择Archive模式。Exploded模式带来的好处是支持热部署，这样不用在开发过程中每次修改了内容后(HTML\JSP)都重新部署，重启一次大概要1-3分钟，有此可见大大提高了开发效率。缺点是多次部署后，Tomcat可能内存溢出，此时就必须重启Tomcat。</p>
<p>参考资料：</p>
<p><a href="http://stackoverflow.com/questions/1289358/what-does-exploded-development-mean-in-java" target="_blank" rel="external">What does Exploded Development mean? (In Java)</a></p>
<p><a href="https://www.jetbrains.com/help/idea/2016.2/configuring-web-application-deployment.html" target="_blank" rel="external">Configuring Web Application Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fedora 24 OpenVPN客户端配置]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/09/fedora-openvpn-client/</url>
      <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>输入如下命令安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Fedora 24安装命令</span></div><div class="line">dnf install openvpn -y</div><div class="line"><span class="comment">#CentOS 6.8安装命令(可输入lsb_release -a命令查看版本)</span></div><div class="line">yum intall openvpn -y</div></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="生成客户端文件"><a href="#生成客户端文件" class="headerlink" title="生成客户端文件"></a>生成客户端文件</h5><p>到OpenVPN服务端<code>easy-rsa</code>目录下，输入如下命令生成客户端key：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">build-key client</div></pre></td></tr></table></figure>
<p>这里介绍在Fedora中如何设置OpenVPN客户端。将生成的客户端文件拷贝到Fedora的<code>/etc/openvpn</code>配置目录中即可，生成的客户端文件有：</p>
<ul>
<li>ca.crt</li>
<li>client.crt</li>
<li>client.key</li>
<li>client.ovpn</li>
</ul>
<p>在Fedora中将client.ovpn改为client.conf即可。启动OpenVPN客户端(root权限):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openvpn client.conf</div></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h5><p>输入如下命令开启开启自动启动：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#检查OpenVPN是否在本运行级别下设置为开机启动</span></div><div class="line">chkconfig --list openvpn</div><div class="line"><span class="comment">#如果没设置启动就设置下</span></div><div class="line">chkconfig --level 2345 openvpn on</div><div class="line">chkconfig openvpn on</div><div class="line"><span class="comment">#重新启动</span></div><div class="line">service sshd restart</div><div class="line"><span class="comment">#看是否启动了1194端口.确认下</span></div><div class="line">netstat -antp |grep openvpn</div><div class="line"><span class="comment">#看看是否放行了1194口</span></div><div class="line">iptables -nL</div><div class="line"><span class="comment">#setup----&gt;防火墙设置   如果没放行就设置放行.</span></div></pre></td></tr></table></figure>
<p>chkconfig provides a simple command-line tool for maintaining the <code>/etc/rc[0-6].d</code> directory  hierarchy by relieving system administrators of the task of directly manipulating the numerous symbolic links in those directories.</p>
<p>delete from positional where vtime in ( select vtime from positional group by vtime having count(<em>)&gt;1) and id not in (select top 1 id from positional group by vtime having count(</em>)&gt;1 );</p>
<h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p>在Fedora 24中运行<code>openvpn client.conf</code>后提示如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Sat Oct  8 23:32:19 2016 Socket Buffers: R=[87380-&gt;87380] S=[16384-&gt;16384]</div><div class="line">Sat Oct  8 23:32:19 2016 Attempting to establish TCP connection with [AF_INET]114.24.5.55:1194 [nonblock]</div><div class="line">Sat Oct  8 23:32:20 2016 TCP connection established with [AF_INET]114.24.5.55:1194</div><div class="line">Sat Oct  8 23:32:20 2016 TCPv4_CLIENT link local: [undef]</div><div class="line">Sat Oct  8 23:32:20 2016 TCPv4_CLIENT link remote: [AF_INET]114.24.5.55:1194</div><div class="line">Sat Oct  8 23:32:20 2016 TLS: Initial packet from [AF_INET]114.24.5.55:1194, sid=efc00936 581068f2</div><div class="line">Sat Oct  8 23:32:20 2016 VERIFY OK: depth=1, C=US, ST=CA, L=SanFrancisco, O=OpenVPN, OU=changeme, CN=OpenVPN_CA, name=changeme, emailAddress=mail@host.domain</div><div class="line">Sat Oct  8 23:32:20 2016 VERIFY ERROR: depth=0, error=certificate signature failure: C=US, ST=CA, L=SanFrancisco, O=OpenVPN, OU=changeme, CN=server, name=changeme, emailAddress=mail@host.domain</div><div class="line">Sat Oct  8 23:32:20 2016 OpenSSL: error:14090086:SSL routines:ssl3_get_server_certificate:certificate verify failed</div><div class="line">Sat Oct  8 23:32:20 2016 TLS_ERROR: BIO read tls_read_plaintext error</div><div class="line">Sat Oct  8 23:32:20 2016 TLS Error: TLS object -&gt; incoming plaintext read error</div><div class="line">Sat Oct  8 23:32:20 2016 TLS Error: TLS handshake failed</div><div class="line">Sat Oct  8 23:32:20 2016 Fatal TLS error (check_tls_errors_co), restarting</div><div class="line">Sat Oct  8 23:32:20 2016 SIGUSR1[soft,tls-error] received, process restarting</div><div class="line">Sat Oct  8 23:32:20 2016 Restart pause, 5 second(s)</div></pre></td></tr></table></figure>
<p>发生此错误的原因是OpenSSL包中，当前使用的OpenSSL(版本：OpenSSL 1.0.0e 6 Sep 2011)默认的摘要算法为MD5。而MD5算法在目前是非常不安全的(Hash碰撞攻击等)，较大的彩虹表可以轻易的找出Hash对应值。所以在较新的操作系统(这里是Fedora 24)已经默认不使用MD5算法，所以会有此错误(Windows 7支持MD5)。解决此问题的思路不外乎2种，一种是使用sha256、sha512等摘要算法(MD)，另一种就是启用操作系统对MD5的支持,推荐前者。</p>
<h5 id="修改加密方式-推荐"><a href="#修改加密方式-推荐" class="headerlink" title="修改加密方式(推荐)"></a>修改加密方式(推荐)</h5><p>修改加密方式在OpenVPN目录的文件中(我的是在C:\Program Files (x86)\OpenVPN\easy-rsa\openssl-1.0.0.cnf)。将</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">default_md    = md5            # use public key default MD</div></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">default_md    = sha256            # use public key default MD</div></pre></td></tr></table></figure>
<h5 id="启用操作系统MD5支持"><a href="#启用操作系统MD5支持" class="headerlink" title="启用操作系统MD5支持"></a>启用操作系统MD5支持</h5><p>Temporally enable it.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> NSS_HASH_ALG_SUPPORT=+MD5</div><div class="line"><span class="built_in">export</span> OPENSSL_ENABLE_MD5_VERIFY=1</div></pre></td></tr></table></figure>
<p>Enable MD5 support through NetworkManager</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo vim /usr/lib/systemd/system/NetworkManager.service</div></pre></td></tr></table></figure>
<p>Append this.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[Service]</div><div class="line">Environment=&quot;OPENSSL_ENABLE_MD5_VERIFY=1 NSS_HASH_ALG_SUPPORT=+MD5&quot;</div></pre></td></tr></table></figure>
<p>And restart daemon</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl daemon-reload</div><div class="line">$ sudo systemctl restart NetworkManager.service</div></pre></td></tr></table></figure>
<p>提示如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Sun Oct 09 11:33:22 2016 OpenVPN 2.2.2 Win32-MSVC++ [SSL] [LZO2] [PKCS11] built on Dec 15 2011</div><div class="line">Sun Oct 09 11:33:22 2016 NOTE: OpenVPN 2.1 requires &apos;--script-security 2&apos; or higher to call user-defined scripts or executables</div><div class="line">Sun Oct 09 11:33:22 2016 LZO compression initialized</div><div class="line">Sun Oct 09 11:33:22 2016 Control Channel MTU parms [ L:1544 D:140 EF:40 EB:0 ET:0 EL:0 ]</div><div class="line">Sun Oct 09 11:33:22 2016 Socket Buffers: R=[8192-&gt;8192] S=[8192-&gt;8192]</div><div class="line">Sun Oct 09 11:33:22 2016 Data Channel MTU parms [ L:1544 D:1450 EF:44 EB:135 ET:0 EL:0 AF:3/1 ]</div><div class="line">Sun Oct 09 11:33:22 2016 Local Options hash (VER=V4): &apos;69109d17&apos;</div><div class="line">Sun Oct 09 11:33:22 2016 Expected Remote Options hash (VER=V4): &apos;c0103fa8&apos;</div><div class="line">Sun Oct 09 11:33:22 2016 Attempting to establish TCP connection with 113.204.5.58:1194</div><div class="line">Sun Oct 09 11:33:23 2016 TCP: connect to 113.204.5.58:1194 failed, will try again in 5 seconds: Connection refused (WSAECONNREFUSED)</div><div class="line">Sun Oct 09 11:33:29 2016 TCP: connect to 113.204.5.58:1194 failed, will try again in 5 seconds: Connection refused (WSAECONNREFUSED)</div><div class="line">Sun Oct 09 11:33:35 2016 TCP: connect to 113.204.5.58:1194 failed, will try again in 5 seconds: Connection refused (WSAECONNREFUSED)</div><div class="line">Sun Oct 09 11:33:41 2016 TCP: connect to 113.204.5.58:1194 failed, will try again in 5 seconds: Connection refused (WSAECONNREFUSED)</div></pre></td></tr></table></figure>
<p>首先检查服务端OpenVPN是否已经启动；其次检查服务端的配置文件无误，这里是将位数由1024改为2048后在服务端的配置文件没有修改为2048pem。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Diffie hellman parameters.</div><div class="line"># Generate your own with:</div><div class="line">#   openssl dhparam -out dh1024.pem 1024</div><div class="line"># Substitute 2048 for 1024 if you are using</div><div class="line"># 2048 bit keys.</div><div class="line">dh dh2048.pem #将此处由dh1024.pem修改为dh2048.pem即可</div></pre></td></tr></table></figure>
<p>出现如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Tue Oct 11 12:44:00 2016 Socket Buffers: R=[124928-&gt;124928] S=[124928-&gt;124928]</div><div class="line">Tue Oct 11 12:44:00 2016 UDPv4 link local: [undef]</div><div class="line">Tue Oct 11 12:44:00 2016 UDPv4 link remote: [AF_INET]192.168.24.243:1194</div><div class="line">Tue Oct 11 12:45:00 2016 TLS Error: TLS key negotiation failed to occur within 60 seconds (check your network connectivity)</div><div class="line">Tue Oct 11 12:45:00 2016 TLS Error: TLS handshake failed</div><div class="line">Tue Oct 11 12:45:00 2016 SIGUSR1[soft,tls-error] received, process restarting</div><div class="line">Tue Oct 11 12:45:00 2016 Restart pause, 2 second(s)</div></pre></td></tr></table></figure>
<p>检查防火墙是否过滤了1194端口的数据。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp --dport 1194 -j ACCEPT</div><div class="line"><span class="comment">#保存防火墙规则</span></div><div class="line">/etc/init.d/iptables save</div></pre></td></tr></table></figure>
<p>检查配置文件是否通过TCP协议而不是UDP。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Intellij IDEA推荐插件]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/08/intelli-idea-plugin/</url>
      <content type="html"><![CDATA[<h4 id="presentation-assistant"><a href="#presentation-assistant" class="headerlink" title="presentation assistant"></a>presentation assistant</h4><p>这款插件可以实时的在Intellij屏幕底部展示当前按下的快捷键，包括Windows的快捷键和Mac的快捷键，可以帮助您记忆快捷键，清楚当前的行为(Action)。效果如下图所示。</p>
<a id="more"></a>
<img src="/2016/10/08/intelli-idea-plugin/presentation-assistant-tips.jpg" alt="Presentation Assistant提示" title="Presentation Assistant提示">
<h4 id="Grep-Console"><a href="#Grep-Console" class="headerlink" title="Grep Console"></a>Grep Console</h4><p>允许你定义一系列将通过控制台输出或文件测试的正则表达式。匹配代码行的每个表达式将会影响整行的样式，或播放声音。例如，错误消息可以被设置在一个红色的背景中显示。例如错误(ERROR)输出为红色，报警(WARNING)输出为黄色，信息(INFO)输出为绿色。</p>
<h4 id="JRebel-for-IntelliJ-Commercial"><a href="#JRebel-for-IntelliJ-Commercial" class="headerlink" title="JRebel for IntelliJ(Commercial)"></a>JRebel for IntelliJ(Commercial)</h4><p>JRebel的热部署可以让你修改代码以后不用重新启动项目即可加载效果，即所谓的热部署，可以大大提高开发效率。在IntelliJ Idea-&gt;Setting-&gt;Plugin-&gt;Browse Repositories中，输入JRebel for IntelliJ关键字即可。</p>
<h4 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h4><p>自动生成实体的Getter、Setter，可以大大减少实体的编码量。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[rm命令安全]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/08/rm-command/</url>
      <content type="html"><![CDATA[<p>rm命令是一个非常危险的命令，由于这个命令引发的事故不少，最近也是深深的体会到了。在此记录下如何将rm命令变为安全的命令。对于需要在Linux下开发的朋友来说，这一步(屏蔽rm危险操作)觉得是必须的，非常、非常、非常重要。怎么强调都不为过。一定要花时间做rm命令的安全工作。</p>
<a id="more"></a>
<h4 id="建立回收站机制"><a href="#建立回收站机制" class="headerlink" title="建立回收站机制"></a>建立回收站机制</h4><h5 id="回收站机制-建立新命令"><a href="#回收站机制-建立新命令" class="headerlink" title="回收站机制-建立新命令"></a>回收站机制-建立新命令</h5><p>在/usr/bin目录下建立文件erase：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/bin</div><div class="line">touch erase</div></pre></td></tr></table></figure>
<p>拷贝如下Shell脚本到文件中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line">RecycleB<span class="keyword">in</span>=~/.temp</div><div class="line"></div><div class="line">((<span class="variable">$#</span>==0)) &amp;&amp; &#123; <span class="built_in">echo</span> <span class="string">"No paraments!"</span>;<span class="built_in">exit</span> 1; &#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ ! <span class="_">-d</span> <span class="variable">$RecycleBin</span> ]; <span class="keyword">then</span></div><div class="line">    mkdir <span class="variable">$RecycleBin</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $*</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="keyword">if</span> <span class="built_in">test</span> <span class="_">-e</span> <span class="variable">$i</span></div><div class="line">        <span class="keyword">then</span></div><div class="line">            <span class="built_in">cd</span> $(dirname <span class="variable">$i</span>)</div><div class="line">            mv <span class="_">-f</span> $(basename <span class="variable">$i</span>) <span class="variable">$RecycleBin</span>/$(find $(<span class="built_in">pwd</span>) -maxdepth 1 -name $(basename <span class="variable">$i</span>) | tr <span class="string">"/"</span> <span class="string">"="</span>)</div><div class="line">            <span class="built_in">cd</span> -</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span>:No such file or directory!"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>添加执行权限：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 777 erase</div></pre></td></tr></table></figure>
<p>此脚本会在用户目录下新建一个隐藏的temp文件夹，将删除的文件移动到此文件夹下。命名为：<code>=用户名=删除的文件名=</code>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ambari Metrics重装]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/07/ambari-metrics-reinstall/</url>
      <content type="html"><![CDATA[<h4 id="移除服务"><a href="#移除服务" class="headerlink" title="移除服务"></a>移除服务</h4><p>采用Ambari REST API移除相关服务。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#停止服务</span></div><div class="line">curl -i -H <span class="string">"X-Requested-By: ambari"</span> -u admin:admin -X PUT <span class="_">-d</span> <span class="string">'&#123;"RequestInfo":&#123;"context":"Stop Service"&#125;,"Body":&#123;"ServiceInfo":&#123;"state":"INSTALLED"&#125;&#125;&#125;'</span> http://192.168.24.226:8080/api/v1/clusters/zwlbs/services/AMBARI_METRICS</div><div class="line"><span class="comment">#查看服务状态</span></div><div class="line">curl -u admin:admin -H <span class="string">"X-Requested-by:ambari"</span> -i -k -X GET http://192.168.24.226:8080/api/v1/clusters/zwlbs/services/AMBARI_METRICS/</div><div class="line"><span class="comment">#移除服务</span></div><div class="line">curl -u admin:admin -H <span class="string">"X-Requested-By: ambari"</span> -X DELETE http://192.168.24.226:8080/api/v1/clusters/zwlbs/services/AMBARI_METRICS</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>cURL是一个命令行工具，通过不同的协议传输数据，1997年首次发布。cURL is a computer software project providing a library and command-line tool for transferring data using various protocols. The cURL project produces two products, libcurl and cURL. It was first released in 1997. The name originally stood for “see URL”.curl支持的协议有FTP, FTPS, HTTP, HTTPS, SCP, SFTP, TFTP, TELNET, DICT, LDAP, LDAPS, FILE, POP3, IMAP, SMTP and RTSP at the time of this writing. Wget支持HTTP, HTTPS and FTP三种协议.</p>
<h4 id="移除包"><a href="#移除包" class="headerlink" title="移除包"></a>移除包</h4><p>移除各个节点啊上安装的包。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#主节点</span></div><div class="line">yum remove ambari-metrics-hadoop-sink-2.2.2.0-460.x86_64 -y</div><div class="line">yum remove ambari-metrics-monitor-2.2.2.0-460.x86_64 -y</div><div class="line">yum remove ambari-metrics-grafana-2.2.2.0-460.x86_64 -y</div><div class="line">yum remove ambari-metrics-collector-2.2.2.0-460.x86_64 -y</div><div class="line"><span class="comment">#从节点</span></div><div class="line">yum remove ambari-metrics-monitor-2.2.2.0-460.x86_64 -y</div><div class="line">yum remove ambari-metrics-hadoop-sink-2.2.2.0-460.x86_64 -y</div></pre></td></tr></table></figure>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>删除与Ambari Metrics相关的文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">rm -rf</div><div class="line"><span class="comment">#Ambari Metrics</span></div><div class="line">/usr/lib/ambari-metrics-grafana</div><div class="line">/usr/lib/ambari-metrics-hadoop-sink</div><div class="line">/usr/lib/ambari-metrics-kafka-sink</div><div class="line">/var/lib/ambari-metrics-collector</div><div class="line">/var/lib/ambari-metrics-grafana</div><div class="line">/var/run/ambari-metrics-collector</div><div class="line">/var/run/ambari-metrics-monitor</div><div class="line">/var/run/ambari-metrics-grafana</div><div class="line">/var/<span class="built_in">log</span>/ambari-metrics-collector</div><div class="line">/var/<span class="built_in">log</span>/ambari-metrics-monitor</div><div class="line">/var/<span class="built_in">log</span>/ambari-metrics-grafana</div><div class="line">/etc/ambari-metrics-collector</div><div class="line">/etc/ambari-metrics-monitor</div><div class="line">/etc/ambari-metrics-grafana</div></pre></td></tr></table></figure>
<p>可将以上代码写入Shell脚本，执行即可。</p>
<h4 id="添加服务"><a href="#添加服务" class="headerlink" title="添加服务"></a>添加服务</h4><p>以上步骤完成后，重新到Ambari UI界面添加Ambari Metrics服务即可。如果哪个服务实在无法修复，最无奈的方法，重装此服务。</p>
<p>参考文章：</p>
<p><a href="http://henning.kropponline.de/2015/06/07/services-and-state-with-ambari-rest-api/" target="_blank" rel="external">Services and State with Ambari REST API</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[卸载HDP和Ambari]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/07/ambari-uninstall/</url>
      <content type="html"><![CDATA[<h4 id="移除Ambari服务"><a href="#移除Ambari服务" class="headerlink" title="移除Ambari服务"></a>移除Ambari服务</h4><p>依次运行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -qa | grep ambari</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ambari-server stop</div><div class="line">ambari-server reset</div><div class="line">ambari-agent stop</div><div class="line">rpm -qa | grep ambari</div><div class="line"><span class="comment">#移除Ambari Server安装包</span></div><div class="line">yum erase ambari-server -y</div><div class="line">rm -rf /var/lib/ambari-server</div><div class="line">rm -rf /var/run/ambari-server</div><div class="line">rm -rf /usr/lib/amrbari-server</div><div class="line">rm -rf /etc/ambari-server</div><div class="line">rm -rf /var/<span class="built_in">log</span>/ambari-server</div><div class="line">rm -rf /usr/lib/python2.6/site-packages/ambari*</div></pre></td></tr></table></figure>
<h4 id="Ambari-Agent-Cleanup-Script"><a href="#Ambari-Agent-Cleanup-Script" class="headerlink" title="Ambari Agent Cleanup Script"></a>Ambari Agent Cleanup Script</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python /usr/lib/python2.6/site-packages/ambari_agent/HostCleanup.py <span class="_">-s</span> -k users</div></pre></td></tr></table></figure>
<h4 id="Remove-Packages"><a href="#Remove-Packages" class="headerlink" title="Remove Packages"></a>Remove Packages</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum erase -y `yum list | grep @HDP-2 | awk <span class="string">'&#123; print $1 &#125;'</span>`</div><div class="line">yum erase -y `yum list | grep 2_3_ | awk <span class="string">'&#123; print $1&#125;'</span>`</div></pre></td></tr></table></figure>
<h4 id="移除文件夹-Clean-Folders"><a href="#移除文件夹-Clean-Folders" class="headerlink" title="移除文件夹(Clean Folders)"></a>移除文件夹(Clean Folders)</h4><p>移除文件夹(Clean Folders)脚本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">rm -rf</div><div class="line"><span class="comment"># Log dirs</span></div><div class="line">/var/<span class="built_in">log</span>/ambari-metrics-monitor</div><div class="line">/var/<span class="built_in">log</span>/hadoop</div><div class="line">/var/<span class="built_in">log</span>/hbase</div><div class="line">/var/<span class="built_in">log</span>/hadoop-yarn</div><div class="line">/var/<span class="built_in">log</span>/hadoop-mapreduce</div><div class="line">/var/<span class="built_in">log</span>/hive</div><div class="line">/var/<span class="built_in">log</span>/oozie</div><div class="line">/var/<span class="built_in">log</span>/zookeeper</div><div class="line">/var/<span class="built_in">log</span>/flume</div><div class="line">/var/<span class="built_in">log</span>/hive-hcatalog</div><div class="line">/var/<span class="built_in">log</span>/falcon</div><div class="line">/var/<span class="built_in">log</span>/knox</div><div class="line">/var/lib/hive</div><div class="line">/var/lib/oozie</div><div class="line"></div><div class="line"><span class="comment"># DataNode HDFS dirs</span></div><div class="line">/grid*/hadoop</div><div class="line"></div><div class="line"><span class="comment"># Hadoop dirs</span></div><div class="line">/usr/hdp</div><div class="line">/usr/bin/hadoop</div><div class="line">/tmp/hadoop</div><div class="line">/var/hadoop</div><div class="line">/hadoop/*</div><div class="line">/<span class="built_in">local</span>/opt/hadoop</div><div class="line"></div><div class="line"><span class="comment"># Config dirs</span></div><div class="line">/etc/hadoop</div><div class="line">/etc/hbase</div><div class="line">/etc/oozie</div><div class="line">/etc/phoenix</div><div class="line">/etc/hive</div><div class="line">/etc/zookeeper</div><div class="line">/etc/flume</div><div class="line">/etc/hive-hcatalog</div><div class="line">/etc/tez</div><div class="line">/etc/falcon</div><div class="line">/etc/knox</div><div class="line">/etc/hive-webhcat</div><div class="line">/etc/mahout</div><div class="line">/etc/pig</div><div class="line">/etc/hadoop-httpfs</div><div class="line"></div><div class="line"><span class="comment"># PIDs</span></div><div class="line">/var/run/hadoop</div><div class="line">/var/run/hbase</div><div class="line">/var/run/hadoop-yarn</div><div class="line">/var/run/hadoop-mapreduce</div><div class="line">/var/run/hive</div><div class="line">/var/run/oozie</div><div class="line">/var/run/zookeeper</div><div class="line">/var/run/flume</div><div class="line">/var/run/hive-hcatalog</div><div class="line">/var/run/falcon</div><div class="line">/var/run/webhcat</div><div class="line">/var/run/knox</div><div class="line"></div><div class="line"><span class="comment"># ZK db files</span></div><div class="line">/<span class="built_in">local</span>/home/zookeeper/*</div><div class="line"></div><div class="line"><span class="comment"># libs</span></div><div class="line">/usr/lib/flume</div><div class="line">/usr/lib/storm</div><div class="line">/var/lib/hadoop-hdfs</div><div class="line">/var/lib/hadoop-yarn</div><div class="line">/var/lib/hadoop-mapreduce</div><div class="line">/var/lib/flume</div><div class="line">/var/lib/knox</div><div class="line"></div><div class="line"><span class="comment">#Ambari Metrics</span></div><div class="line">/usr/lib/ambari-metrics-grafana</div><div class="line">/usr/lib/ambari-metrics-hadoop-sink</div><div class="line">/usr/lib/ambari-metrics-kafka-sink</div><div class="line">/var/lib/ambari-metrics-collector</div><div class="line">/var/lib/ambari-metrics-grafana</div><div class="line">/var/run/ambari-metrics-collector</div><div class="line">/var/run/ambari-metrics-monitor</div><div class="line">/var/run/ambari-metrics-grafana</div><div class="line">/var/<span class="built_in">log</span>/ambari-metrics-collector</div><div class="line">/var/<span class="built_in">log</span>/ambari-metrics-monitor</div><div class="line">/var/<span class="built_in">log</span>/ambari-metrics-grafana</div><div class="line">/etc/ambari-metrics-collector</div><div class="line">/etc/ambari-metrics-monitor</div><div class="line">/etc/ambari-metrics-grafana</div><div class="line"></div><div class="line"><span class="comment"># other</span></div><div class="line">/var/tmp/oozie</div></pre></td></tr></table></figure>
<h4 id="Clean-Repository"><a href="#Clean-Repository" class="headerlink" title="Clean Repository"></a>Clean Repository</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum clean all</div></pre></td></tr></table></figure>
<p>在重装之前一定要移除干净。</p>
<p>各个服务的目录位置如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/etc/&lt;service_name&gt;</div><div class="line">/usr/lib/&lt;service_name&gt;</div><div class="line">/var/lib/&lt;service_name&gt;</div><div class="line">/var/log/&lt;service_name&gt;</div><div class="line">/var/run/&lt;service_name&gt;</div><div class="line">/var/tmp/&lt;service_name&gt;</div><div class="line">/tmp/&lt;service_name&gt;</div></pre></td></tr></table></figure>
<p>参考资料来自：</p>
<p><a href="http://henning.kropponline.de/2016/04/24/uninstalling-and-cleaning-a-hdp-node/" target="_blank" rel="external">Uninstalling and Cleaning a HDP Node</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[dnf与yum]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/05/dnf-vs-yum/</url>
      <content type="html"><![CDATA[<p>Fedora 24使用yum命令时标记为过期，推荐使用dnf安装。想了解一下Fedora为什么要从yum转移到dnf。大致有如下几个原因：</p>
<a id="more"></a>
<ul>
<li>Dependency resolution of YUM is a nightmare(包依赖解析简直是噩梦–不觉得啊)</li>
<li>YUM don’t have a documented API(没有API文档-很稀奇吗，没文档才正常吧)</li>
<li>No support for extensions other than Python.</li>
<li>Lower memory reduction and less automatic synchronization of metadata – a time taking process.</li>
</ul>
<p>DNF包管理器克服了YUM包管理器的一些瓶颈，提升了包括用户体验，内存占用，依赖分析，运行速度等多方面的内容。DNF使用 RPM, libsolv 和 hawkey库进行包管理操作。DNF从Yum分支出来，使用专注于性能的C语言库hawkey进行依赖关系解析工作，大幅度提升包管理操作效率并降低内存消耗。Yum不能“Python 3 as default”，而DNF支持Python 2和Python 3。（Python 3分支自2008年发布以来积极开发了五年，已经成熟和稳定，而目前仍在维护的Python 2分支不增加新特性，只接受bug和安全修正，它最早的版本是在2000年发布的。）</p>
<p>参考资料来自：</p>
<p><a href="http://www.tecmint.com/dnf-next-generation-package-management-utility-for-linux/" target="_blank" rel="external">DNF – The Next Generation Package Management Utility for RPM Based Distributions</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ambari与HDP离线安装]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/05/ambari-offline-install/</url>
      <content type="html"><![CDATA[<p>Ambari安装包大概有400MB，HDP所包含的所有的服务(HDFS/ZooKeeper/Kafka/Flume)大概在7GB+，采用yum安装时速度在10KB以内，简直是让人绝望的速度。所以采用离线安装，为了速度，掏出无耻的迅雷(wget下载是假的，不过可以试一试，速度不理想换迅雷)，搭建本地YUM服务。</p>
<h4 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h4><p>如果不知道应该下载哪个版本，可以到Repository的配置文件中查看当前版本。路径为：<code>/etc/yum.repo.d/</code>，查看文件ambari.repo、HDP.rep和HDP-UTILS.repo即可。</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#下载HDP-UTILS包</span></div><div class="line">wget http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.20/repos/centos7/HDP-UTILS-1.1.0.20-centos7.tar.gz</div><div class="line"></div><div class="line"><span class="comment">#下载HDP包</span></div><div class="line">wget http://public-repo-1.hortonworks.com/HDP/centos7/2.x/updates/2.4.3.0/HDP-2.4.3.0-centos7-rpm.tar.gz</div></pre></td></tr></table></figure>
<p>HDP-UTILS-1.1.0.20-centos6.tar.gz包有600多MB，HDP-2.4.3.0-centos6-rpm.tar.gz包有9GB之巨。包含很多服务，瞬间理解安装的时候超时是怎么回事了。下载完毕之后将包Copy到服务器上：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scp HDP-UTILS-1.1.0.20-centos6.tar.gzip root@192.168.24.226:/data/<span class="built_in">source</span></div><div class="line">scp ambari-2.2.2.0-centos7.tar.gz root@192.168.24.226:/data/<span class="built_in">source</span></div></pre></td></tr></table></figure>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -xvf HDP-UTILS-1.1.0.20-centos6.tar.gzip -C /data/<span class="built_in">source</span>/</div></pre></td></tr></table></figure>
<p>切换到目录(/data/source)下,使用Python搭建一个简单的服务器：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -mSimpleHTTPServer &amp;</div></pre></td></tr></table></figure>
<p>解压之后，会有HDP，HDP-UTILS-1.1.0.20的目录生成。HDP目录：包含Hadoop的生态圈的组件，比如hdfs，hive，hbase，mahout等。HDP-UTILS-1.1.0.17目录：包含HDP平台所包含的工具组件等，比如nagios，ganglia，puppet等。</p>
<h4 id="修改Repo"><a href="#修改Repo" class="headerlink" title="修改Repo"></a>修改Repo</h4><p>切换到Repository配置目录下，编辑文件ambari.repo，将源地址修改为本地地址，yum将从本地地址下载安装包进行安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#VERSION_NUMBER=2.2.2.0-460</div><div class="line"></div><div class="line">[Updates-ambari-2.2.2.0]</div><div class="line">name=ambari-2.2.2.0 - Updates</div><div class="line">baseurl=http://192.168.24.226:8000/AMBARI-2.2.2.0/centos7/2.2.2.0-460/</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=http://192.168.24.226:8000/AMBARI-2.2.2.0/centos7/2.2.2.0-460/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</div><div class="line">enabled=1</div><div class="line">priority=1</div></pre></td></tr></table></figure>
<h4 id="安装Ambari-Server"><a href="#安装Ambari-Server" class="headerlink" title="安装Ambari Server"></a>安装Ambari Server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装Ambari Server</span></div><div class="line">yum install ambari-server -y</div><div class="line"><span class="comment">#启动Ambari Server</span></div><div class="line">ambari-server start</div></pre></td></tr></table></figure>
<p>下载速度40MB/s，与6.7KB/s的速度对比，幸福感油然而生。</p>
<h4 id="配置Ambari-Server"><a href="#配置Ambari-Server" class="headerlink" title="配置Ambari Server"></a>配置Ambari Server</h4><p>输入如下命令配置Ambari Server：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ambari-server setup</div></pre></td></tr></table></figure>
<p>数据库这里使用默认的内嵌数据库PostgreSQL。</p>
<h4 id="启动Ambari"><a href="#启动Ambari" class="headerlink" title="启动Ambari"></a>启动Ambari</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#启动Ambari Server</span></div><div class="line">ambari-server start</div></pre></td></tr></table></figure>
<p>注：</p>
<p><strong>etc目录解释</strong>：Host-specific system-wide configuration files There has been controversy over the meaning of the name itself. In early versions of the UNIX Implementation Document from Bell labs, /etc is referred to as the etcetera(n. 等等；附加物；附加的人；以及其它) directory, as this directory historically held everything that did not belong elsewhere (however, the FHS restricts /etc to static configuration files and may not contain binaries). Since the publication of early documentation, the directory name has been re-designated in various ways. Recent interpretations include backronyms such as “Editable Text Configuration” or “Extended Tool Chest”.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fedora 20 安装NodeJs]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/05/fedora-20-install-nodejs/</url>
      <content type="html"><![CDATA[<p>安装环境：</p>
<ul>
<li><p>Fedora 20 i386</p>
</li>
<li><p>nodejs 6.7.0</p>
</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>使用Hexo写博客需要安装NodeJs,更新系统</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum update -y</div></pre></td></tr></table></figure>
<p>安装GCC编译环境</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install g++ curl openssl openssl-devel make gcc-c++ glibc-devel -y</div></pre></td></tr></table></figure>
<p>下载NodeJS</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir /root/temp ; <span class="built_in">cd</span> /root</div><div class="line">wget http://nodejs.org/dist/node-latest.tar.gz</div><div class="line">tar -xvpzf node-latest.tar.gz</div><div class="line"><span class="built_in">cd</span> node-v*</div></pre></td></tr></table></figure>
<p>编译安装,编译安装的时间较长，需要耐心等待，编译大概在15分钟左右。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure</div><div class="line">make install</div></pre></td></tr></table></figure>
<p>安装NPM</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://npmjs.org/install.sh | sh</div></pre></td></tr></table></figure>
<p>查看安装的NodeJs版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node --version</div></pre></td></tr></table></figure>
<h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><h5 id="usr-bin-env-‘python’-No-such-file-or-directory"><a href="#usr-bin-env-‘python’-No-such-file-or-directory" class="headerlink" title="/usr/bin/env: ‘python’: No such file or directory"></a>/usr/bin/env: ‘python’: No such file or directory</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnf install python -y</div></pre></td></tr></table></figure>
<h5 id="g-Command-not-found"><a href="#g-Command-not-found" class="headerlink" title="g++: Command not found"></a>g++: Command not found</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dnf install <span class="string">"gcc-c++.x86_64"</span> -y</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[删除Apache Ambari服务]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/04/delete-ambari-service/</url>
      <content type="html"><![CDATA[<p>删除删除Apache Ambari服务可调用Apache Ambari REST接口：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#移除ZooKeeper服务</span></div><div class="line">curl -u admin:admin -H <span class="string">"X-Requested-By: ambari"</span> -X DELETE http://192.168.24.226:8080/api/v1/clusters/zwlbs/services/ZooKeeper</div><div class="line"></div><div class="line"><span class="comment">#移除MapReduce服务</span></div><div class="line">curl -u admin:admin -H <span class="string">"X-Requested-By: ambari"</span> -X DELETE http://192.168.24.226:8080/api/v1/clusters/zwlbs/services/ZooKeeper/MAPREDUCE2</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>注意服务的名称要大写。有时删除服务时会提示如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;status&quot; : 500,</div><div class="line">  &quot;message&quot; : &quot;org.apache.ambari.server.controller.spi.SystemException: An internal system exception occurred: Cannot remove ZOOKEEPER. Desired state STARTED is not removable.  Service must be stopped or disabled.&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时可以先改变服务状态再执行删除命令。改变服务状态命令为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl -i -H <span class="string">"X-Requested-By: ambari"</span> -u admin:admin -X PUT <span class="_">-d</span> <span class="string">'&#123;"RequestInfo":&#123;"context":"Stop Service"&#125;,"Body":&#123;"ServiceInfo":&#123;"state":"INSTALLED"&#125;&#125;&#125;'</span> http://192.168.24.226:8080/api/v1/clusters/CLUSTER_NAME/services/SERVICE_NAME</div><div class="line"></div><div class="line"><span class="comment">#修改ZooKeeper的状态</span></div><div class="line">curl -i -H <span class="string">"X-Requested-By: ambari"</span> -u admin:admin -X PUT <span class="_">-d</span> <span class="string">'&#123;"RequestInfo":&#123;"context":"Stop Service"&#125;,"Body":&#123;"ServiceInfo":&#123;"state":"INSTALLED"&#125;&#125;&#125;'</span> http://192.168.24.226:8080/api/v1/clusters/zwlbs/services/ZOOKEEPER</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fedora 20安装中文输入法]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/03/fedora-20-install-input-method/</url>
      <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install scim -y</div><div class="line">yum install scim-pinyin -y</div></pre></td></tr></table></figure>
<p>SCIM(Smart Common Input Method)是基于GTK引擎，为GNOME/GTK环境下非英文/ASCII字符提供的输入。SCIM is a GTK-based input method engine for inputting non-English / non-ASCII characters in a GNOME/GTK environment. There is a KDE frontend called skim.它本身自带拼音、内码等输入法，同时提供简单的程序接口，方便程序员便捷的对其进行扩充。</p>
<a id="more"></a>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在系统配置中添加安装的输入法，</p>
<img src="/2016/10/03/fedora-20-install-input-method/setting-add-input-method.png" alt="配置里添加输入法" title="配置里添加输入法">
<p>选择输入法生效。</p>
<img src="/2016/10/03/fedora-20-install-input-method/choose-input-method.png" alt="选择输入法" title="选择输入法">
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[install-chrome-in-fedora]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/02/install-chrome-in-fedora/</url>
      <content type="html"><![CDATA[<p>一种方法是通过yum安装。yum（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。基於RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。yum提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p>
<h4 id="创建Repo"><a href="#创建Repo" class="headerlink" title="创建Repo"></a>创建Repo</h4><p>在目录/etc/yum.repos.d下新建google-chrome.repo文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/yum.repos.d/google-chrome.repo</div></pre></td></tr></table></figure>
<p>32位操作系统写入如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[google-chrome]</div><div class="line">name=google-chrome - 32-bit</div><div class="line">baseurl=http://dl.google.com/linux/chrome/rpm/stable/i386</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub</div></pre></td></tr></table></figure>
<p>64位操作系统写入如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[google-chrome]</div><div class="line">name=google-chrome - 64-bit</div><div class="line">baseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub</div></pre></td></tr></table></figure>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install google-chrome-stable</div></pre></td></tr></table></figure>
<p>也可以直接下载rpm包进行安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -ivh google-chrome-stable_current_i386.rpm</div></pre></td></tr></table></figure>
<p>提示错误如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">warning: google-chrome-stable_current_i386.rpm: Header V4 DSA/SHA1 Signature, key ID 7fac5991: NOKEY</div><div class="line">error: Failed dependencies:</div><div class="line">	lsb &gt;= 4.0 is needed by google-chrome-stable-19.0.1084.56-140965.i386</div><div class="line">	libXss.so.1 is needed by google-chrome-stable-19.0.1084.56-140965.i386</div></pre></td></tr></table></figure>
<p>安装依赖包。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum install redhat-lsb -y</div><div class="line">yum install wget -y</div><div class="line">yum install libXScrnSaver -y</div><div class="line">yum install libgcrypt.so.11</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Transaction check error:</div><div class="line">  file /usr/bin from install of google-chrome-stable-19.0.1084.56-140965.i386 conflicts with file from package filesystem-3.2-19.fc20.i686</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Apache-Ambari 2.2.2.0 Agent手动安装]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/02/apache-ambari-using/</url>
      <content type="html"><![CDATA[<ul>
<li><p>Apache-Ambari 2.2.2.0</p>
</li>
<li><p>CentOS 7.0</p>
</li>
</ul>
<p>Ambari是一款用于部署、管理、监控Hadoop集群的开源工具，通过Ambari用户可以更方便地管理大规模Hadoop集群。Ambari架构采用的是Server/Client的模式，主要由两部分组成：ambari-agent和ambari-server。ambari依赖其它已经成熟的工具，例如其ambari-server就依赖python，而ambari-agent还同时依赖ruby, puppet，facter等工具，还有它也依赖一些监控工具nagios和ganglia用于监控集群状况。目前能找到2种，一种是Apache Ambari，一种是Hortonworks Ambari，两者区别不大，这里安装的是Apache Ambari。</p>
<a id="more"></a>
<p>下载Ambari repository。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</div><div class="line"><span class="comment">#(Redhat/CentOS/Oracle) 6:http://public-repo-1.hortonworks.com/ambari/centos6/2.x/updates/2.2.2.0/ambari.repo</span></div><div class="line">wget &lt;ambari-repo-url&gt;</div></pre></td></tr></table></figure>
<p>安装ambari-agent。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install ambari-agent -y</div></pre></td></tr></table></figure>
<p>启动Agent：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ambari-agent start</div></pre></td></tr></table></figure>
<p>查看Agent运行状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ambari-agent status</div></pre></td></tr></table></figure>
<p>至此，Ambari Agent安装完毕。Apache Agent的日志在目录<code>/var/log/ambari-agent/</code>下，配置文件是<code>/etc/ambari-agent/conf/ambari-agent.ini</code>。</p>
<h4 id="清除"><a href="#清除" class="headerlink" title="清除"></a>清除</h4><p>停止Ambari Agent：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ambari-agent status</div></pre></td></tr></table></figure>
<h5 id="运行HostCleanup-py脚本"><a href="#运行HostCleanup-py脚本" class="headerlink" title="运行HostCleanup.py脚本"></a>运行HostCleanup.py脚本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python /usr/lib/python2.6/site-packages/ambari_agent/HostCleanup.py \</div><div class="line">--silent --skip=users \</div><div class="line">-o /tmp/cleanup.log</div></pre></td></tr></table></figure>
<h5 id="移除-Ambari-RPM、目录和符号链接"><a href="#移除-Ambari-RPM、目录和符号链接" class="headerlink" title="移除 Ambari RPM、目录和符号链接"></a>移除 Ambari RPM、目录和符号链接</h5><p>在每个 Ambari 节点上，运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum erase -y ambari-*</div></pre></td></tr></table></figure>
<p>在Ambari服务器节点上，运行以下命令：Bash<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf /usr/lib/ambari-server</div></pre></td></tr></table></figure></p>
<p>在每个 Ambari 代理程序节点上，运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf /usr/lib/python2.6/site-packages/ambari_agent</div></pre></td></tr></table></figure>
<p>可使用以下代码移除已损坏链接：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rvf /usr/lib/python2.6/site-packages/ambari* /usr/lib/python2.6/site-packages/resource-management</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hadoop 2.7.1集群部署(不断更新...)]]></title>
      <url>http://jiangxiaoqiang.com/2016/10/01/hadoop-cluster-deploy/</url>
      <content type="html"><![CDATA[<p>所用软件版本：</p>
<ul>
<li><p>Java 1.8.0_60</p>
</li>
<li><p>Hadoop 2.7.1.2.4.3.0-227</p>
</li>
</ul>
<p>HBase集群建立在hadoop集群基础之上，所以在搭建HBase集群之前需要把Hadoop集群搭建起来，并且要考虑二者的兼容性。</p>
<p>下载JDK8u60安装包，输入如下命令进行安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -ivh jdk-8u60-linux-x64.rpm</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><p>说到可以将 Hadoop 安装目录加入 PATH 变量中，这样就可以在任意目录中直接使用 hadoo、hdfs 等命令了，如果还没有配置的，需要在 Master 节点上进行配置。首先执行 vim ~/.bashrc，加入一行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/hdp/2.4.3.0-227/hadoop/bin</div></pre></td></tr></table></figure>
<p>保存后执行<code>source ~/.bashrc</code>使配置生效。</p>
<h4 id="配置集群-分布式环境"><a href="#配置集群-分布式环境" class="headerlink" title="配置集群/分布式环境"></a>配置集群/分布式环境</h4><h5 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h4><h5 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#CentOS 6.x关闭防火墙服务</span></div><div class="line">service iptables stop</div><div class="line"><span class="comment">#CentOS 7，需通过如下命令关闭</span></div><div class="line">systemctl stop firewalld.service</div></pre></td></tr></table></figure>
<h4 id="启动服务-严格按照顺序"><a href="#启动服务-严格按照顺序" class="headerlink" title="启动服务(严格按照顺序)"></a>启动服务(严格按照顺序)</h4><h5 id="启动Zookeeper服务"><a href="#启动Zookeeper服务" class="headerlink" title="启动Zookeeper服务"></a>启动Zookeeper服务</h5><p>ZooKeeper是一个分布式开源框架，提供了协调分布式应用的基本服务，它向外部应用暴露一组通用服务——分布式同步（Distributed Synchronization）、命名服务（Naming Service）、集群维护（Group Maintenance）等，简化分布式应用协调及其管理的难度，提供高性能的分布式服务。ZooKeeper本身可以以Standalone模式安装运行，不过它的长处在于通过分布式ZooKeeper集群（一个Leader，多个Follower），基于一定的策略来保证ZooKeeper集群的稳定性和可用性，从而实现分布式应用的可靠性。如下命令启动Zookeeper服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./zkServer.sh start</div></pre></td></tr></table></figure>
<p>查看服务状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./zkServer.sh status</div></pre></td></tr></table></figure>
<p>也可以用如下命令查看：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jps | grep Quorum</div></pre></td></tr></table></figure>
<p>The jps command lists the instrumented Java HotSpot VMs on the target system. The command is limited to reporting information on JVMs for which it has the access permissions.如果服务启动失败或者遇到问题，可到相应目录查看启动日志,日志的配置在<code>zookeeper-env.sh</code>文件中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> ZOO_LOG_DIR=/var/<span class="built_in">log</span>/zookeeper</div></pre></td></tr></table></figure>
<h5 id="启动Hadoop守护进程"><a href="#启动Hadoop守护进程" class="headerlink" title="启动Hadoop守护进程"></a>启动Hadoop守护进程</h5><p>使用如下命令启动NameNode：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./hadoop-daemon.sh start namenode</div></pre></td></tr></table></figure>
<h5 id="启动Hadoop-1"><a href="#启动Hadoop-1" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h5><p>启动Hadoop集群需要启动HDFS集群和Map/Reduce集群。第一次启动先初始化namenode:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#格式化一个新的分布式文件系统</span></div><div class="line">hadoop namenode -format</div></pre></td></tr></table></figure>
<h5 id="启动HDFS"><a href="#启动HDFS" class="headerlink" title="启动HDFS"></a>启动HDFS</h5><p>命令shell脚本在hadoop的sbin目录下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#启动主NameNode、DataNode</span></div><div class="line">./start-dfs.sh</div></pre></td></tr></table></figure>
<h5 id="启动YARN"><a href="#启动YARN" class="headerlink" title="启动YARN"></a>启动YARN</h5><p>为从根本上解决旧MapReduce框架的性能瓶颈，促进Hadoop框架的更长远发展，从0.23.0版本开始，Hadoop的MapReduce框架完全重构，发生了根本的变化。新的Hadoop MapReduce框架命名为MapReduceV2或者叫Yarn(Yet Another Resource Negotiator，另一种资源协调者)。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./start-yarn.sh</div></pre></td></tr></table></figure>
<p>yarn会启动ResourceManager，此处需要注意的是：Namenode和ResourceManger如果不是同一台机器，不能在NameNode上启动 yarn，应该在ResouceManager所在的机器上启动yarn。</p>
<h4 id="查看集群运行状态"><a href="#查看集群运行状态" class="headerlink" title="查看集群运行状态"></a>查看集群运行状态</h4><p>查看集群状态验证集群是否已经成功部署。输入<code>jps</code>命令,输出如下所示即代表相应的服务部署OK：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">3884 Jps</div><div class="line">1776 ResourceManager</div><div class="line">1613 SecondaryNameNode</div><div class="line">1872 NodeManager</div><div class="line">1467 DataNode</div><div class="line">1377 NameNode</div></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="http://www.powerxing.com/install-hadoop-cluster/" target="_blank" rel="external">Hadoop集群安装配置教程</a></p>
<p><a href="http://www.jianshu.com/p/42cd4590a5cb" target="_blank" rel="external">Hadoop 2.7.2安装</a></p>
<p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-yarn/" target="_blank" rel="external">Hadoop新MapReduce框架Yarn详解</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hadoop集群SSH免密钥登录]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/30/cluster-ssh-login/</url>
      <content type="html"><![CDATA[<h4 id="免密登录原理"><a href="#免密登录原理" class="headerlink" title="免密登录原理"></a>免密登录原理</h4><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。过程如下：</p>
<ol>
<li>远程主机收到用户的登录请求，把自己的公钥发给用户；</li>
<li>用户使用这个公钥，将登录密码加密后，发送回来；</li>
<li>远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</li>
</ol>
<h4 id="配置SSH免密登陆"><a href="#配置SSH免密登陆" class="headerlink" title="配置SSH免密登陆"></a>配置SSH免密登陆</h4><p>首先，运行<code>ssh localhost</code>来产生<code>/home/用户名/.ssh</code>目录，然后执行下面命令。</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure>
<p>生成RSA公钥和私钥。将生成的”id_rsa.pub”追加（这里切记是追加，不是覆盖）到授权的key里面去。这样的效果是实现了当前用户无密SSH登陆到自己：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#将id_rsa.pub追加到authorized_keys</span></div><div class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>
<p>如果要实现无密登陆到其它的主机，只需将生成的”id_rsa.pub”追加到其它主机的”~/.ssh/authorized_keys”中去。这里我们使用的方法是先将本机的”~/.ssh/id_rsa.pub”拷贝到你想无密登陆的主机上，再在相应的主机上使用”cat”命令将”~/.ssh/id_rsa.pub”追加到该主机的 “~/.ssh/authorized_keys”中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp id_rsa.pub root@192.168.24.136:/tmp</div></pre></td></tr></table></figure>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>当再使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp id_rsa.pub root@192.168.24.136:/tmp</div></pre></td></tr></table></figure>
<p>从A服务器向192.168.24.136服务器拷贝时，不再提示输入密码时，则说明A服务器到192.168.24.136服务器可以免密钥登录,说明A服务器到192.168.24.136服务器的免密钥登录配置OK。</p>
<p>来自：</p>
<p><a href="http://www.cnblogs.com/lijingchn/p/5580263.html" target="_blank" rel="external">SSH无密码验证配置</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hashcode和equals的理解]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/28/hashcode-and-equals/</url>
      <content type="html"><![CDATA[<h4 id="hashcode作用"><a href="#hashcode作用" class="headerlink" title="hashcode作用"></a>hashcode作用</h4><p>hashcode提供了一种更加高效的寻找方式，在Set集合中的元素是无序不可重复的，要保证不重复，一种方式是在添加新数据时，逐一比较集合中已经存在的所有元素，如果当前集合的元素增多，效率是非常低的。hashcode可以解决这个问题，当向一个集合中添加某个元素，集合会首先调用hashCode方法，这样就可以直接定位它所存储的位置，若该处没有其他元素，则直接保存。若该处已经有元素存在，就调用equals方法来匹配这两个元素是否相同，相同则不存，不同则进行其他处理，比如散列到其他位置或者以链表的形式存储到当前已经存放的元素的尾部。hashcode此时作用是快速寻找处当前元素在集合中的位置，hashCode可以将集合分成若干个区域，每个对象都可以计算出他们的hash码，可以将hash码分组，每个分组对应着某个存储区域，根据一个对象的hash码就可以确定该对象所存储区域，这样就大大减少查询匹配元素的数量，提高了查询效率。</p>
<a id="more"></a>
<h4 id="hashCode与equals"><a href="#hashCode与equals" class="headerlink" title="hashCode与equals"></a>hashCode与equals</h4><p>在Java中hashCode的实现总是伴随着equals，他们是紧密配合的，你要是自己设计了其中一个，就要设计另外一个。当然在多数情况下，这两个方法是不用我们考虑的，直接使用默认方法就可以帮助我们解决很多问题。但是在有些情况，我们必须要自己动手来实现它，才能确保程序更好的运作。</p>
<p>对于equals，我们必须遵循如下规则：</p>
<p>对称性：如果x.equals(y)返回是“true”，那么y.equals(x)也应该返回是“true”。</p>
<p>反射性：x.equals(x)必须返回是“true”。</p>
<p>类推性：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。</p>
<p>一致性：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你重复x.equals(y)多少次，返回都是“true”。</p>
<p>任何情况下，x.equals(null)，永远返回是“false”；x.equals(和x不同类型的对象)永远返回是“false”。</p>
<p>对于hashCode，我们应该遵循如下规则：</p>
<ol>
<li><p>在一个应用程序执行期间，如果一个对象的equals方法做比较所用到的信息没有被修改的话，则对该对象调用hashCode方法多次，它必须始终如一地返回同一个整数。</p>
</li>
<li><p>如果两个对象根据equals(Object o)方法是相等的，则调用这两个对象中任一对象的hashCode方法必须产生相同的整数结果。</p>
</li>
<li><p>如果两个对象根据equals(Object o)方法是不相等的，则调用这两个对象中任一个对象的hashCode方法，不要求产生不同的整数结果。但如果能不同，则可能提高散列表的性能。</p>
</li>
</ol>
<p>至于两者之间的关联关系，我们只需要记住如下即可：</p>
<p>如果x.equals(y)返回“true”，那么x和y的hashCode()必须相等。</p>
<p>如果x.equals(y)返回“false”，那么x和y的hashCode()有可能相等，也有可能不等。</p>
<p>判断对象相等的整个处理流程是：</p>
<p>1、判断两个对象的hashcode是否相等，若不等，则认为两个对象不等，完毕，若相等，则比较equals。</p>
<p>2、若两个对象的equals不等，则可以认为两个对象不等，否则认为他们相等。</p>
<p>参考：</p>
<p><a href="http://www.cnblogs.com/chenssy/p/3651218.html" target="_blank" rel="external">Java提高篇（二六）—–hashCode</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring step by step(二)--持久化]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/27/spring-mybatis-integrete/</url>
      <content type="html"><![CDATA[<p>环境：</p>
<ul>
<li><p>Windows 7 X64 Ultimate</p>
</li>
<li><p>JDK 1.8</p>
</li>
<li><p>Spring-Framework 4.2.3.RELEASE</p>
</li>
<li><p>MyBatis 3.3.1</p>
</li>
<li><p>Eclipse Java EE IDE for Web Developers.Version: Neon Release (4.6.0)Build id:20160613-1800</p>
</li>
<li><p>Maven 3.3.9</p>
</li>
<li><p>MySQL 5.7</p>
</li>
</ul>
<h4 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h4><p>MyBatis是一个可以自定义SQL、存储过程和高级映射的持久层框架。MyBatis摒除了大部分的JDBC代码、手工设置参数和结果集重获。MyBatis只使用简单的XML和注解来配置和映射基本数据类型、Map 接口和POJO(Plain Ordinary Java Object)到数据库记录。相对Hibernate和Apache OJB等“一站式”ORM(Object Relational Mapping)解决方案而言，Mybatis是一种“半自动化”的ORM实现。</p>
<a id="more"></a>
<h4 id="引入MyBatis依赖包"><a href="#引入MyBatis依赖包" class="headerlink" title="引入MyBatis依赖包"></a>引入MyBatis依赖包</h4><p>在Maven项目的POM.xml中定义MyBatis和Spring相关包的版本。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mybatis.spring.version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">mybatis.spring.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.2.3.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">druid-version</span>&gt;</span>1.0.26<span class="tag">&lt;/<span class="name">druid-version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="引入Spring依赖包"><a href="#引入Spring依赖包" class="headerlink" title="引入Spring依赖包"></a>引入Spring依赖包</h4><p>在Maven项目的POM.xml中引入Spring相关的依赖包。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Spring --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="引入MySQL链接包"><a href="#引入MySQL链接包" class="headerlink" title="引入MySQL链接包"></a>引入MySQL链接包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- mysql --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Java常用的数据库连接池有DBCP、C3P0、Proxool、JBoss，此处数据库连接采用Alibaba的Druid框架，Druid是Java语言中较好的数据库连接池。Druid能够提供强大的监控和扩展功能。更加详细信息科参考<a href="http://blog.csdn.net/blogdevteam/article/details/7750513" target="_blank" rel="external"><strong>阿里巴巴开源项目Druid负责人温少访谈</strong></a>。</p>
<h4 id="引入AOP包"><a href="#引入AOP包" class="headerlink" title="引入AOP包"></a>引入AOP包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Spring基础配置"><a href="#Spring基础配置" class="headerlink" title="Spring基础配置"></a>Spring基础配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>							   <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">    http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">    http://www.springframework.org/schema/aop</div><div class="line">    http://www.springframework.org/schema/aop/spring-aop.xsd</div><div class="line">    http://www.springframework.org/schema/util</div><div class="line">    http://www.springframework.org/schema/util/spring-util.xsd</div><div class="line">    http://www.springframework.org/schema/context</div><div class="line">    http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>spring主配置文件<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"applicationProperties"</span> <span class="attr">location</span>=<span class="string">"classpath:application.properties"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">properties-ref</span>=<span class="string">"applicationProperties"</span></span></div><div class="line">		<span class="attr">ignore-resource-not-found</span>=<span class="string">"true"</span> /&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"dolphin.service.*"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--aop 注解风格支持 proxy-targer-class默认false,用jdk动态代理,true是cglib .expose-proxy当前代理是否为可暴露状态,值是"ture",则为可访问。 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span></span></div><div class="line">		<span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-mybatis.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-config/spring-datasource.xml"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Spring 自 2.0 版本开始，陆续引入了一些注解用于简化 Spring 的开发。@Repository 注解便属于最先引入的一批，它用于将数据访问层 (DAO 层 ) 的类标识为 Spring Bean。具体只需将该注解标注在 DAO 类上即可。同时，为了让 Spring 能够扫描类路径中的类并识别出 @Repository 注解，需要在 XML 配置文件中启用 Bean 的自动扫描功能，这可以通过context:component-scan实现。context:component-scan定义了相关Bean的扫描路径。就不再需要在 XML 中显式使用 <bean> 进行 Bean 的配置。Spring 在容器初始化时将自动扫描 base-package 指定的包及其子包下的所有 class 文件，所有标注了 @Repository 的类都将被注册为 Spring Bean。</bean></p>
<h4 id="新建Spring-Mybatis配置文件"><a href="#新建Spring-Mybatis配置文件" class="headerlink" title="新建Spring-Mybatis配置文件"></a>新建Spring-Mybatis配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">    http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">    http://www.springframework.org/schema/tx</div><div class="line">    http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring 整合 MyBatis<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 在基本的MyBatis中，session 工厂可以使用SqlSessionFactoryBuilder.来创建。在MyBatis-Spring中，使用了SqlSessionFactoryBean来替代。 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 指定sqlMapConfig总配置文件，订制的environment在spring容器中不在生效 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- Mybatis 映射文件路径 用逗号隔开 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"dolphin.dao"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="新建MyBatis配置文件"><a href="#新建MyBatis配置文件" class="headerlink" title="新建MyBatis配置文件"></a>新建MyBatis配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.1//EN"</span></div><div class="line">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--设置--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 全局映射器启用缓存，不建议使用mybatis自己的缓存--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 查询时，关闭关联对象即时加载以提高性能 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指定)，不会加载关联表的所有字段，以提高性能 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"multipleResultSetsEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 允许使用列标签代替列名 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 给予被嵌套的resultMap以字段-属性的映射支持 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingBehavior"</span> <span class="attr">value</span>=<span class="string">"FULL"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 对于批量更新操作缓存SQL以提高性能  但是返回id有问题--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultExecutorType"</span> <span class="attr">value</span>=<span class="string">"SIMPLE"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 数据库超过36000秒仍未响应则超时 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"36000"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="数据库链接配置"><a href="#数据库链接配置" class="headerlink" title="数据库链接配置"></a>数据库链接配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#=========================================</div><div class="line"># DataSource</div><div class="line">#=========================================</div><div class="line">jdbc.driverClass = com.mysql.jdbc.Driver</div><div class="line">jdbc.url = jdbc:mysql://127.0.0.1:3306/test</div><div class="line">jdbc.username = root</div><div class="line">jdbc.password =123456</div></pre></td></tr></table></figure>
<h4 id="新建POJO"><a href="#新建POJO" class="headerlink" title="新建POJO"></a>新建POJO</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Country</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Integer id;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String countryName;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCountryName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> countryName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCountryName</span><span class="params">(String countryName)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.countryName = countryName;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="新建DAO"><a href="#新建DAO" class="headerlink" title="新建DAO"></a>新建DAO</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CountryDao</span> </span>&#123;</div><div class="line">	<span class="function">Country <span class="title">getCountry</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="新建Mapper"><a href="#新建Mapper" class="headerlink" title="新建Mapper"></a>新建Mapper</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.3//EN"</span></div><div class="line">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"dolphin.dao.CountryDao"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getCountry"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"dolphin.mode.Country"</span>&gt;</span></div><div class="line">        SELECT</div><div class="line">        *</div><div class="line">        FROM</div><div class="line">        country</div><div class="line">        WHERE id = #&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="新建Service"><a href="#新建Service" class="headerlink" title="新建Service"></a>新建Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CountryService</span> </span>&#123;</div><div class="line">	<span class="function">Country <span class="title">getCountyById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountryServiceImpl</span> <span class="keyword">implements</span> <span class="title">CountryService</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> CountryDao countryDao;</div><div class="line">	<span class="function"><span class="keyword">public</span> Country <span class="title">getCountyById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> countryDao.getCountry(id);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="新建测试类"><a href="#新建测试类" class="headerlink" title="新建测试类"></a>新建测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:spring-config/spring-base.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicTest</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageMapperTest</span> <span class="keyword">extends</span> <span class="title">BasicTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> CountryService countryService;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Country country = countryService.getCountyById(<span class="number">1</span>);</div><div class="line">			System.out.print(country.getId());</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="新建数据库表"><a href="#新建数据库表" class="headerlink" title="新建数据库表"></a>新建数据库表</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">USE `test`;</div><div class="line"></div><div class="line">#</div><div class="line"># Table structure for table country</div><div class="line">#</div><div class="line"></div><div class="line">DROP TABLE IF EXISTS `country`;</div><div class="line">CREATE TABLE `country` (</div><div class="line">  `Id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',</div><div class="line">  `countryname` varchar(255) DEFAULT NULL COMMENT '名称',</div><div class="line">  `countrycode` varchar(255) DEFAULT NULL COMMENT '代码',</div><div class="line">  PRIMARY KEY (`Id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='国家信息';</div><div class="line"></div><div class="line">INSERT INTO `country` VALUES (1,'Angola','AO');</div><div class="line">INSERT INTO `country` VALUES (2,'Afghanistan','AF');</div></pre></td></tr></table></figure>
<h4 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h4><p>结果如下如所示。</p>
<img src="/2016/09/27/spring-mybatis-integrete/spring-mybatis-running-result.jpg" alt="MyBatis读取数据" title="MyBatis读取数据">
<p>引用文章：</p>
<p><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-spring-iocannt/" target="_blank" rel="external">详解 Spring 3.0 基于 Annotation 的依赖注入实现</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ Idea快捷键技巧]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/26/intllij-idea-encoding/</url>
      <content type="html"><![CDATA[<h4 id="输入乱码"><a href="#输入乱码" class="headerlink" title="输入乱码"></a>输入乱码</h4><p>在控制台输入中文时显示的不是输入的汉字，而是显示正方形符号，此时输入的汉字显示乱码，如图所示。</p>
<img src="/2016/09/26/intllij-idea-encoding/intelli-idea-input-encode.jpg" alt="输入时乱码" title="输入时乱码">
<a id="more"></a>
<p>解决此问题，可使用支持中文较好的字体，覆盖默认字体，在Intellig Idea中的File-Settings-Appearance&amp;Behavior-Appearance中(Ctrl + Alt + S)。如下图所示。</p>
<img src="/2016/09/26/intllij-idea-encoding/intelli-idea-override-default-font.jpg" alt="覆盖默认字体" title="覆盖默认字体">
<p>在Debug控制台中Tomcat中输出乱码，可以打开Run/Debug Configuration,选择你的tomcat。在Server &gt; VM options设置为<code>-Dfile.encoding=UTF-8</code> ，重启tomcat，其中参数-D代表Default，设置默认的文件编码是UTF-8。</p>
<h4 id="智能提示敏感调整"><a href="#智能提示敏感调整" class="headerlink" title="智能提示敏感调整"></a>智能提示敏感调整</h4><p>在智能提示时默认大小写敏感，比如String的智能提示就必须首字母大写才能够准确定位，经常大小写切换，不是特别方便。在settings-Editor-General-Code Completion里设置后，可以省去大小写切换操作。</p>
<img src="/2016/09/26/intllij-idea-encoding/code-completion-case-sensitive.jpg" alt="智能提示大小写敏感调整" title="智能提示大小写敏感调整">
<h4 id="Live-Templates"><a href="#Live-Templates" class="headerlink" title="Live Templates"></a>Live Templates</h4><p>Live templates帮助你快速、高效、精准的输入经常使用的或者自定义的代码片段(Live templates let you insert frequently-used or custom code constructs into your source code file quickly, efficiently, and accurately).相当于一个代码块的缩写，输入<code>Ctrl + J</code>会显示当前上下文中所有可用的模板。快速输入foreach，在方法内(一定要在方法里敲)输入iter + TAB。</p>
<h5 id="快速进行空判断"><a href="#快速进行空判断" class="headerlink" title="快速进行空判断"></a>快速进行空判断</h5><p>输入<code>ifn</code>，按TAB即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="快速输入Main方法"><a href="#快速输入Main方法" class="headerlink" title="快速输入Main方法"></a>快速输入Main方法</h5><p>输入<code>psvm</code>,按TAB键即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Surround-with"><a href="#Surround-with" class="headerlink" title="Surround with"></a>Surround with</h4><p>用于快速添加try catch等代码块，The Surround with feature allows you easily put expressions or statements within blocks or language constructs.快捷键为：<code>Ctrl + Alt + T</code>。</p>
<h4 id="重构-Reflactor"><a href="#重构-Reflactor" class="headerlink" title="重构(Reflactor)"></a>重构(Reflactor)</h4><h5 id="重命名-Rename"><a href="#重命名-Rename" class="headerlink" title="重命名(Rename)"></a>重命名(Rename)</h5><p>Shift + F6,可以重命名你的类、方法、变量等等。</p>
<h4 id="主题-Theme"><a href="#主题-Theme" class="headerlink" title="主题(Theme)"></a>主题(Theme)</h4><p>更换默认主题在settings(Ctrl + Alt + S) –&gt; editor –&gt; colors &amp; fonts –&gt; general，如下图所示，如果需要修改主题的字体等是默认是不允许的，需要复制一个新的主题，再自定义修改相应的参数。</p>
<img src="/2016/09/26/intllij-idea-encoding/change-theme.jpg" alt="修改默认主题" title="修改默认主题">
<h4 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h4><p>使用Maven最头疼的就是从中央库下载jar包超级慢，等待下载jar包的感觉用重庆话讲：肚肠子把把逗紧了。解决办法就是使用私服地址，私服可以使用本地配置的Maven(不是Intellij Idea里面的boundle Maven)，修改Intellj Maven采用本机安装Maven在设置(Ctrl + Alt + S)中输入Maven，修改地址(例如：<code>D:\Source\zwnewplatform\javasoftware\runtime\apache-maven-3.3.9</code>)即可，如下图所示。</p>
<img src="/2016/09/26/intllij-idea-encoding/specify-maven-addr.jpg" alt="修改Maven地址" title="修改Maven地址">
<h4 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h4><p>Intellij Idea可以完全丢掉键盘工作，有点早期Vim和Emacs编辑器的味道。善用Intellij Idea编辑器可以大幅提高工作效率，用快捷键有一种装逼的感觉，装逼人士必备。</p>
<table>
<thead>
<tr>
<th>快捷键(Short Keys)</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + Shift + F12</td>
<td style="text-align:center">编辑区全屏</td>
</tr>
<tr>
<td>Ctrl + F4</td>
<td style="text-align:center">关闭当前编辑文件</td>
</tr>
<tr>
<td>Alt + 1</td>
<td style="text-align:center">打开项目树视图,并将光标定位到当前编辑文件在项目树上的位置</td>
</tr>
<tr>
<td>Alt + Home</td>
<td style="text-align:center">定位到导航条</td>
</tr>
<tr>
<td>Ctrl + Shift + N</td>
<td style="text-align:center">定位到某一个文件(定位到指定文件)</td>
</tr>
<tr>
<td>Shift + Esc</td>
<td style="text-align:center">隐藏底部(如：Debug、TODO等)窗口</td>
</tr>
<tr>
<td>F12</td>
<td style="text-align:center">把焦点从编辑器移到最近使用的工具窗口，可用于显示底部(如：Debug、TODO等)对应窗口</td>
</tr>
<tr>
<td>Alt + 5</td>
<td style="text-align:center">激活Debug窗口</td>
</tr>
<tr>
<td>Alt + 7</td>
<td style="text-align:center">打开Structure窗口(Structure前面有一个带有下划线的5是快捷键提示)</td>
</tr>
<tr>
<td>Ctrl + N</td>
<td style="text-align:center">根据输入的类名查找类文件</td>
</tr>
<tr>
<td>Ctrl + Shift + N</td>
<td style="text-align:center">查找文件</td>
</tr>
<tr>
<td>Alt + Insert</td>
<td style="text-align:center">生成Getter、Setter</td>
</tr>
<tr>
<td>Ctrl + F12</td>
<td style="text-align:center">在当前编辑的文件中快速导航</td>
</tr>
<tr>
<td>Alt + F3(Search/Incremental Search )</td>
<td style="text-align:center">在编辑器中实现快速查查找功能</td>
</tr>
<tr>
<td>Ctrl + J</td>
<td style="text-align:center">如果记不住Live Template的缩写，使用此快捷键可以弹出所有Live Template的缩写</td>
</tr>
<tr>
<td>Ctrl + X</td>
<td style="text-align:center">删除行，剪切(Cut)</td>
</tr>
<tr>
<td>Ctrl + Alt + F12</td>
<td style="text-align:center">显示当前项目树结构文件/文件夹所在目录，可以快速打开文件夹</td>
</tr>
<tr>
<td>Ctrl + Shift + T(Test)</td>
<td style="text-align:center">选中类名，按下快捷键,创建一个新的测试Case</td>
</tr>
<tr>
<td>Ctrl + Shift + 数字键(NumPad)+</td>
<td style="text-align:center">展开所有</td>
</tr>
<tr>
<td>Ctrl + Shift + 数字键(NumPad)-</td>
<td style="text-align:center">折叠所有</td>
</tr>
<tr>
<td>Ctrl +  数字键(NumPad)-</td>
<td style="text-align:center">在项目树上应用此快捷键可以折叠所有展开的文件夹</td>
</tr>
<tr>
<td>Ctrl + F12</td>
<td style="text-align:center">打开Intellij中嵌入的终端(Terminal)</td>
</tr>
<tr>
<td>Ctrl + B</td>
<td style="text-align:center">跳转到实现处</td>
</tr>
<tr>
<td>Ctrl + F8</td>
<td style="text-align:center">设置断点和取消设置断点</td>
</tr>
<tr>
<td>Alt + Up/Down</td>
<td style="text-align:center">跳转到下一个方法或者属性</td>
</tr>
<tr>
<td>Ctrl + Tab</td>
<td style="text-align:center">编辑窗口切换(切换Debug视图、编辑区类文件等)</td>
</tr>
<tr>
<td>Shift + F2/F2</td>
<td style="text-align:center">跳到上/下一个错误处</td>
</tr>
<tr>
<td>Alt + F1</td>
<td style="text-align:center">选中目标，可以定位到文件等各种对象，Alt + F1弹出的界面中选择需要定位的对象，也可以理解成对象导航</td>
</tr>
<tr>
<td>Shift + F6</td>
<td style="text-align:center">重构、重命名</td>
</tr>
<tr>
<td>Ctrl + Shift + F10</td>
<td style="text-align:center">运行测试，注意运行测试时界面需要切换到测试类的界面</td>
</tr>
<tr>
<td>Alt + F8</td>
<td style="text-align:center">计算变量值</td>
</tr>
<tr>
<td>Alt + Left/Right</td>
<td style="text-align:center">按左/右方向切换当前已打开的文件视图</td>
</tr>
<tr>
<td>Ctrl + F10</td>
<td style="text-align:center">更新资源和类文件，热部署(需要配置，部署时选择Exploded模式)</td>
</tr>
<tr>
<td>Ctrl + Shift + T</td>
<td style="text-align:center">新建测试类，在测试类与被测试类之间跳转</td>
</tr>
<tr>
<td>Ctrl + Shift +F</td>
<td style="text-align:center">全文查找，类似于Eclipse的Ctrl + H</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + N</td>
<td style="text-align:center">全文搜索，包含Maven引用的jar包里面的内容，在搜索界面中，需要勾选Include non-project symbols</td>
</tr>
<tr>
<td>Ctrl + Alt + Left/Right</td>
<td style="text-align:center">到上一次/下一次编辑的位置</td>
</tr>
<tr>
<td>Ctrl + Y</td>
<td style="text-align:center">删除光标所在行或删除选中的行</td>
</tr>
<tr>
<td>Ctrl + P(Parameter)</td>
<td style="text-align:center">方法参数提示显示,当调用方法时未出现参数的智能提示时，可以手动显示方法的提示</td>
</tr>
<tr>
<td>Ctrl + Q</td>
<td style="text-align:center">光标所在的变量/类名/方法名等上面（也可以在提示补充的时候按），显示文档内容</td>
</tr>
<tr>
<td>Ctrl + Shift + Up/Down</td>
<td style="text-align:center">代码行上下移动</td>
</tr>
<tr>
<td>Ctrl + Shift + U</td>
<td style="text-align:center">变量转换为大写</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td style="text-align:center">选中光标所在位置的单词(Words),递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围</td>
</tr>
<tr>
<td>Ctrl + Alt + O</td>
<td style="text-align:center">优化(Optimization)类的Import</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td style="text-align:center">显示类的层次结构(Hierarchy)</td>
</tr>
<tr>
<td>Alt + F12</td>
<td style="text-align:center">激活Terminal</td>
</tr>
<tr>
<td>Ctrl + Shift + F10</td>
<td style="text-align:center">运行所有测试(不是特别好用)</td>
</tr>
<tr>
<td>Ctrl + Delete</td>
<td style="text-align:center">删除行</td>
</tr>
<tr>
<td>Ctrl + Alt + O（Optimize）</td>
<td style="text-align:center">优化包导入</td>
</tr>
</tbody>
</table>
<h5 id="进入退出全屏"><a href="#进入退出全屏" class="headerlink" title="进入退出全屏"></a>进入退出全屏</h5><p>使用快捷键<code>Alt + V</code>打开View菜单，移动上下键选择<code>Enter Full Screen</code>即可。也可以自定义快捷键。</p>
<h4 id="properties显示中文"><a href="#properties显示中文" class="headerlink" title="properties显示中文"></a>properties显示中文</h4><p>使用IntelliJ Idea打开属性文件时，如果包含中文，显示为原始的编码，正确显示中文需要做如下设置，到设置(settings)中,可以使用快捷键Ctrl + Alt + S打开设置界面，找到<code>File Encoding</code>选项卡，选中<code>Default encoding for properties file</code>即可，如下图所示.</p>
<img src="/2016/09/26/intllij-idea-encoding/intellij-properties-encoding.png" alt="属性文件编码设置" title="属性文件编码设置">
<h4 id="限制编辑器Tab页个数"><a href="#限制编辑器Tab页个数" class="headerlink" title="限制编辑器Tab页个数"></a>限制编辑器Tab页个数</h4><p>有时我们并不习惯在编辑器中打开太多的Tab页，如果不小心点开了7个以上的Tab页，在Tab页面中切换也蛮让人晕眩的，设置Tab页最大个数在Settings(Ctrl + Alt + S),Editor-General-Editor Tabs中，如下图如所示。</p>
<img src="/2016/09/26/intllij-idea-encoding/intellij-tabs-number-setting.png" alt="IntelliJ Idea编辑器Tab页设置" title="IntelliJ Idea编辑器Tab页设置">
<h4 id="类文件注释"><a href="#类文件注释" class="headerlink" title="类文件注释"></a>类文件注释</h4><p>通过File–》Setting–》File and Code Template中来设置类文件注释，如下图所示：</p>
<img src="/2016/09/26/intllij-idea-encoding/setting-class-comment.png" alt="设置类文件注释" title="设置类文件注释">
<h4 id="格式化设置"><a href="#格式化设置" class="headerlink" title="格式化设置"></a>格式化设置</h4><p>有时在按下格式化按钮后，希望同时优化导入的包，自动移除未使用的包引用，在Intellij Idea中，可以在文件夹上右键，选择Reformate Code(Ctrl + Alt + L)，在弹出的界面中勾选Optimize Import即可。这样在每次按下格式化按钮时，会自动优化导入的包，比如自动移除未使用的包引用、自动排序等等。</p>
<img src="/2016/09/26/intllij-idea-encoding/reformate-code.png" alt="格式化时优化导入包" title="格式化时优化导入包">
<p>参考：</p>
<p><a href="http://www.hollischuang.com/archives/966" target="_blank" rel="external">Java开发必装的IntelliJ IDEA插件</a></p>
<p><a href="https://www.jetbrains.com/help/idea/2016.2/surrounding-blocks-of-code-with-language-constructs.html" target="_blank" rel="external">Surrounding Blocks of Code with Language Constructs</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring step by step(一)--依赖注入(Dependency Injection)]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/25/spring-ioc/</url>
      <content type="html"><![CDATA[<h4 id="为什么要依赖注入"><a href="#为什么要依赖注入" class="headerlink" title="为什么要依赖注入"></a>为什么要依赖注入</h4><p>依赖注入(Dependency Injection)所要达到的目标是实现程序间的松耦合。将服务的调用者和服务的提供者分离。DI提供一种机制，在运行时绑定服务的提供者和调用者。</p>
<a id="more"></a>
<h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><p>新建一个Web项目，目录结构如下。</p>
<img src="/2016/09/25/spring-ioc/maven-initial-content-structure.jpg" alt="Maven项目目录树结构" title="Maven项目目录树结构">
<h4 id="引入包"><a href="#引入包" class="headerlink" title="引入包"></a>引入包</h4><p>引入servlet-api.jar包，目录结构如下。</p>
<img src="/2016/09/25/spring-ioc/add-servlet-api-content-structure.jpg" alt="Maven项目目录树结构" title="Maven项目目录树结构">
<p>注意引入servlet-api.jar包后，多了src/main/java目录和src/test/java目录。servlet-api.jar包中，实现了Sevlet规范，在Apache Tomcat 8.0.37中实现的是Servlet Specification 3.1，JSP Specification 2.3。版本之间详细的对应关系可以看<a href="http://tomcat.apache.org/whichversion.html" target="_blank" rel="external"><strong>Apache Tomcat Versions</strong></a>。</p>
<h4 id="添加Spring依赖包"><a href="#添加Spring依赖包" class="headerlink" title="添加Spring依赖包"></a>添加Spring依赖包</h4><p>在Maven的POM文件中添加spring-context依赖。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此处虽然只添加了一个jar包，Maven会自动下载此jar包相关的依赖包。在Maven的Dependency Hierarchy中查看包与包之间的依赖关系如下图所示。</p>
<img src="/2016/09/25/spring-ioc/spring-context-dependency-hierarchy.jpg" alt="Spring-Context包依赖关系" title="Spring-Context包依赖关系">
<h4 id="添加类"><a href="#添加类" class="headerlink" title="添加类"></a>添加类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageService</span> </span>&#123;</div><div class="line">   <span class="function">String <span class="title">getMessage</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessagePrinter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">private</span> MessageService service;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessagePrinter</span><span class="params">(MessageService service)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span>.service.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>带有 @Configuration 的注解类表示这个类可以使用 Spring IoC 容器作为 bean 定义的来源。@Bean 注解告诉 Spring，一个带有 @Bean 的注解方法将返回一个对象，该对象应该被注册为在 Spring 应用程序上下文中的 bean。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function">MessageService <span class="title">mockMessageService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageService() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(Application.class);</div><div class="line">        MessagePrinter printer = context.getBean(MessagePrinter.class);</div><div class="line">        printer.printMessage();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码(排除Main函数)等同于:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mockMessageService"</span> <span class="attr">class</span>=<span class="string">"dolphin.MessageService"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>带有 @Bean 注解的方法名称作为 bean 的 ID，它创建并返回实际的 bean。配置类可以声明多个 @Bean。一旦定义了配置类，你就可以使用 AnnotationConfigApplicationContext 来加载并把他们提供给 Spring 容器(Main方法中即是)。</p>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>结果如图所示。</p>
<img src="/2016/09/25/spring-ioc/spring-di-result.jpg" alt="Dependency Injection结果示例" title="Dependency Injection结果示例">
<p>来自：</p>
<ul>
<li><a href="https://projects.spring.io/spring-framework/#quick-start" target="_blank" rel="external">spring-framework-quick-start</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Eclipse断点类型]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/24/eclipse-breakpoint-type/</url>
      <content type="html"><![CDATA[<p>本文的Eclipse版本为:Eclipse Java EE IDE for Web Developers.</p>
<p>Version: Neon Release (4.6.0)<br>Build id: 20160613-1800</p>
<h4 id="Line-Breakpoint"><a href="#Line-Breakpoint" class="headerlink" title="Line Breakpoint"></a>Line Breakpoint</h4><p>Line Breakpoint是最简单的Eclipse断点，只要双击某行代码对应的左侧栏，就对该行设置上断点。断点的颜色为一个蓝色的实心点。</p>
<a id="more"></a>
<h4 id="Watchpoint"><a href="#Watchpoint" class="headerlink" title="Watchpoint"></a>Watchpoint</h4><p>关注某个关键变量的变化或使用。此时，就可以为该变量设置一种特殊的断点–Watchpoint。</p>
<img src="/2016/09/24/eclipse-breakpoint-type/watchpoint.jpg" alt="Watch Breakpoint" title="Watch Breakpoint">
<h4 id="Method-Breakpoint"><a href="#Method-Breakpoint" class="headerlink" title="Method Breakpoint"></a>Method Breakpoint</h4><p>关注程序对某个方法的调用情况，即，可以设置Method Breakpoint。</p>
<img src="/2016/09/24/eclipse-breakpoint-type/method-breakpoint.jpg" alt="Method Breakpoint" title="Method Breakpoint">
<p>断点上的左右小箭头代表进入和退出方法时命中。</p>
<h4 id="Exception-Breakpoint"><a href="#Exception-Breakpoint" class="headerlink" title="Exception Breakpoint"></a>Exception Breakpoint</h4><p>某个特定异常发生时程序能够被中断，以方便查看当时程序所处的状态。</p>
<img src="/2016/09/24/eclipse-breakpoint-type/exception-breakpoint.jpg" alt="Exception Breakpoint" title="Exception Breakpoint">
<h4 id="Class-Load-Breakpoint"><a href="#Class-Load-Breakpoint" class="headerlink" title="Class Load Breakpoint"></a>Class Load Breakpoint</h4><p>当某个类被加载时，通过该断点可以中断程序。</p>
<img src="/2016/09/24/eclipse-breakpoint-type/class-breakpoint.jpg" alt="Class Breakpoint" title="Class Breakpoint">
<p>来自：</p>
<ul>
<li><a href="http://www.blogjava.net/jiangshachina/archive/2011/11/20/364367.html" target="_blank" rel="external">详解Eclipse断点</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Phoenix常用操作]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/23/phoenix-tutorial/</url>
      <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Phoenix本意是凤凰的意思，<a href="http://phoenix.apache.org/" target="_blank" rel="external">Apache Phoenix</a>是构建在HBase之上的关系型数据库层，作为内嵌的客户端JDBC驱动用以对HBase中的数据进行低延迟访问。Apache Phoenix会将用户编写的sql查询编译为一系列的scan操作，最终产生通用的JDBC结果集返回给客户端。数据表的元数据存储在HBase的表中被会标记版本号，所以进行查询的时候会自动选择正确的schema。直接使用HBase的API，结合协处理器（coprocessor）和自定义的过滤器的话，小范围的查询在毫秒级响应，千万数据的话响应速度为秒级。</p>
<a id="more"></a>
<img src="/2016/09/23/phoenix-tutorial/phoenix-position.jpg" alt="Phoenix的定位" title="Phoenix的定位">
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>Phoenix可以用SQL语句来查询Hbase，且只能查Hbase，别的类型比如查询文本文件等都不支持！如果要查文本文件等，可以使用Hive和Impala，Phoenix在Hbase上查询的性能较Hive和Impala具有优势。</p>
<h4 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h4><p>登录。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./sqlline.py localhost</div></pre></td></tr></table></figure>
<p>查看HBase所有表。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!tables</div></pre></td></tr></table></figure>
<p>table schema为system的是系统表。</p>
<p>查看HBase中表名为test的所有列。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!columns <span class="built_in">test</span></div></pre></td></tr></table></figure>
<p>表名不用加引号。</p>
<p>查询表数据。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span>;</div><div class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">test</span>;//查询指定列</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'jiangxiaoqiang'</span>;//条件查询</div></pre></td></tr></table></figure>
<p>删除表数据。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> condition;//语法</div><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">is</span> <span class="literal">null</span>;//例子</div></pre></td></tr></table></figure>
<p>condition是过滤条件，注意结尾需要有分号，表示SQL语句已经结束，可以提交给引擎执行。</p>
<p>清除表的重复数据。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tablename <span class="keyword">where</span> vtime <span class="keyword">in</span> ( <span class="keyword">select</span> vtime <span class="keyword">from</span> tablename <span class="keyword">group</span> <span class="keyword">by</span> vtime <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span>) <span class="keyword">and</span> <span class="keyword">id</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">max</span>(<span class="keyword">id</span>) <span class="keyword">from</span> tablename <span class="keyword">group</span> <span class="keyword">by</span> vtime <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span> );</div></pre></td></tr></table></figure>
<p>清除同一时间重复的数据（同一时刻只能有1条数据）。</p>
<p>连接查询。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> P.id <span class="keyword">as</span> <span class="keyword">id</span>, vtime, A.description <span class="keyword">FROM</span> 表P P <span class="keyword">left</span> <span class="keyword">join</span> 表A A <span class="keyword">on</span> P.id=A.positional_Id <span class="keyword">WHERE</span> P.vehicle_id=<span class="string">'cae21196-cb66-4256-88a6-7cdfb23e2c78'</span> <span class="keyword">and</span> P.vtime &gt;= <span class="string">'2016-10-10 00:00:00'</span> <span class="keyword">and</span> P.vtime &lt;= <span class="string">'2016-10-13 23:59:59'</span> <span class="keyword">and</span> P.alarm <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">and</span> P.alarm != <span class="string">'0'</span> <span class="keyword">order</span> <span class="keyword">by</span> P.vtime;</div></pre></td></tr></table></figure>
<p>注意在做MyBatis映射时，P.id列需要一个别名，对应定义的实体字段。</p>
<h4 id="函数-Function"><a href="#函数-Function" class="headerlink" title="函数(Function)"></a>函数(Function)</h4><p>substr函数用于截取字符串。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(<span class="keyword">time</span>,<span class="number">0</span>,<span class="number">11</span>) <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">substr</span>(<span class="keyword">time</span>,<span class="number">0</span>,<span class="number">11</span>);</div></pre></td></tr></table></figure>
<p>time为需要截取的字符串，从第0位开始截取11位长度。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat 8.0 HTTP请求流程]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/22/tomcat-http/</url>
      <content type="html"><![CDATA[<p>假设来自浏览器的请求为：<a href="http://localhost:8080/test/index.jsp" target="_blank" rel="external">http://localhost:8080/test/index.jsp</a></p>
<h4 id="Connector获取请求"><a href="#Connector获取请求" class="headerlink" title="Connector获取请求"></a>Connector获取请求</h4><p>请求被发送到Apache Tomcat服务器端口8080，被在那里侦听的<code>Coyote HTTP/1.1 Connector(org.apache.tomcat.util.net.NioEndpoint)</code>获得。Tomcat源码中与connector相关的类位于org.apache.coyote包中，Connector分为以下几类：</p>
<ul>
<li><strong>Http Connector</strong> 基于HTTP协议，负责建立HTTP连接。它又分为BIO Http Connector与<code>NIO Http Connector(org.apache.tomcat.util.net.NioEndpoint)</code>两种。BIO(blocking I/O)，顾名思义，即阻塞式I/O操作，表示Tomcat使用的是传统的Java I/O操作(即java.io包 及其子包)。一般而言，bio模式是三种运行模式中性能最低的一种。NIO为Network IO，后者提供非阻塞IO与长连接Comet支持。NIO(new I/O)，是Java SE 1.4及后续版本提供的一种新的I/O操作方式(即java.nio包及其子包)。Java nio是一个基于缓冲区、并能提供非阻塞I/O操作的Java API，因此nio也被看成是non-blocking I/O的缩写。它拥有比传统I/O操作(bio)更好的并发运行性能。</li>
</ul>
<a id="more"></a>
<ul>
<li><p><strong>AJP Connector</strong>    基于AJP协议，AJP是专门设计用来为tomcat与http服务器之间通信专门定制的协议，能提供较高的通信速度和效率。如与Apache服务器集成时，采用这个协议。AJP(Apache JServ Protocol)协议：目前正在使用的AJP协议的版本是通过JK和JK2连接器提供支持的AJP13，它基于二进制的格式在Web服务器和Tomcat之间传输数据，而此前的版本AJP10和AJP11则使用文本格式传输数据。</p>
</li>
<li><p><strong>APR HTTP Connector</strong> org.apache.tomcat.util.net.AprEndpoint，用C实现，通过JNI(Java Native Interface)调用的。主要提升对静态资源(如HTML、图片、CSS、JS等)的访问性能。现在这个库已独立出来可用在任何项目中。Tomcat在配置APR之后性能非常强劲。APR(Apache Portable Runtime/Apache可移植运行时)，是Apache HTTP服务器的支持库。你可以简单地理解为，Tomcat将以JNI的形式调用Apache HTTP服务器的核心动态链接库来处理文件读取或网络传输操作，从而大大地提高Tomcat对静态文件的处理性能。Tomcat apr也是在Tomcat上运行高并发应用的首选模式。与配置nio运行模式一样，也需要将对应的Connector节点的protocol属性值改为org.apache.coyote.http11.Http11AprProtocol。</p>
</li>
</ul>
<p>Tomcat7和Tomcat8默认设置都是http1.1，Tomcat7默认使用BIO，Tomcat8根据情况自动选择BIO还是NIO，甚至NIO2.当前调试版本是Tomcat 8，默认进入的是NioEndpoint(其实这里已经到AbstractEndpoint的Processor了，在NioEndpoint的断点始终没有命中，不知何故)，如下图所示。</p>
<img src="/2016/09/22/tomcat-http/nioendpoint-debug.jpg" alt="HTTP请求进入NioEndpoint" title="HTTP请求进入NioEndpoint">
<h4 id="Engine处理请求"><a href="#Engine处理请求" class="headerlink" title="Engine处理请求"></a>Engine处理请求</h4><p>Connector把该请求交给它所在的Service的Engine(StandardEngine)来处理，并等待Engine的回应。Container 是容器的父接口，所有子容器都必须实现这个接口，Container 容器的设计用的是典型的责任链的设计模式，它有四个子容器组件构成，分别是：Engine、Host、Context、Wrapper，这四个组件不是平行的，而是父子关系，Engine 包含 Host,Host 包含 Context，Context 包含 Wrapper。通常一个 Servlet class 对应一个 Wrapper，如果有多个 Servlet 就可以定义多个 Wrapper，如果有多个 Wrapper 就要定义一个更高的Container。详细的关系在server.xml可以看出来：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Server</span>&gt;</span><span class="comment">&lt;!--顶层元素，代表一个服务器--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Service</span>&gt;</span><span class="comment">&lt;!--顶层元素，是Connector的集合，只有一个Engine--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Connectior</span>/&gt;</span><span class="comment">&lt;!--连接器类元素，代表通信接口--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Engine</span>&gt;</span><span class="comment">&lt;!--容器类元素，为特定的Service组件处理所有客户请求，可包含多个Host--&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">Host</span>&gt;</span><span class="comment">&lt;!--为特定的虚拟主机处理所有客户请求--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Context</span>&gt;</span><span class="comment">&lt;!--为特定的WEB应用处理所有客户请求--&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">Context</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="匹配Host"><a href="#匹配Host" class="headerlink" title="匹配Host"></a>匹配Host</h4><p>Engine获得请求localhost:8080/test/index.jsp，匹配它所有虚拟主机Host<br>Engine匹配到名为localhost的Host（即使匹配不到也把请求交给该Host处理，因为该Host被定义为该Engine的默认主机）</p>
<h4 id="匹配Context"><a href="#匹配Context" class="headerlink" title="匹配Context"></a>匹配Context</h4><p>localhost Host获得请求/test/index.jsp，匹配它所拥有的所有Context<br>Host匹配到路径为/test的Context（如果匹配不到就把该请求交给路径名为””的Context去处理）</p>
<h4 id="匹配Servlet"><a href="#匹配Servlet" class="headerlink" title="匹配Servlet"></a>匹配Servlet</h4><p>path=”/test”的Context获得请求/index.jsp，在它的mapping table中寻找对应的servlet<br>Context匹配到URL PATTERN为*.jsp的servlet，对应于JspServlet类<br>构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用JspServlet的doGet或doPost方法</p>
<h4 id="返回响应"><a href="#返回响应" class="headerlink" title="返回响应"></a>返回响应</h4><p>Context把执行完了之后的HttpServletResponse对象返回给Host<br>Host把HttpServletResponse对象返回给Engine<br>Engine把HttpServletResponse对象返回给Connector<br>Connector把HttpServletResponse对象返回给客户browser</p>
<p>请求流程图(Graphiz绘制)：</p>
<img src="/2016/09/22/tomcat-http/tomcat-handle-flow.jpg" alt="HTTP在Tomcat中的Handle流程" title="HTTP在Tomcat中的Handle流程">]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Eclipse中启动和调试Tomcat（二）]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/20/launching-and-debugging-tomcat-extra/</url>
      <content type="html"><![CDATA[<p>在Eclipse中启动和调试Tomcat（一）中，断点只能在自定义Servlet中命中，如果想观察详细的Tomcat运行过程，还需要从Tomcat的入口开始进行调试。详细步骤如下(未完全通过，暂勿参考)：</p>
<h4 id="引入Tomcat8-0-37jar包"><a href="#引入Tomcat8-0-37jar包" class="headerlink" title="引入Tomcat8.0.37jar包"></a>引入Tomcat8.0.37jar包</h4><p>由于Tomcat的入口类JIoEndPoint实现在tomcat-coyote.jar包中，入口org.apache.tomcat.util.net.JIoEndpoint，该类用来处理传递进来的TCP连接，它实现了一个简单的服务器模式：一个监听线程用来接收socket以及为每个进来的连接创建一个worker来处理。更加高级的功能会涉及到线程重用，如队列等。所以需要引入Tomcat8.0.37中的tomcat-coyote.jar包，在Tomcat8项目的lib目录中。</p>
<a id="more"></a>
<h4 id="附加源码"><a href="#附加源码" class="headerlink" title="附加源码"></a>附加源码</h4><p>附加源码如下图所示。</p>
<img src="/2016/09/20/launching-and-debugging-tomcat-extra/attach-tomcat-source.jpg" alt="Tomcat源码附加" title="Tomcat源码附加">
<h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>在JIoEndPoint类中的processSocket方法上新建断点，在浏览器中请求<a href="http://localhost:9090/examples/demo/test" target="_blank" rel="external">地址</a>即可命中断点，单步跟踪调试即可。Tomcat中支持两种协议的连接器：HTTP/1.1与AJP/1.3。HTTP/1.1协议负责建立HTTP连接，web应用通过浏览器访问tomcat服务器用的就是这个连接器，默认监听的是8080端口；AJP/1.3协议负责和其他HTTP服务器建立连接，监听的是8009端口，比如tomcat和apache或者iis集成时需要用到这个连接器。<br>协议上有三种不同的实现方式：JIO、APR、NIO。</p>
<ul>
<li><strong>JIO(java.io)</strong>：用java.io纯JAVA编写的TCP模块，这是tomcat默认连接器实现方法；</li>
<li><strong>APR(Apache Portable Runtime)</strong>：有C语言和JAVA两种语言实现，连接Apache httpd Web服务器的类库是在C中实现的，同时用APR进行网络通信；</li>
<li><strong>NIO(java.nio)</strong>：这是用纯Java编写的连接器(Conector)的一种可选方法。该实现用java.nio核心Java网络类以提供非阻塞的TCP包特性。ProtocolHandler接口是对这些协议的抽象</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Eclipse中启动和调试Tomcat（一）]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/20/launching-and-debugging-tomcat/</url>
      <content type="html"><![CDATA[<p>在Eclipse中调试Tomcat可以分析HTTP请求从Tomcat捕获到Servlet的过程。这个是调试Tomcat的目的。调试的环境是：</p>
<ul>
<li>IDE：Eclipse Java EE IDE for Web Developers.Version: Neon Release (4.6.0) Build id: 20160613-1800</li>
</ul>
<ul>
<li>Tomcat 8.0（8.0.37）</li>
</ul>
<ul>
<li><p>JDK 1.8</p>
</li>
<li><p>OS：Windows 7 Ultimate x64</p>
</li>
</ul>
<a id="more"></a>
<h4 id="创建项目Tomcat8"><a href="#创建项目Tomcat8" class="headerlink" title="创建项目Tomcat8"></a>创建项目Tomcat8</h4><p>创建一个新的Java类型项目，项目名称为“Tomcat8”，如下如所示。</p>
<img src="/2016/09/20/launching-and-debugging-tomcat/create-new-java-project.jpg" alt="新建项目Tomcat8" title="新建项目Tomcat8">
<h4 id="下载Tomcat-8-0-37二进制包"><a href="#下载Tomcat-8-0-37二进制包" class="headerlink" title="下载Tomcat 8.0.37二进制包"></a>下载Tomcat 8.0.37二进制包</h4><p>下载<a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="external">Tomcat 8.0.37</a>对应的二进制文件。将之拷贝到项目Tomcat8项目的根目录。拷贝之后Tomcat项目的目录结构如下图所示。</p>
<img src="/2016/09/20/launching-and-debugging-tomcat/tomcat8-tree-structure.jpg" alt="Tomcat8项目目录树结构" title="Tomcat8项目目录树结构">
<h4 id="创建另一个项目test"><a href="#创建另一个项目test" class="headerlink" title="创建另一个项目test"></a>创建另一个项目test</h4><p>创建一个Maven的webapp项目,名字为“test”。</p>
<h4 id="新建自定义Servlet"><a href="#新建自定义Servlet" class="headerlink" title="新建自定义Servlet"></a>新建自定义Servlet</h4><p>在test项目下新建一个自定义Servlet,名字为“TestServlet”，如图所示：</p>
<img src="/2016/09/20/launching-and-debugging-tomcat/add-custom-servlet.jpg" alt="添加自定义Servlet" title="添加自定义Servlet">
<p>由于TestServlet实现HttpServlet接口，HttpServlet接口的定义在servlet-api.jar包中，所以在test项目的Library中需要引用Tomcat8项目目录下的servlet-api.jar包。新建自定义Servlet完成后在Tomcat8项目中配置servlet映射(/webapps/examples/WEB-INF)：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上映射说明从/demo/test发送的请求由名为test的Servlet来处理。在Tomcat8项目中配置servlet(/webapps/examples/WEB-INF)：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>demo.TestServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上配置指明名为test的Servlet处理的类的完整路径为：demo.TestServlet。</p>
<h4 id="配置调试参数"><a href="#配置调试参数" class="headerlink" title="配置调试参数"></a>配置调试参数</h4><p>配置test项目，创建调试配置，配置Main Class为Tomcat的启动类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.apache.catalina.startup.Bootstrap</div></pre></td></tr></table></figure>
<p>配置test项目的工作空间为Tomcat8的工作空间，如图所示：</p>
<img src="/2016/09/20/launching-and-debugging-tomcat/config-workspace.jpg" alt="配置test项目工作空间" title="配置test项目工作空间">
<h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>在自定义的Servlet的doGet方法上打断点，打开浏览器访问<a href="http://localhost:9090/examples/demo/test" target="_blank" rel="external">链接</a>即可命中自定义Servlet。从这里可以加深理解HTTP请求到自定义Servlet处理的过程，可以理解Spring MVC和Tomcat是如何联系起来的。</p>
<p>源自：</p>
<ul>
<li><a href="http://andreas.haufler.info/2012/01/launching-and-debugging-tomcat-from.html" target="_blank" rel="external">Launching and Debugging Tomcat from Eclipse without complex plugins</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中String非空判断]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/19/java-string-not-null/</url>
      <content type="html"><![CDATA[<p>如果使用的Java运行时版本在Java SE 1.6之前，可以这样判断字符串非空：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(str != <span class="keyword">null</span> &amp;&amp; str.length() != <span class="number">0</span>)</div></pre></td></tr></table></figure>
<p>如果使用的Java运行时版本是Java SE 1.6及之后版本，可以这样判断字符串非空：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(str != <span class="keyword">null</span> &amp;&amp; !str.isEmpty())</div></pre></td></tr></table></figure>
<p>使用org.apache.commons.lang.StringUtils<a href="http://commons.apache.org/proper/commons-lang/" target="_blank" rel="external">Apache commons-lang</a>来完成：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(str)) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如下方式也可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.google.common.base.Strings;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!Strings.isNullOrEmpty(myString)) &#123;</div><div class="line">       <span class="keyword">return</span> myString;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="非空默认值"><a href="#非空默认值" class="headerlink" title="非空默认值"></a>非空默认值</h4><p>有时在值为null时，会给一个默认值，有如下方式。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String alarmType = vehicleMessageHandler.parseAlarm(kafkaRecievedLocationMessageBody.getAlarm());</div><div class="line"><span class="comment">//使用三元运算符</span></div><div class="line">positional.setAlarm(StringUtils.isBlank(alarmType) ? <span class="string">"0"</span> : alarmType);</div><div class="line"><span class="comment">//com.google.common.base</span></div><div class="line">Objects.firstNonNull(alarmType, <span class="string">"0"</span>);</div><div class="line"><span class="comment">//java.util</span></div><div class="line">Optional.ofNullable(alarmType).orElse(<span class="string">"0"</span>);</div></pre></td></tr></table></figure>
<p>源自：</p>
<ul>
<li><a href="http://stackoverflow.com/questions/3598770/java-check-whether-a-string-is-not-null-and-not-empty" target="_blank" rel="external">Java, check whether a string is not null and not empty?</a></li>
</ul>
<ul>
<li><a href="http://stackoverflow.com/questions/8039504/how-to-convert-a-possible-null-value-to-a-default-value-using-guava" target="_blank" rel="external">How to convert a possible null-value to a default value using Guava?</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC源码调试]]></title>
      <url>http://jiangxiaoqiang.com/2016/09/17/springmvc-sourcecode-debugging/</url>
      <content type="html"><![CDATA[<p>这里调试Spring MVC的环境是：</p>
<ul>
<li><p>Windows 7</p>
</li>
<li><p>Eclipse Java EE IDE for Web Developers,Version: Neon Release (4.6.0).Build id: 20160613-1800</p>
</li>
<li><p>JDK 1.8</p>
</li>
<li><p>Spring MVC 4.2.3</p>
</li>
<li><p>Apache Tomcat 8.0</p>
</li>
</ul>
<p>想了解平时学习的理论知识在实际的代码实现中是什么情况，比较好的方式是阅读源码，如果能在阅读过程中根据疑问动手调试源码验证猜想和疑问，那就更加完美了。这里想看Spring MVC一个HTTP请求从开始到结束到底是怎么运行的，Spring MVC怎么处理，选取了4.2.3版本的源码进行调试。</p>
<a id="more"></a>
<p>首先从GitHub上下载4.2.3版本的源码，在项目的Maven Dependencies找到名为spring-webmvc-4.2.3.REALEASE的jar包，单击右键build-path–&gt;Configure build path,在Libraries中找到对应的jar包，选中source attachment–&gt;Edit.</p>
<img src="/2016/09/17/springmvc-sourcecode-debugging/springmvc-attach-source.png" alt="Spring MVC关联源码" title="Spring MVC关联源码">
<p>在spring-webmvc-4.2.3.REALEASE.jar中找到dispatchservlet类，打断点即可进入调试。</p>
]]></content>
    </entry>
    
  
  
</search>
